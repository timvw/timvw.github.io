<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uncategorized on Tim Van Wassenhove&#39;s blog</title>
    <link>/categories/Uncategorized/</link>
    <description>Recent content in Uncategorized on Tim Van Wassenhove&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="/categories/Uncategorized/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About maven dependency type &#39;bundle&#39;</title>
      <link>/post/2016-01-29-about-maven-dependency-type-bundle/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-01-29-about-maven-dependency-type-bundle/</guid>
      <description>
        
          &lt;p&gt;Earlier this week my build failed because maven was not able to resolve an (indirect) dependency on some package. It took me a while to notice that the dependency node in the pom file had an extra attribute: type = bundle. It only took a couple of minutes to find a good explanation &lt;a href=&#34;http://stackoverflow.com/questions/14913615/osgi-bundle-vs-jar-dependency&#34;&gt;here&lt;/a&gt;. Build fixed 😉&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Composing functions and leveraging scala.util.Try</title>
      <link>/post/2016-01-29-composing-functions-and-leveraging-scala-util-try/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-01-29-composing-functions-and-leveraging-scala-util-try/</guid>
      <description>
        
          &lt;p&gt;Last couple of days I have been hacking around trying to find a cute way to express the intent of my code. Typically it involves parsing some input, validating whatever rules that are in charge and persisting some values. In scala one can compose such a function by using the &lt;a href=&#34;http://www.scala-lang.org/api/2.11.x/index.html#scala.Function1&#34;&gt;andThen&lt;/a&gt; method. Here is a concrete example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; x  
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; parseInput &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; id &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; validate &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; id &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; persist &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; id &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; usecase1 &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; parseInput andThen validate andThen persist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inspired by the excellent series on &lt;a href=&#34;http://fsharpforfunandprofit.com/posts/recipe-part2/&#34;&gt;Railway Oriented Programming&lt;/a&gt; series by &lt;a href=&#34;@ScottWlaschin&#34;&gt;Scott Wlaschin&lt;/a&gt; I wanted to take advange of &lt;a href=&#34;http://www.scala-lang.org/files/archive/api/current/index.html#scala.util.Try&#34;&gt;scala.util.Try&lt;/a&gt; to remove try/catch clutter from my code. With a little helper function I can now compose my usecase as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; makeTry&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TIn&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;TOut&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;](&lt;/span&gt;fn&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TIn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TOut&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TIn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Try&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; usecase &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt;
	makeTry&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;parseInput andThen validate andThen persist&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; andThen
	processErrors andThen
	proceedOrRetry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of composing functions I could have also written code as a chain of values that are transformed by subsequent functions as following (Very much fsharp like):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pipe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;](&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;](&lt;/span&gt;f&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; U&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;implicit&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; toPipe&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;](&lt;/span&gt;x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pipe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; usecase&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; 
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Try&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; parseInput &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; validate &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; persist&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
	processErrors &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
	proceedOrRetry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, with scala there is more than one way to express something in an elegant way!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Using Gson to serialize Scala objects</title>
      <link>/post/2016-01-14-using-gson-to-serialize-scala-objects/</link>
      <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-01-14-using-gson-to-serialize-scala-objects/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;https://github.com/google/gson&#34;&gt;gson&lt;/a&gt; is a pretty nice library that converts Java objects into JSON and back. When using this library from Scala things become a bit harder (eg: Plenty of people have difficulties when their scala object has an (im)mutable Map or List).&lt;/p&gt;
&lt;p&gt;Here is an example to convert a JSON object to a Map[String,String]:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; com.google.gson.Gson
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; scala.collection.JavaConversions._

&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mapJson &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ &amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39; }&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; map &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gson&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;fromJson&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mapJson&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; classOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;java.util.Map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we know that this works, we hide the java types in the constructor and expose a nicer scala type via a method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dummy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; settings&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;java.util.Map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; getSettings &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; settings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toMap
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; dummyJson &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ &amp;#39;settings&amp;#39; : { &amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39; } }&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; dummy &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gson&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;fromJson&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dummyJson&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; classOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Dummy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dummy2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; options&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;java.util.List&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; getOptions &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toList
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; dummy2Json &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ &amp;#39;options&amp;#39; : [ &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39; ] }&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; dummy2 &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gson&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;fromJson&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dummy2Json&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; classOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Dummy2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; One could simply use &lt;a href=&#34;https://github.com/lift/lift/tree/master/framework/lift-base/lift-json&#34;&gt;lift-json&lt;/a&gt; instead and get pretty good scala support for free.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Notes on running spark-notebook</title>
      <link>/post/2015-08-27-notes-on-running-spark-notebook/</link>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-08-27-notes-on-running-spark-notebook/</guid>
      <description>
        
          &lt;p&gt;These days &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; makes it extremely easy to get started with virtually any application you like. At first I was a bit skeptical but over the last couple of months I have changed my mind. Now I strongly believe this is a game changer. Even more when it comes to Windows. Anyway, these days kitematic (GUI to manage docker images) allows you to simply pick the &lt;a href=&#34;https://github.com/andypetrella/spark-notebook&#34;&gt;spark-notebook&lt;/a&gt; by Andy Petrella.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2015/08/docker_pick_image.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When running your docker host in VirtualBox, you still need to set up port forwarding for port 9000 (the notebook) and ports 4040 to 4050 (spark-ui) Assuming your docker host vm is named default:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;VBoxManage modifyvm &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; --natpf1 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp-port9000,tcp,,9000,,9000&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These days &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; makes it extremely easy to get started with virtually any application you like. At first I was a bit skeptical but over the last couple of months I have changed my mind. Now I strongly believe this is a game changer. Even more when it comes to Windows. Anyway, these days kitematic (GUI to manage docker images) allows you to simply pick the &lt;a href=&#34;https://github.com/andypetrella/spark-notebook&#34;&gt;spark-notebook&lt;/a&gt; by Andy Petrella.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2015/08/docker_pick_image.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When running your docker host in VirtualBox, you still need to set up port forwarding for port 9000 (the notebook) and ports 4040 to 4050 (spark-ui) Assuming your docker host vm is named default:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;VBoxManage modifyvm &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; --natpf1 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp-port9000,tcp,,9000,,9000&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can browse to http://localhost:9000 and start using your new notebook:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2015/08/spark_notebook_home.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may want to copy the default set of notebooks to a local directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker cp $containerName:/opt/docker/notebooks /Users/timvw/notebooks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using that local copy is just a few clicks away with Kitematic:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2015/08/docker_notebook_settings.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Offcourse you want to use additional packages such as &lt;a href=&#34;https://github.com/databricks/spark-csv&#34;&gt;spark-csv&lt;/a&gt;. This can be achieved by editting the your notebook metadata:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2015/08/spark_notebook_metadata.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You simply need to add an entry to customDeps:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2015/08/spark_notebook_customdeps.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When your container did not shutdown correctly, you may end up in the awkward situation that your container believes that it is still running(). The following commands fix that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker start $containerName &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker exec -t -i $containerName /bin/rm /opt/docker/RUNNING_PID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Scaffolding scala projects</title>
      <link>/post/2015-08-19-scaffolding-scala-projects/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-08-19-scaffolding-scala-projects/</guid>
      <description>
        
          &lt;p&gt;These days the cool kids scaffold their projects with &lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt;. Obviously I could not stay behind, so here is my first &lt;a href=&#34;https://github.com/timvw/generator-scala&#34;&gt;generator for scala&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/2d553cce06333627904d8e33b61c91dfa7ae7bc4/687474703a2f2f692e696d6775722e636f6d2f4a4861416c424a2e706e67&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>ConcurrencyCheck with EF/Devart on Oracle</title>
      <link>/post/2015-02-20-concurrencycheck-with-efdevart-on-oracle/</link>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-02-20-concurrencycheck-with-efdevart-on-oracle/</guid>
      <description>
        
          &lt;p&gt;Earlier this week I was wondering how I could easily achieve optimistic concurrency in a system using EF/Devart targetting an Oracle database (Not really my preferred technologies, but whatever:P). Here is a potential solution:&lt;/p&gt;
&lt;p&gt;Using a column for optimistic concurrency is documented on the devart website:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Table(&amp;#34;TEST&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt; : IRequireConcurrencyCheck  
{
	...
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[Required]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[Column(&amp;#34;VERSION&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[ConcurrencyCheck]&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// TELL EF to use this column as our &amp;#34;timestamp/logical version&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Version { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; } &lt;span style=&#34;color:#75715e&#34;&gt;// protected, so users of this type can not touch this (easily)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By introducing an interface that exposes a version number like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IRequireConcurrencyCheck
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Version { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; } 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With some custom behaviour on SaveChanges we can now take away the burden of having to update the Version property correctly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DataContext&lt;/span&gt; : DbContext
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DataContext(DbConnection existingConnection)  
		: &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(existingConnection, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)    
	{ 
		Database.SetInitializer&amp;lt;DataContext&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; SaveChanges()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; = ChangeTracker        
			.Entries&amp;lt;IRequireConcurrencyCheck&amp;gt;()
			.Where(x =&amp;gt; x.State == EntityState.Modified)	
			.ToArray();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; entity &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; entitiesWhichHaveConcurrencyCheck)
		{
			entity.Property&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(x =&amp;gt; x.Version).CurrentValue++;  
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.SaveChanges();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IDbSet&amp;lt;Test&amp;gt; Tests { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Failure to load mono-supplied .dylib (libgdiplus.dylib) when running from console</title>
      <link>/post/2014-09-27-failure-to-load-mono-supplied-dylib-libgdiplus-dylib-when-running-from-console/</link>
      <pubDate>Sat, 27 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-09-27-failure-to-load-mono-supplied-dylib-libgdiplus-dylib-when-running-from-console/</guid>
      <description>
        
          &lt;p&gt;So earlier this week I was bit by the following bug: &lt;a href=&#34;https://bugzilla.xamarin.com/show_bug.cgi?id=22140&#34;&gt;Bug 22140 &amp;ndash; Failure to load mono-supplied .dylib when running from console.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The workaround that works for me is the following: Edit /Library/Frameworks/Mono.framework/Versions/3.8.0/etc/mono/config and&lt;/p&gt;
&lt;p&gt;replace the entries for libgdiplus:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dllmap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dll=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gdiplus&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Library/Frameworks/Mono.framework/Versions/3.8.0/lib/libgdiplus.dylib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!windows&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dllmap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dll=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gdiplus.dll&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Library/Frameworks/Mono.framework/Versions/3.8.0/lib/libgdiplus.dylib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!windows&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dllmap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dll=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gdi32&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Library/Frameworks/Mono.framework/Versions/3.8.0/lib/libgdiplus.dylib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!windows&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dllmap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dll=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gdi32.dll&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Library/Frameworks/Mono.framework/Versions/3.8.0/lib/libgdiplus.dylib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!windows&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Deploying a Cloud Service to Azure with Octopus</title>
      <link>/post/2014-08-15-deploying-a-cloud-service-to-azure-with-octopus/</link>
      <pubDate>Fri, 15 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-08-15-deploying-a-cloud-service-to-azure-with-octopus/</guid>
      <description>
        
          &lt;p&gt;Currently Octopus has limited support to deploy a Cloud Service on Azure. A typical use-case is that you need a different Web.Config file per environment. Simply add the Web.Environment.Config files to your NuGet package and use the following &lt;a href=&#34;https://gist.github.com/timvw/4e32226dd1ff149b5eab.js&#34;&gt;PreDeploy.ps1&lt;/a&gt; script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Load unzip support&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[Reflection.Assembly]&lt;/span&gt;::LoadWithPartialName(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System.IO.Compression.FileSystem&amp;#34;&lt;/span&gt;) | Out-Null
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Unzip($zipFile, $destination)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;If&lt;/span&gt; (Test-Path $destination){	  
		Remove-Item $destination -Recurse | Out-Null
	}
	  
	New-Item -ItemType directory -Force -Path $destination | Out-Null  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;[System.IO.Compression.ZipFile]&lt;/span&gt;::ExtractToDirectory($zipFile, $destination) | Out-Null
}

&lt;span style=&#34;color:#75715e&#34;&gt;# Unzip deployment package  &lt;/span&gt;
$CsPkg = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Customer.Project.Api.Azure.cspkg&amp;#34;&lt;/span&gt;
Unzip $CsPkg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurePackage&amp;#34;&lt;/span&gt;
Unzip (Get-Item (join-path -path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurePackage&amp;#34;&lt;/span&gt; -childPath &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.cssx&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Perform replacements, eg: replace Web.Config  &lt;/span&gt;
$ConfigFileToUse = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Web.&amp;#34;&lt;/span&gt; + $OctopusParameters[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Octopus.Environment.Name&amp;#34;&lt;/span&gt;] + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.config&amp;#34;&lt;/span&gt;
Copy-Item -Path $ConfigFileToUse -Destination &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website/sitesroot/0/Web.Config&amp;#34;&lt;/span&gt; -Force

&lt;span style=&#34;color:#75715e&#34;&gt;# Repackage  &lt;/span&gt;
$role = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Customer.Project.Api&amp;#34;&lt;/span&gt;
$contentPath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website\approot&amp;#34;&lt;/span&gt;
$rolePath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website/approot&amp;#34;&lt;/span&gt;
$webPath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website/sitesroot/0&amp;#34;&lt;/span&gt;
$cspackPath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Program Files\Microsoft SDKs\Windows Azure\.NET SDK\v2.2\bin\cspack.exe&amp;#34;&lt;/span&gt;
&amp;amp; $cspackPath &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ServiceDefinition.csdef&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/out:$CsPkg&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/role:$role;$rolePath;Customer.Project.Api.dll&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/sites:$role;Web;$webPath&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/sitePhysicalDirectories:$role;Web;$webPath&amp;#34;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Cute sort implementation</title>
      <link>/post/2014-07-28-cute-sort-implementation/</link>
      <pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-07-28-cute-sort-implementation/</guid>
      <description>
        
          &lt;p&gt;For years I had been implementing my &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/tfakywbh(v=vs.110).aspx&#34;&gt;sort functions&lt;/a&gt; as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;(x,y) =&amp;gt; {  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x.PartName == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; y.PartName == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x.PartName == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y.PartName == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x.PartName.CompareTo(y.PartName);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Earlier today I found the following cute variant while browsing through the &lt;a href=&#34;https://github.com/ServiceStack/ServiceStack/blob/v3/src/ServiceStack/WebHost.Endpoints/Utils/FilterAttributeCache.cs&#34;&gt;ServiceStack&lt;/a&gt; codebase:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;(x,y) =&amp;gt; x.Priority - y.Priority  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Clone all your repositories on another machine</title>
      <link>/post/2014-04-23-clone-all-your-repositories-on-another-machine/</link>
      <pubDate>Wed, 23 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-04-23-clone-all-your-repositories-on-another-machine/</guid>
      <description>
        
          &lt;p&gt;Recently I was configuring a new machine (God, i love &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;) and I wanted to take all the repositories I have under c:/src and clone them on my new machine. Here is how i did that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# write all remote fetch locations into repositories.txt  &lt;/span&gt;
find /c/src -type d -mindepth &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -maxdepth &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -exec git -work-tree&lt;span style=&#34;color:#f92672&#34;&gt;={}&lt;/span&gt; -git-dir&lt;span style=&#34;color:#f92672&#34;&gt;={}&lt;/span&gt;/.git remote -v &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt; | grep fetch | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; &amp;gt; repositories.txt

&lt;span style=&#34;color:#75715e&#34;&gt;# clone each repository  &lt;/span&gt;
cat repositories.txt | xargs -l1 git clone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or as a gist: &lt;a href=&#34;https://gist.github.com/timvw/11208834&#34;&gt;https://gist.github.com/timvw/11208834&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>A parameterized active pattern to match the first elements of an array</title>
      <link>/post/2014-01-30-a-parameterized-active-pattern-to-match-the-first-elements-of-an-array/</link>
      <pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-01-30-a-parameterized-active-pattern-to-match-the-first-elements-of-an-array/</guid>
      <description>
        
          &lt;p&gt;Been writing code in F# for almost a year and never blogged about it. Time to change that. Earlier today someone asked the following on twitter:&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Is it possible to pattern match the first part of an array in #FSharp? Something like | 1::2::3::tail but for arrays? #lazyweb&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;I accepted the challenge :)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(|&lt;/span&gt;Array&lt;span style=&#34;color:#f92672&#34;&gt;|_|)&lt;/span&gt; pattern toMatch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;      
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; patternLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Array.length pattern
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; toMatchLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Array.length toMatch
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tailLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; toMatchLength &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; patternLength

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; patternLength &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; toMatchLength &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
		None
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; firstElementsAreEqual &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; 0 &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;patternLength &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.forall &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; pattern&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; toMatch&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;
          
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; firstElementsAreEqual &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
			Some&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Array.sub toMatch patternLength tailLength&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; 
			None
		
&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[|&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;|]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Array &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[|&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;|]&lt;/span&gt; tail &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; sprintf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bingo %i&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tail &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Array.sum&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// the tail is [|2;3|\]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or as a gist: &lt;a href=&#34;https://gist.github.com/timvw/8717796&#34;&gt;https://gist.github.com/timvw/8717796&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Comments are disabled on this blog</title>
      <link>/post/2014-01-23-comments-are-disabled-on-this-blog/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-01-23-comments-are-disabled-on-this-blog/</guid>
      <description>
        
          &lt;p&gt;As of now comments are disabled on this blog. Want to reply? Write your own post and pingback or engage a conversation on twitter with &lt;a href=&#34;https://twitter.com/timvw&#34;&gt;@timvw&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>The curious case of trailing spaces in SQL</title>
      <link>/post/2013-04-27-the-curious-case-of-trailing-spaces-in-sql/</link>
      <pubDate>Sat, 27 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-04-27-the-curious-case-of-trailing-spaces-in-sql/</guid>
      <description>
        
          &lt;p&gt;A while ago I was quite surprised to see that the following query returns 1 instead of 0:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; N&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Tim&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Tim &amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;-- notice the trailing space
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apparently this is just standard behaviour. Here is an extract from &lt;a href=&#34;http://www.andrew.cmu.edu/user/shadow/sql/sql1992.txt&#34;&gt;sql1992.txt&lt;/a&gt; (Section 8.2 Paragraph 3):&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;

        
      </description>
    </item>
    
    <item>
      <title>Sample query to demonstrate influence of collation in Sql Server</title>
      <link>/post/2012-10-18-sample-query-to-demonstrate-influence-of-collation-in-sql-server/</link>
      <pubDate>Thu, 18 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-10-18-sample-query-to-demonstrate-influence-of-collation-in-sql-server/</guid>
      <description>
        
          &lt;p&gt;Lately I had the pleasure to investigate &lt;a href=&#34;http://technet.microsoft.com/en-us/library/aa174903(v=sql.80).aspx&#34;&gt;collations&lt;/a&gt; and here is a sample query that demonstrates how a collation impacts the behaviour of a query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; [Words] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; N&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Een&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [word]  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ALL&lt;/span&gt;  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; N&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Eèn&amp;#39;&lt;/span&gt;	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ALL&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; N&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EEN&amp;#39;&lt;/span&gt;
)
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [word]	  
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Words]  
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [word]	  
&lt;span style=&#34;color:#75715e&#34;&gt;--COLLATE Latin1_General_CS_AS -- returns Een
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--COLLATE Latin1_General_CI_AI -- returns Een, Eèn and EEN
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--COLLATE LAtin1_General_CI_AS -- returns Een and EEN
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COLLATE&lt;/span&gt; Latin1_General_CS_AI &lt;span style=&#34;color:#75715e&#34;&gt;-- returns Een and Eèn
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Een&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Copy all mp3 files in Music folder to USB dribe</title>
      <link>/post/2012-09-22-copy-all-mp3-files-in-music-folder-to-usb-dribe/</link>
      <pubDate>Sat, 22 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-09-22-copy-all-mp3-files-in-music-folder-to-usb-dribe/</guid>
      <description>
        
          &lt;p&gt;Copying all mp3 files from my Music folder to a USB drive is pretty easy on my Macbook:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find Music -name *.mp3 -exec cp &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; /Volumes/SANDISK &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Using eID on OS X Mountain Lion</title>
      <link>/post/2012-08-06-using-eid-on-os-x-mountain-lion/</link>
      <pubDate>Mon, 06 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-08-06-using-eid-on-os-x-mountain-lion/</guid>
      <description>
        
          &lt;p&gt;Last week or so I got myself a MacBook Air and I am really loving it so far. Today I needed to use my &lt;a href=&#34;http://eid.belgium.be/en/&#34;&gt;eID&lt;/a&gt; so I installed the middleware application without any hassle but had a hard time configuring Safari. Apparently Apply removed support for &lt;a href=&#34;http://en.wikipedia.org/wiki/PKCS_?11&#34;&gt;PKCS #11&lt;/a&gt; in &lt;a href=&#34;http://www.apple.com/osx/&#34;&gt;OS X Mountain Lion&lt;/a&gt;. After installing &lt;a href=&#34;http://smartcardservices.macosforge.org&#34;&gt;SmartCard Services&lt;/a&gt; the certificates appeared in the Keychain and I became able to authenticate on websites using my certificate&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Add missing books to iTunes</title>
      <link>/post/2012-05-20-add-missing-books-to-itunes/</link>
      <pubDate>Sun, 20 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-05-20-add-missing-books-to-itunes/</guid>
      <description>
        
          &lt;p&gt;These days i read most books on my ipad. The problem is that iTunes does not seem to add pdf files when i choose &amp;lsquo;Add Folder&amp;rsquo; to the library. So here is a small application that adds them one by one (way too lazy/unmotivated to do this by hand).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/2759128&#34;&gt;https://gist.github.com/2759128&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Multiclean solution</title>
      <link>/post/2012-04-26-multiclean-solution/</link>
      <pubDate>Thu, 26 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-04-26-multiclean-solution/</guid>
      <description>
        
          &lt;p&gt;One of my favorite powershell commands when cleaning up:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$RootFolder = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\tfs&amp;#39;&lt;/span&gt;
Get-ChildItem $RootFolder bin -Recurse | Remove-Item -Recurse
Get-ChildItem $RootFolder obj -Recurse | Remove-Item -Recurse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>An example of Common Table Expression and Window function usage...</title>
      <link>/post/2012-03-27-an-example-of-common-table-expression-and-window-function-usage/</link>
      <pubDate>Tue, 27 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-03-27-an-example-of-common-table-expression-and-window-function-usage/</guid>
      <description>
        
          &lt;p&gt;Earlier this week some colleague had been assigned a maintenance task and asked me how I would solve it. Every customer is permitted to have an amount of publications. All excess publications should be removed from the system (only the n most recent ones are permitted to remain on the system).&lt;/p&gt;
&lt;p&gt;Here is an example of the Customer table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; [dbo].[Customer](  
	[CustomerId] [int] &lt;span style=&#34;color:#66d9ef&#34;&gt;IDENTITY&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;, 
	[CustomerName] [nvarchar](&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,  
	[PermittedPublications] [int] &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; [dbo].[Customer]		  
	([CustomerName], [PermittedPublications])
&lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt;
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timvw&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),		  
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mike&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An example of the customer publications table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; [dbo].[Publication](	  
	[PublicationId] [int] &lt;span style=&#34;color:#66d9ef&#34;&gt;IDENTITY&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,	  
	[CustomerId] [int] &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,	  
	[PublicationName] [nvarchar](&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,	  
	[PublicationTime] [datetime2] &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; [dbo].[Publication]
  	([CustomerId], [PublicationName],[PublicationTime])
&lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt;
	((&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [CustomerName] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timvw&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tim pub1&amp;#39;&lt;/span&gt;, SYSUTCDATETIME()),		  
	((&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [CustomerName] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timvw&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tim pub2&amp;#39;&lt;/span&gt;, SYSUTCDATETIME()),		  
	((&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [CustomerName] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timvw&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tim pub&amp;#39;&lt;/span&gt;, SYSUTCDATETIME()),
	((&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [CustomerName] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timvw&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tim pub4&amp;#39;&lt;/span&gt;, SYSUTCDATETIME()),
	((&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [CustomerName] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mike&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mike pub1&amp;#39;&lt;/span&gt;, SYSUTCDATETIME()),
	((&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [CustomerName] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mike&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mike pub2&amp;#39;&lt;/span&gt;, SYSUTCDATETIME()); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My colleague was keen on using some cursor logic, but I demonstrated him how a set-based alternative:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; [RankedPublication] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId]
		,[PublicationId]
		,[PublicationName]
		,[PublicationTime]
		,ROW_NUMBER() OVER(PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [PublicationTime]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [PublicationRank]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Publication]
), [ExcessPublication] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [PublicationId]	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [RankedPublication]	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; [Customer].[CustomerId] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [RankedPublication].[CustomerId]	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [PublicationRank] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; [Customer].[PermittedPublications]
)
&lt;span style=&#34;color:#66d9ef&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Publication]	  
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [PublicationId] &lt;span style=&#34;color:#66d9ef&#34;&gt;IN&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [PublicationId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [ExcessPublication]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Say no to primitives in your API.. and make your software more explicit</title>
      <link>/post/2011-10-28-say-no-to-primitives-in-your-api-and-make-your-software-more-explicit/</link>
      <pubDate>Fri, 28 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-10-28-say-no-to-primitives-in-your-api-and-make-your-software-more-explicit/</guid>
      <description>
        
          &lt;p&gt;A while ago I wrote some code like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; ICanBroadcast
{ 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Broadcast(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; message) { ... }  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Broadcast(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; message, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; author) { ... }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A bit later the requirements changed and from now on it was required to specify the topic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; ICanBroadcast  
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Broadcast(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; message, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; topic) { ... }  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Broadcast(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; message, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; author, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; topic) { ... } 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case you were using Broadcast(string message) the compiler would rightfully inform you that no such method exists. In case you were using Broadcast(string message, string author) the compiler does not catch the error and incorrectly uses the author as topic. I can only hope that you have a suite of tests that makes you notice that something is wrong when you upgrade to my latest release.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make the difference between an Author and a Topic more explicit (to our API consumers and the compiler) by creating explicit types to represent the concepts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; ICanBroadcast 
{  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Broadcast(Message message, Topic topic) { ... } 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Broadcast(Message message, Author author, Topic topic) { ... }  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The joy of using a typed language 😉&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Force the removal of a file with PowerShell</title>
      <link>/post/2011-10-18-force-the-removal-of-a-file-with-powershell/</link>
      <pubDate>Tue, 18 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-10-18-force-the-removal-of-a-file-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Last couple of weeks I have been generating a lot of files (and restricting their ACLs) and today I decided to remove all those files. The problem is that my user account did not have permissions on those files. Here is a small script that will first take ownership of the file, then grants FullControl permissions, and finally removes the file 🙂&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; RemoveFile 
{	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($FileName)
	
	&amp;amp;takeown /F $FileName
	$User = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Security.Principal.WindowsIdentity]&lt;/span&gt;::GetCurrent().User
	$Acl = Get-Acl $FileName	  
	$Acl.SetOwner($User)	  
	$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($User, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FullControl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;)	  
	$Acl.SetAccessRule($AccessRule)	  
	Set-Acl $FileName $Acl
	Remove-Item $FileName 
}

Get-ChildItem *.txt -R | % { RemoveFile $_.FullName; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Edit on 2011-10-19&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Resetting the permissions with icacls c:\output /reset /t and then calling Remove-Item c:\output -R does the trick.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; RemoveFiles 
{  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($Directory)

	icacls $Directory /reset /t 
	Remove-Item $Directory -R 
}

RemoveFiles c:\output;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Remove all access rules from a directory</title>
      <link>/post/2011-09-22-remove-all-access-rules-from-a-directory/</link>
      <pubDate>Thu, 22 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-09-22-remove-all-access-rules-from-a-directory/</guid>
      <description>
        
          &lt;p&gt;A while ago i needed to write some code that removes all (existing/inherited) access rules from a given directory. It was pretty frustrating to notice that all my attempts seemed to fail (&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.security.accesscontrol.commonobjectsecurity.removeaccessrule.aspx&#34;&gt;RemoveAccessRule&lt;/a&gt;, &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.security.accesscontrol.objectsecurity.purgeaccessrules.aspx&#34;&gt;PurgeAccessRule&lt;/a&gt;, &amp;hellip;)&lt;/p&gt;
&lt;p&gt;Finally i found that &lt;a href=&#34;&#34;&gt;SetAccessRuleProtection&lt;/a&gt; was the method that i needed to invoke.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Folder = &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;c:\temp\secured&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; directory = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryInfo(Folder);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; directorySecurity = directory.GetAccessControl();
directorySecurity.SetAccessRuleProtection(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
directory.SetAccessControl(directorySecurity);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;There you go 😉&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Use SQL Server Profiler to see if a connection is pooled</title>
      <link>/post/2011-08-19-use-sql-server-profiler-to-see-if-a-connection-is-pooled/</link>
      <pubDate>Fri, 19 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-08-19-use-sql-server-profiler-to-see-if-a-connection-is-pooled/</guid>
      <description>
        
          &lt;p&gt;It took me a couple of websearches to discover how i can see in SQL Server Profiler whether or not a connection is pooled. Apparently you have to check &amp;lsquo;Show all columns&amp;rsquo; and then you can check the &amp;lsquo;EventSubClass&amp;rsquo; column:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2011/08/sql_server_profiler_eventsubclass.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is how it looks like in your trace window:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2011/08/sql_server_profiler_eventsubclass_trace.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>SqlConnectionStringBuilder sets the Pooling property to true by default</title>
      <link>/post/2011-08-18-sqlconnectionstringbuilder-sets-the-pooling-property-to-true-by-default/</link>
      <pubDate>Thu, 18 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-08-18-sqlconnectionstringbuilder-sets-the-pooling-property-to-true-by-default/</guid>
      <description>
        
          &lt;p&gt;Here is something that surprised me: SqlConnectionStringBuilder sets the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlconnectionstringbuilder.pooling.aspx&#34;&gt;Pooling&lt;/a&gt; property to true by default.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Specialized solution for aggregate string concatenation</title>
      <link>/post/2011-08-01-specialized-solution-for-aggregate-string-concatenation/</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-08-01-specialized-solution-for-aggregate-string-concatenation/</guid>
      <description>
        
          &lt;p&gt;I have noticed that most people come up with the following solution to build a string in T-SQL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) [n]	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums] 
)	  
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; COALESCE(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;([n] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; nvarchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))	  
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers];

&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; STUFF(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Important! Microsoft has no official documentation describing this aggregate concatenation
technique that is based on the assignment SELECT syntax. The behavior described here is
based on observation alone. The current implementation of the ConcatOrders function doesn’t
incorporate
an ORDER BY clause and does not guarantee the order of concatenation. According
to a blog entry by Microsoft’s Conor Cunningham, it seems that SQL Server will respect an
ORDER BY clause if specified (&lt;a href=&#34;http://blogs.msdn.com/sqltips/archive/2005/07/20/441053.aspx)&#34;&gt;http://blogs.msdn.com/sqltips/archive/2005/07/20/441053.aspx)&lt;/a&gt;.
Conor is a very credible source, but I should stress that besides
this blog entry I haven’t found
any official documentation describing how a multi-row assignment
SELECT should behave—with
or without an ORDER BY clause.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the aid of FOR XML PATH (as mentionned in &lt;a href=&#34;http://www.sql.co.il/books/insidetsql2008/&#34;&gt;Inside Microsoft SQL Server 2008: T-SQL Programming&lt;/a&gt; we can solve this problem using a documented approach:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) [n]	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums] 
)	  
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;([n] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; nvarchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [text()]  
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers]	  
&lt;span style=&#34;color:#66d9ef&#34;&gt;FOR&lt;/span&gt; XML PATH(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;));

&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; STUFF(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>TryGetResult</title>
      <link>/post/2011-08-01-trygetresult/</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-08-01-trygetresult/</guid>
      <description>
        
          &lt;p&gt;I think this entry has been in the pipeline for a couple of years now and today i have decided to finally post it 😉 I got frustrated with the annoying out parameter in TryGet methods so i decided to use a different signature using TryGetResult:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryGetResult&lt;/span&gt;&amp;lt;T&amp;gt; 
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TryGetResult()   
  {   
    Success = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;  
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TryGetResult(T result)  
  {   
    Success = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; 
    Result = result;  
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Success { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; T Result { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now your TryGet methods can have the following signature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TryGetResult&amp;lt;Person&amp;gt; TryGetPersonByName(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name) 
{   
  &lt;span style=&#34;color:#75715e&#34;&gt;// person is not available  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(name.IsInvalidPersonName()) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TryGetResult();

  &lt;span style=&#34;color:#75715e&#34;&gt;// return the person
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TryGetResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(name));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Launch DtExec from PowerShell</title>
      <link>/post/2011-07-15-launch-dtexec-from-powershell/</link>
      <pubDate>Fri, 15 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-07-15-launch-dtexec-from-powershell/</guid>
      <description>
        
          &lt;p&gt;Running an SSIS package from PowerShell (using DTExec) can be as simple as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;RunPackage &lt;span style=&#34;color:#f92672&#34;&gt;-File&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\test.dtsx&amp;#39;&lt;/span&gt; -DatabaseHost &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; -DatabaseName &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TEST&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are the functions that make it this simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetDtExecPath {    
  $DtsPath = (Get-ItemProperty &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\100\DTS\Setup&amp;#39;&lt;/span&gt;).SQLPath;    
  $DtExecPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtsPath\Binn\DTExec.exe&amp;#34;&lt;/span&gt;);    
  $DtExecPath;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetDtExecPropertyPathValue() {      
  &lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;(
    $PropertyPath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
    $Value = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
  );

  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$PropertyPath;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$Value\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; RunPackage {
      
  &lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;(        
  $DtExecPath = (GetDtExecPath),       
  $File = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test.dtsx&amp;#39;&lt;/span&gt;  
  );

  $Params = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/FILE $File&amp;#34;&lt;/span&gt;;
   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;($i = 0; $i &lt;span style=&#34;color:#f92672&#34;&gt;-lt&lt;/span&gt; $Args.Length; $i += 2) {       
    $PropertyPath = $Args[$i].SubString(1);       
    $Value = $Args[$i+1];       
    $PropertyPathValue = GetDtExecPropertyPathValue -PropertyPath $PropertyPath -Value $Value;       
    $Params += &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; /SET $PropertyPathValue&amp;#34;&lt;/span&gt;;    
  } 

  &amp;amp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtExecPath&amp;#34;&lt;/span&gt; $Params;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Building a Nums table (quickly)</title>
      <link>/post/2011-07-13-building-a-nums-table-quickly/</link>
      <pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-07-13-building-a-nums-table-quickly/</guid>
      <description>
        
          &lt;p&gt;A while ago i presented my approach to generate a nums table &lt;a href=&#34;http://www.timvw.be/2010/12/11/techniques-learned-in-sqltopia-look-ma-no-loops/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt; INT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;    
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] ) 
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )
, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )
  
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because we only use this code once to fill the table we don&amp;rsquo;t really care that it is not very fast. Today i discovered there is a way to speed it up in this wonderful book: &lt;a href=&#34;http://oreilly.com/catalog/9780735626034/&#34;&gt;Inside Microsoft® SQL Server® 2008: T-SQL Querying&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;
      
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )  
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )
, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )
  
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yay for features like ORDER BY (SELECT &lt;!-- raw HTML omitted --&gt;).&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Using User-Defined Table Type with Identity column in ADO.NET</title>
      <link>/post/2011-07-13-using-user-defined-table-type-with-identity-column-in-ado-net/</link>
      <pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-07-13-using-user-defined-table-type-with-identity-column-in-ado-net/</guid>
      <description>
        
          &lt;p&gt;A while ago i wanted to use a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb522526.aspx&#34;&gt;User-Defined Table Type&lt;/a&gt; to pass in a set of records. Nothing special about this except that the first column of the UDTT was an Identity column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TYPE&lt;/span&gt; [Star].[example] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt;(  
  [Ordinal] [int] &lt;span style=&#34;color:#66d9ef&#34;&gt;IDENTITY&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,  
  [Name] [nvarchar](&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After finding a lot of posts saying that this is not supported a colleague of mine, &lt;a href=&#34;http://stevehorsfield.wordpress.com/&#34;&gt;Stephen Horsfield&lt;/a&gt;, found a way to do it as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; sqlMetaData = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;[] 
{  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlMetaData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ordinal&amp;#34;&lt;/span&gt;, SqlDbType.Int, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, SortOrder.Unspecified, -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlMetaData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;, SqlDbType.NVarChar, &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;)
};

sqlRecords = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashSet&amp;lt;SqlDataRecord&amp;gt;(usersToInclude.Select(user =&amp;gt;
{   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; record = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlDataRecord(sqlMetaData);   
  record.SetString(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, user.Name);   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; record; 
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Set variables in SSIS package at runtime</title>
      <link>/post/2011-05-19-set-variables-in-ssis-package-at-runtime/</link>
      <pubDate>Thu, 19 May 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-05-19-set-variables-in-ssis-package-at-runtime/</guid>
      <description>
        
          &lt;p&gt;The documentation on &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms162810.aspx&#34;&gt;dtexec Utility (SSIS Tool)&lt;/a&gt; says the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/Set propertyPath;value&lt;/p&gt;
&lt;p&gt;(Optional). Overrides the configuration of a variable, property, container, log provider, Foreach enumerator, or connection within a package. When this option is used, /Set changes the propertyPath argument to the value specified. Multiple /Set options can be specified.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At first sight this works like a charm but as soon as your value has a space dtexec seems to get confused 🙁 It took me a couple of websearches to find a &lt;a href=&#34;http://www.sqldev.org/sql-server-integration-services/escape-character-for-set-option-of-dtexec-34546.shtml&#34;&gt;post that suggests the following&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dtexec /SET \Package.Variables[User::TheVariable].Properties[Value];&#39;&#39;; space&#39;&#39;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It seems that this works like a charm 🙂 Because i am lazy i wrapped this in a powershell function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; PackageOption()
{	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($name, $value);
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$name;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$value\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now you can use it as following in your deployment script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$TheVariableOption = PackageOption -Name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\Package.Variables[User::TheVariable].Properties[Value]&amp;#34;&lt;/span&gt; -Value &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some thing&amp;#34;&lt;/span&gt;;
&amp;amp;dtexec /File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$package&amp;#34;&lt;/span&gt; /Set $TheVariableOption;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>How to handle (short) bursts of work</title>
      <link>/post/2011-05-09-how-to-handle-short-bursts-of-work/</link>
      <pubDate>Mon, 09 May 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-05-09-how-to-handle-short-bursts-of-work/</guid>
      <description>
        
          &lt;p&gt;Here is a summary of how businesses around me handle short bursts of work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When i go to the doctor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find an empty seat in the waiting room&lt;/li&gt;
&lt;li&gt;observe who&amp;rsquo;s before me&lt;/li&gt;
&lt;li&gt;wait untill all those people have been seen by the doctor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When i go to the supermarket:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;join the queue at the end&lt;/li&gt;
&lt;li&gt;wait untill al before me have been helped&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When i go the the bakery:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get a number from a ticketing machine at the entrance&lt;/li&gt;
&lt;li&gt;wait untill a seller indicates he&amp;rsquo;s willing to process my requests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When i go to my car dealer:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hand over car keys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;give my mobile phone number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;relax in the loung untill they come find me (or send me an sms)&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Invoke parameterized stored procedure with PowerShell</title>
      <link>/post/2011-03-21-invoke-parameterized-stored-procedure-with-powershell/</link>
      <pubDate>Mon, 21 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-21-invoke-parameterized-stored-procedure-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Here is a quick snippet that demonstrates how you can invoke a parametrized stored procedure with PowerShell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$CreateTraceCommand = $SqlConnection.CreateCommand();
$CreateTraceCommand.CommandType = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.CommandType]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StoredProcedure&amp;#34;&lt;/span&gt;;
$CreateTraceCommand.CommandText = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sp_trace_create&amp;#34;&lt;/span&gt;;
$TraceIdParameter = $CreateTraceCommand.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@traceid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.SqlDbType]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Int&amp;#34;&lt;/span&gt;);
$TraceIdParameter.Direction = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.ParameterDirection]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Output&amp;#34;&lt;/span&gt;;
$OptionParameter = $CreateTraceCommand.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@options&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.SqlDbType]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Int&amp;#34;&lt;/span&gt;);
$OptionParameter.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;[int]&lt;/span&gt; 2;
$TraceFileParameter = $CreateTraceCommand.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@tracefile&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.SqlDbType]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NVarChar&amp;#34;&lt;/span&gt;);
$TraceFileParameter.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c:\temp\test&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[void]&lt;/span&gt; $CreateTraceCommand.ExecuteNonQuery();

$TraceId = $TraceIdParameter.Value;
Write-Host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You created a trace with &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;``&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Global hotkeys for iTunes on windows</title>
      <link>/post/2011-03-16-global-hotkeys-for-itunes-on-windows/</link>
      <pubDate>Wed, 16 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-16-global-hotkeys-for-itunes-on-windows/</guid>
      <description>
        
          &lt;p&gt;These days i use iTunes as media player. Unlike winamp this program does not seem to support system-wide hotkeys to control playback. This is the place where a productivity tool like &lt;a href=&#34;http://www.autohotkey.com/&#34;&gt;AutoHotkey&lt;/a&gt; comes into the rescue ;).&lt;/p&gt;
&lt;p&gt;I have configured the following keys:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Move to next song: [Ctrl] + [Alt] + [Right]&lt;/li&gt;
&lt;li&gt;Move to previous song: [Ctrl] + [Alt] + [Left]&lt;/li&gt;
&lt;li&gt;Toggle play/pause: [Ctrl] + [Alt] + p&lt;/li&gt;
&lt;li&gt;Turn volume up: [Ctrl] + [Alt] + [Up]&lt;/li&gt;
&lt;li&gt;Turn volume down: [Ctrl] + [Alt] + [Down]&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;^!right::
DetectHiddenWindows , On
ControlSend , ahk_parent, ^&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, iTunes ahk_class iTunes 
DetectHiddenWindows , Off
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

^!left:: 
DetectHiddenWindows , On
ControlSend , ahk_parent, ^&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, iTunes ahk_class iTunes
DetectHiddenWindows , Off
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

^!p:: 
DetectHiddenWindows , On 
ControlSend , ahk_parent, &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;space&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, iTunes ahk_class iTunes
DetectHiddenWindows , Off
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

^!up::
DetectHiddenWindows , On
ControlSend, ahk_parent, ^&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;UP&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, iTunes ahk_class iTunes
DetectHiddenWindows , Off
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

^!down::
DetectHiddenWindows , On
ControlSend, ahk_parent, ^&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;DOWN&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, iTunes ahk_class iTunes
DetectHiddenWindows , Off 
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Navigation to the webpage was canceled</title>
      <link>/post/2011-03-16-navigation-to-the-webpage-was-canceled/</link>
      <pubDate>Wed, 16 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-16-navigation-to-the-webpage-was-canceled/</guid>
      <description>
        
          &lt;p&gt;Earlier today i ran into the &amp;lsquo;Navigation to the webpage was canceled&amp;rsquo; when i tried to open a CHM file:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2011/03/chm_navigation_to_page_was_canceled.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Navigating to the file properties allows me to unblock the file:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2011/03/chm_unblock.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And now i can happily use the CHM file:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2011/03/chm_working.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Consume locally build software without overloading your $PATH</title>
      <link>/post/2011-03-12-consume-locally-build-software-without-overloading-your-path/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-12-consume-locally-build-software-without-overloading-your-path/</guid>
      <description>
        
          &lt;p&gt;How do you consume locally build software? For a while now i have used the following approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a ~/bin folder&lt;/li&gt;
&lt;li&gt;Add that ~/bin folder to my $PATH&lt;/li&gt;
&lt;li&gt;Add symlinks from binary to ~/bin (ln -s ~/src/git-tfs/GitTfs.Vs2010/bin/debug/git-tfs.exe git-tfs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please let me know about your strategy..&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Dynamic scriptblock with PowerShell</title>
      <link>/post/2011-03-12-dynamic-scriptblock-with-powershell/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-12-dynamic-scriptblock-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Earlier this week i tried to run a command on a remote computer but it did not seem to work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tim&amp;#39;&lt;/span&gt;
$computer = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;
Invoke-Command -ComputerName $computer -ScriptBlock { Write-Host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello $name&amp;#34;&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because powershell serialises the { Write-Host &amp;ldquo;Hello $name&amp;rdquo; } as a string this ends up at the remote computer as { Write-Host &amp;ldquo;Hello $null&amp;rdquo; }. In order to send our &amp;ldquo;dynamic&amp;quot;command string over the wire we have to make sure it is serialised correctly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$scriptBlock = $executioncontext.InvokeCommand.NewScriptBlock(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Write-Host \&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Hello $name\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
Invoke-Command -ComputerName $computer -ScriptBlock $scriptBlock;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Some PowerShell functions to work with SSIS packages</title>
      <link>/post/2011-03-12-some-powershell-functions-to-work-with-ssis-packages/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-12-some-powershell-functions-to-work-with-ssis-packages/</guid>
      <description>
        
          &lt;p&gt;Here are some powershell functions (using XPath) that come in handy when working with SSIS packages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; FindConnectionManagerNames {	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($fileName)

	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $fileName);	  
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;	  
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);	  
	$xml.SelectNodes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:ConnectionManager/DTS:Property[@DTS:Name=&amp;#39;ObjectName&amp;#39;]&amp;#34;&lt;/span&gt;, $ns) | &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt; { $_.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#text&amp;#34;&lt;/span&gt;; }

}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetConnectionManagerConnectionString {  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($fileName, $connectionManagerName)

	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $fileName);
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);
	$path = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:ConnectionManager[DTS:Property=&amp;#39;$connectionManagerName&amp;#39;]/DTS:ObjectData/DTS:ConnectionManager/DTS:Property[@DTS:Name=&amp;#39;ConnectionString&amp;#39;]&amp;#34;&lt;/span&gt;
	$xml.SelectSingleNode($path, $ns).&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#text&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; FindVariables {	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($fileName)

	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $fileName);
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);
	$xml.SelectNodes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:Variable/DTS:Property[@DTS:Name=&amp;#39;ObjectName&amp;#39;]&amp;#34;&lt;/span&gt;, $ns) | &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt; { $_.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#text&amp;#34;&lt;/span&gt;; }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetVariable {	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($fileName, $variableName)

	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $fileName);
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);
	$xml.SelectSingleNode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:Variable[DTS:Property=&amp;#39;$variableName&amp;#39;]/DTS:VariableValue&amp;#34;&lt;/span&gt;, $ns).&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#text&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Some tips for .Net developers using git on cygwin</title>
      <link>/post/2011-03-12-some-tips-for-net-developers-using-git-on-cygwin/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-12-some-tips-for-net-developers-using-git-on-cygwin/</guid>
      <description>
        
          &lt;p&gt;Here are some tips that i want to share with fellow .Net developers that use git on cygwin.&lt;/p&gt;
&lt;p&gt;First of all i defined some aliases in my ~/.bashrc:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# open explorer in the current working directory &lt;/span&gt;
alias explorer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;explorer.exe &amp;#34;\`cygpath -aw \&amp;#34;$PWD\&amp;#34;\`&amp;#34;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# invoke MSBuild&lt;/span&gt;
alias msbuild&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/cygdrive/c/Windows/Microsoft.NET/Framework/v4.0.30319/MSBuild.exe&amp;amp;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because i do not like the TFS source control story i use &lt;a href=&#34;https://github.com/spraints/git-tfs&#34;&gt;git-tfs&lt;/a&gt;. As a .Net developer you want to add the following to your .git/info/exclude file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#OS junk files&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Tt&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;humbs.db
*.DS_Store
&lt;span style=&#34;color:#75715e&#34;&gt;#Visual Studio files  &lt;/span&gt;
*.&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Oo&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;bj 
*.exe 
*.pdb
*.user
*.aps 
*.pch 
*.vspscc 
*.vssscc 
*_i.c 
*_p.c 
*.ncb 
*.suo 
*.tlb
*.tlh
*.bak
*.&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Cc&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;ache
*.ilk 
*.log 
*.lib 
*.sbr 
*.sdf 
ipch/ 
obj/ 
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Bb&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;in
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Dd&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;ebug*/
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Rr&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;elease*/
Ankh.NoLoad
&lt;span style=&#34;color:#75715e&#34;&gt;#Tooling &lt;/span&gt;
_ReSharper*/ 
*.resharper
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Tt&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;est&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Rr&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;esult*
&lt;span style=&#34;color:#75715e&#34;&gt;#Subversion files &lt;/span&gt;
.svn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Whenever i work online i usually run these two commands consecutively: git -a -m &amp;lsquo;commit message&amp;rsquo; and git-tfs checkin -m &amp;lsquo;commit message&amp;rsquo;. Here is a small ~/bin/commit script that combines these:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;git commit -a -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
git-tfs checkin -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Using WinMerge as difftool on cygwin/git</title>
      <link>/post/2011-03-12-using-winmerge-as-difftool-on-cygwingit/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-12-using-winmerge-as-difftool-on-cygwingit/</guid>
      <description>
        
          &lt;p&gt;Last couple of weeks i have been using &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; on &lt;a href=&#34;http://www.cygwin.com&#34;&gt;cygwin&lt;/a&gt; and i got very satisfying results out of it. One thing that i wanted to tweak was the ability to use &lt;a href=&#34;http://winmerge.org/&#34;&gt;WinMerge&lt;/a&gt; to compare files. Here is how i do it:&lt;/p&gt;
&lt;p&gt;Here is my ~/.gitconfig:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;	  
name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tim Van Wassenhove	  
email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; git@timvw.be
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;diff&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
external &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/bin/git-diff-wrapper.sh&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is my ~/bin/git-diff-wrapper.sh (it uses &lt;a href=&#34;http://www.cygwin.com/cygwin-ug-net/using-utils.html&#34;&gt;cygpath&lt;/a&gt; to translate the paths):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/cygdrive/c/Program Files/WinMerge/WinMergeU.EXE&amp;#34;&lt;/span&gt; /e /ub /dl other /dr local &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\`cygpath -aw &lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;\`&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\`cygpath -aw &lt;/span&gt;$2&lt;span style=&#34;color:#e6db74&#34;&gt;\`&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\`cygpath -aw &lt;/span&gt;$5&lt;span style=&#34;color:#e6db74&#34;&gt;\`&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we are good to go 😉&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Get/SetVariable value from SSIS VariableDispenser</title>
      <link>/post/2011-03-08-getsetvariable-value-from-ssis-variabledispenser/</link>
      <pubDate>Tue, 08 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-08-getsetvariable-value-from-ssis-variabledispenser/</guid>
      <description>
        
          &lt;p&gt;Here is some code that allows you to Get/Set a variable (object) value from/on the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/microsoft.sqlserver.dts.runtime.variabledispenser.aspx&#34;&gt;VariableDispenser&lt;/a&gt; in an SSIS package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; T GetVariable&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; VariableDispenser variableDispenser, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; scopedVariableName)
{
  Variables variables = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
  {
    variableDispenser.LockForRead(scopedVariableName);
    variableDispenser.GetVariables(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; variables);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (T)variables[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].Value;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (variables != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) variables.Unlock();
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetVariable&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; VariableDispenser variableDispenser, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; scopedVariableName, T &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
{
  Variables variables = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;   
  {  
    variableDispenser.LockForWrite(scopedVariableName);  
    variableDispenser.GetVariables(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; variables);  
    variables[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;  
  }  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;  
  {   
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (variables != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) variables.Unlock();  
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Consume custom SSIS tasks without GAC installation</title>
      <link>/post/2011-03-05-consume-custom-ssis-tasks-without-gac-installation/</link>
      <pubDate>Sat, 05 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-05-consume-custom-ssis-tasks-without-gac-installation/</guid>
      <description>
        
          &lt;p&gt;For a while i thought that in order to consume a custom SSIS task you had to install the assembly in the GAC. Now i know better 😉&lt;/p&gt;
&lt;p&gt;For the designer (BIDS) you have to copy the files to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\Program Files\Microsoft SQL Server\100\DTS\Tasks&lt;/li&gt;
&lt;li&gt;C:\Program Files\Microsoft SQL Server\100\DTS\PipelineComponents&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the runtime (BIDS) you have to copy the files to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE\PrivateAssemblies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And for dtexec you have to copy the files to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\Program Files\Microsoft SQL Server\100\DTS\Binn&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a small powershell script that gives you the paths where you want to copy your assembly to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Lookup Tasks, PipelineComponents and DtExec paths  &lt;/span&gt;
$DtsPath = (Get-ItemProperty &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\100\DTS\Setup&amp;#39;&lt;/span&gt;).SQLPath;
$DtsTasksPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtsPath\Tasks&amp;#34;&lt;/span&gt;);

$DtsPipelineComponentsPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtsPath\Pipelinecomponents&amp;#34;&lt;/span&gt;);
$DtExecPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtsPath\Binn&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Lookup VS2008/Bids path&lt;/span&gt;
$Vs2008Path = (Get-ItemProperty &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HKLM:\Software\Microsoft\VisualStudio\9.0&amp;#39;&lt;/span&gt;).InstallDir;
$Vs2008PrivateAssembliesPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$Vs2008Path\PrivateAssemblies&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Exploring messaging at lower levels...</title>
      <link>/post/2011-02-26-exploring-messaging-at-lower-levels/</link>
      <pubDate>Sat, 26 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-02-26-exploring-messaging-at-lower-levels/</guid>
      <description>
        
          &lt;p&gt;Yesterday a colleague of mine, &lt;a href=&#34;http://neildoesdotnet.blogspot.com/&#34;&gt;Neil Robbins&lt;/a&gt;, asked me how a piece of code would look like if I apply the Hollywood principle on it (Don&amp;rsquo;t call us, we&amp;rsquo;ll cal you).&lt;/p&gt;
&lt;p&gt;Let me start with setting the scene: The purpose of the code is to provide items via provider and to consume those items via a consumer.&lt;/p&gt;
&lt;p&gt;Here is how my oldskool function signatures would look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemProviderFactory&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ItemProvider Create() { .. } 
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemProvider&lt;/span&gt; {   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IEnumerable&amp;lt;Item&amp;gt; Provide() { .. } 
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemConsumerFactory&lt;/span&gt; { 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ItemConsumer Create() { .. }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemConsumer&lt;/span&gt; { 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Consume(IEnumerable&amp;lt;Item&amp;gt; items) { .. }
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My Hollywood style function signatures look like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemProviderFactory&lt;/span&gt; { 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; WithItemProvider(Action&amp;lt;ItemProvider&amp;gt; action) { .. } 
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemProvider&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Provide(Action&amp;lt;IEnumerable&amp;lt;Item&amp;gt;&amp;gt; action) { .. }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemConsumerFactory&lt;/span&gt; { 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; WithItemConsumer(Action&amp;lt;ItemConsumer&amp;gt; action) { .. }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemConsumer&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Consume(IEnumerable&amp;lt;Item&amp;gt; items) { .. }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now I am able compare the code that glues everything together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OldStyle(OldStyle.ItemProviderFactory itemProviderFactory, OldStyle.ItemConsumerFactory itemConsumerFactory) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; provider = itemProviderFactory.Create();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; items = provider.Provide();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; consumer = itemConsumerFactory.Create(); 
  consumer.Consume(items); 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;  
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; HollywoodStyle(HollywoodStyle.ItemProviderFactory itemProviderFactory, HollywoodStyle.ItemConsumerFactory itemConsumerFactory) {  
  itemProviderFactory.With(provider =&amp;gt; 
    provider.Provide(items =&amp;gt; itemConsumerFactory.With(consumer =&amp;gt; 
      consumer.Consume(items))));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let me refactor this Hollywood code a bit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// An itemconsumer consumes items as following:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Action&amp;lt;HollywoodStyle.ItemConsumer, IEnumerable&amp;lt;Item&amp;gt;&amp;gt; consumerAction = (consumer, items) =&amp;gt; consumer.Consume(items);

&lt;span style=&#34;color:#75715e&#34;&gt;// As soon as I have items, I want a consumer to consume them:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Action&amp;lt;IEnumerable&amp;lt;Item&amp;gt;&amp;gt; itemsAction = (items) =&amp;gt; itemConsumerFactory.With(consumer =&amp;gt; consumerAction(consumer, items));

&lt;span style=&#34;color:#75715e&#34;&gt;// I can get items as following:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Action&amp;lt;HollywoodStyle.ItemProvider&amp;gt; providerAction = (provider) =&amp;gt; provider.Provide(itemsAction);

&lt;span style=&#34;color:#75715e&#34;&gt;// I can get an ItemProvider as following:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;itemProviderFactory.With(providerAction);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I think that most colleagues are quite thankful that i am not a Hollywood star 😉&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Get current file in PowerShell</title>
      <link>/post/2011-01-24-get-current-file-in-powershell/</link>
      <pubDate>Mon, 24 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-01-24-get-current-file-in-powershell/</guid>
      <description>
        
          &lt;p&gt;A while ago i wrote a small script to take care of deployment. Configuring the source folders went as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;(  
  $BaseDir = (Get-Location).Path,  
  $WebDir = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$BaseDir\web&amp;#34;&lt;/span&gt;),  
  $DatabaseDir = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$BaseDir\database&amp;#34;&lt;/span&gt;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem with this code is that it only works when your current working directory is set to the location of this script. An administrator (or build system) invokes the script as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;PS C:\Users\Admin&amp;gt;&amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D:\Deployments\20110124\Deploy.ps1&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because we don&amp;rsquo;t want to annoy the consumer of our script with the burden of making sure he is in the correct directory we modified our code as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;(  
  $BaseDir = (Split-Path $MyInvocation.MyCommand.Definition),  
  $WebDir = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$BaseDir\web&amp;#34;&lt;/span&gt;),	  
  $DatabaseDir = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$BaseDir\database&amp;#34;&lt;/span&gt;)  
)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A quick win 🙂&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Polling the existence of a file with PowerShell</title>
      <link>/post/2011-01-24-polling-the-existence-of-a-file-with-powershell/</link>
      <pubDate>Mon, 24 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-01-24-polling-the-existence-of-a-file-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Sometimes you run into a situations where a given task spawns a separate thread and completes it&amp;rsquo;s work on that separate thread. Eg: sending a bit XMLA to SQL Server Analysis Services with Microsoft.AnalysisServices.Deployment.exe and then waiting for the processing to be completed. Anyway, here is a simple function that will wait untill a given file exists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; WaitForFile($File) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(!(Test-Path $File)) {    
    Start-Sleep -s 10;   
  }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Get entire message body from an Intent</title>
      <link>/post/2011-01-06-get-entire-message-body-from-an-intent/</link>
      <pubDate>Thu, 06 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-01-06-get-entire-message-body-from-an-intent/</guid>
      <description>
        
          &lt;p&gt;I recently started programming the &lt;a href=&#34;http://www.android.com/&#34;&gt;Android&lt;/a&gt; and noticed that most examples for processing an incoming SMS are not entirely correct.&lt;/p&gt;
&lt;p&gt;An SMS message is &lt;a href=&#34;http://en.wikipedia.org/wiki/SMS#Message_size&#34;&gt;limited&lt;/a&gt; to 160 characters. Current mobile phones break up a larger message in multiple messages transparently for the user. When Android notifies you about an incoming SMS it has all parts (of that large message) available. So here is how you reconstruct the entire message body from an Intent&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Bundle bundle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; intent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtras&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;bundle &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

StringBuilder message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuilder&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;  
Object&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; pdus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Object&lt;span style=&#34;color:#f92672&#34;&gt;[])&lt;/span&gt; bundle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdus&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Rebuild this entire message from the multi part smses/pdus  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Object pdu &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; pdus&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;// Notice that i use the deprecated android.telephony.gsm.SmsMessage
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// android.telephony.SmsMessage throws when i call createFromPdu
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  SmsMessage msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SmsMessage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createFromPdu&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[])&lt;/span&gt;pdu&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  message&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessageBody&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;  
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Techniques learned in SQLtopia: Look Ma, no loops!</title>
      <link>/post/2010-12-11-techniques-learned-in-sqltopia-look-ma-no-loops/</link>
      <pubDate>Sat, 11 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-12-11-techniques-learned-in-sqltopia-look-ma-no-loops/</guid>
      <description>
        
          &lt;p&gt;I have been programming in c-based languages for more than 10 years now. Lately i have spent quite a bit of time in SQLtopia and learned a couple of techniques that are quite different from what i was used to.&lt;/p&gt;
&lt;p&gt;Let me explain with an example: The boss comes in and asks for a report that contains all the days on which i have worked this year. As a typical c# programmer i come up with the following solution: Iterate over all the days in the year and skip the days i was out on holidays:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;IEnumerable&amp;lt;DateTime&amp;gt; FindWorkingDays()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; begin = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; end = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; holidays = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;[]   
  {    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Holiday { Begin = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;), End = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;) },    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Holiday { Begin = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;), End = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) }   
  };

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; date = begin; date &amp;lt;= end; date = date.AddDays(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))   
  {    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(holidays.Any(holiday =&amp;gt; holiday.Begin &amp;lt;= date &amp;amp;&amp;amp; date &amp;lt;= holiday.End)) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; date;   
  }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In SQLtopia it is recommended to use set-based solutions instead of loops so we need a radically different solution.&lt;/p&gt;
&lt;p&gt;Here is how we generate rows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;    
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )  
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums4];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With rows we can generate numbers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt; INT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;    
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )  
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )
, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And with numbers we can generate dates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; DATETIME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-01-01&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; DATETIME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-12-31&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt; INT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DATEDIFF(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;    
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )  
, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )  
, [Dates] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; DATEADD(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, [Value], &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers] )
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Dates];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With dates we can build the dates on which we were out on holidays:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; DATETIME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-01-01&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; DATETIME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-12-31&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt; INT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DATEDIFF(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;    
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )  
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)    
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )    
, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )    
, [Dates] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; DATEADD(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, [Value], &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers] )    
, [Holidays] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-07-01&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Begin&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-07-31&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;]                      
&lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;                    
  &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-09-01&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Begin&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-09-15&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;]                  
)
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Holidays],[Dates] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;BETWEEN&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Begin&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Date];  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can easily select the dates that are not holiday dates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; DATETIME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-01-01&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; DATETIME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-12-31&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt; INT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DATEDIFF(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;  
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )    
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)    
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )    
, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )    
, [Dates] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; DATEADD(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, [Value], &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; DATEDIFF(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;))    
, [Holidays] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-07-01&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Begin&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-07-31&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;]                      
&lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;                      
  &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-09-01&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Begin&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-09-15&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;]                  
)
, [HolidayDates] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Holidays],[Dates] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;BETWEEN&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Begin&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;] )
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [Dates].[Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Dates]					  
&lt;span style=&#34;color:#66d9ef&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OUTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; [HolidayDates] &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; [Dates].[Date] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [HolidayDates].[Date]				    
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [HolidayDates].[Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Look Ma, no loops!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring window functions</title>
      <link>/post/2010-12-10-exploring-window-functions/</link>
      <pubDate>Fri, 10 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-12-10-exploring-window-functions/</guid>
      <description>
        
          &lt;p&gt;Here is a sample query that allows you to explore the behavior of various &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms189461.aspx&#34;&gt;aggregate window functions&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;    
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )  
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )
&lt;span style=&#34;color:#75715e&#34;&gt;-- Build numbers from 1 to 1000
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;) ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )

&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;    
  [Value]  
, ROW_NUMBER() OVER(PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [RowNumber]
, RANK() OVER(PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Rank]
, DENSE_RANK() OVER (PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [DenseRank]    
, NTILE(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) OVER (PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Tile100]  
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;    
  [Numbers]
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt;    
  [Value];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Convert AAC/M4A files to MP3 with VLC and PowerShell</title>
      <link>/post/2010-11-20-convert-aacm4a-files-to-mp3-with-vlc-and-powershell/</link>
      <pubDate>Sat, 20 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-20-convert-aacm4a-files-to-mp3-with-vlc-and-powershell/</guid>
      <description>
        
          &lt;p&gt;Here is a way to convert your AAC/M4A files to MP3 using &lt;a href=&#34;http://www.videolan.org/vlc&#34;&gt;VLC&lt;/a&gt; media player:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;vlc.exe -I dummy old.m4a :sout=#transcode{acodec=$codec,vcodec=dummy}:standard{access=file,mux=raw,dst=new.mp3} vlc://quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s wrap this command in a bit of PowerShell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ConvertToMp3(&lt;span style=&#34;color:#66d9ef&#34;&gt;[switch]&lt;/span&gt; $inputObject, &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt; $vlc = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\Program Files\VideoLAN\VLC\vlc.exe&amp;#39;&lt;/span&gt;) {      
  &lt;span style=&#34;color:#66d9ef&#34;&gt;PROCESS&lt;/span&gt; {            
    $codec = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mp3&amp;#39;&lt;/span&gt;;        
    $oldFile = $_;

    $newFile = $oldFile.FullName.Replace($oldFile.Extension, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.$codec&amp;#34;&lt;/span&gt;);

    &amp;amp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$vlc&amp;#34;&lt;/span&gt; -I dummy &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$oldFile&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:sout=#transcode{acodec=$codec,vcodec=dummy}:standard{access=file,mux=raw,dst=\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$newFile\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#34;&lt;/span&gt; vlc&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//quit | out-null;

    &lt;span style=&#34;color:#75715e&#34;&gt;#Only remove source files when you are sure that the conversion works as you want          &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#Remove-Item $oldFile;&lt;/span&gt;
  }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can use this function for *all* m4a files in a given folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ConvertAllToMp3(&lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt; $sourcePath) {
  Get-ChildItem &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$sourcePath\*&amp;#34;&lt;/span&gt; -recurse -include *.m4a | ConvertToMp3;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the function is as easy as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;ConvertAllToMp3 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\Users\timvw\Music&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Configure Visual Studio 2010 environment in PowerShell</title>
      <link>/post/2010-11-17-configure-visual-studio-2010-environment-in-powershell/</link>
      <pubDate>Wed, 17 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-17-configure-visual-studio-2010-environment-in-powershell/</guid>
      <description>
        
          &lt;p&gt;Instead of using the &amp;ldquo;Visual Studo Command Prompt (2010)&amp;rdquo; i wanted to use PowerShell instead. I found &lt;a href=&#34;http://blogs.msdn.com/b/ploeh/archive/2008/04/09/visualstudio2008powershell.aspx&#34;&gt;this&lt;/a&gt; post which does it for VS2008. Extending it for VS2010 was pretty easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; SetVS2008()
{
	$vs90comntools = (Get-ChildItem env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;VS90COMNTOOLS).Value
	$batchFile = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.IO.Path]&lt;/span&gt;::Combine($vs90comntools, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vsvars32.bat&amp;#34;&lt;/span&gt;)
	Get-Batchfile $BatchFile
	&lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Console]&lt;/span&gt;::Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visual Studio 2008 Windows PowerShell&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; SetVS2010()
{
	$vs100comntools = (Get-ChildItem env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;VS100COMNTOOLS).Value
	$batchFile = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.IO.Path]&lt;/span&gt;::Combine($vs100comntools, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vsvars32.bat&amp;#34;&lt;/span&gt;)
	Get-Batchfile $BatchFile
	&lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Console]&lt;/span&gt;::Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visual Studio 2010 Windows PowerShell&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Get-Batchfile($file)
{
	$cmd = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$file\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;amp; set&amp;#34;&lt;/span&gt;
	cmd /c $cmd | &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt;-Object {
		$p, $v = $_.split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;)
		Set-Item -path env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;$p -value $v
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Load all script files at PowerShell startup</title>
      <link>/post/2010-11-17-load-all-script-files-at-powershell-startup/</link>
      <pubDate>Wed, 17 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-17-load-all-script-files-at-powershell-startup/</guid>
      <description>
        
          &lt;p&gt;These days i have quite some scripts files that i want to be loaded each time i launch PowerShell. &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb613488%28VS.85%29.aspx&#34;&gt;Windows PowerShell Profiles&lt;/a&gt; teaches me where i should store my $profile. Here is what it looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Lookup powershell scripts location&lt;/span&gt;
$UserProfile = (Get-ChildItem Env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;UserProfile).Value;
$ScriptFolder = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$UserProfile\My documents\WindowsPowerShell&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# Source all .ps1 files in PowerShell profile folder  &lt;/span&gt;
Get-ChildItem $ScriptFolder -name -include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*.ps1&amp;#39;&lt;/span&gt; -exclude &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;profile.ps1&amp;#39;&lt;/span&gt;   
| &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; { (. &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$ScriptFolder\$_&amp;#34;&lt;/span&gt;) };

&lt;span style=&#34;color:#75715e&#34;&gt;# Configure environment for VS2010  &lt;/span&gt;
SetVS2010;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Get variable value from variable with PowerShell</title>
      <link>/post/2010-11-11-get-variable-value-from-variable-with-powershell/</link>
      <pubDate>Thu, 11 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-11-get-variable-value-from-variable-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Sometimes you only know at runtime in which variable a certain value is stored. Let me clarify with an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$tim = 30;
$evy = 24;
$name = Read-Host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter your name&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In essence, if $name equals tim we want to use $tim and if $name equals evy we want to use $evy. This can be achieved with Get-Variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$age = Get-Variable $name -valueOnly;
Write-Host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your age is $age&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Update ConfigurationStrings in SSIS package with PowerShell</title>
      <link>/post/2010-11-11-update-configurationstrings-in-ssis-package-with-powershell/</link>
      <pubDate>Thu, 11 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-11-update-configurationstrings-in-ssis-package-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Here are some functions that allow you to update ConfigurationStrings in a SSIS package (dtsx) using PowerShell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; UpdateConfigurationStrings($file)
{
	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $file);
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);
	UpdateConfigurationNodes $xml $ns;
	Set-Content $file $xml.OuterXml;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; UpdateConfigurationNodes($xml, $ns)
{
	$selectConfigurationNodes = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:Configuration&amp;#34;&lt;/span&gt;;
	$xml.SelectNodes($selectConfigurationNodes, $ns) | &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; { UpdateConfigurationNode $_ $ns; };
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; UpdateConfigurationNode($configurationNode, $ns)
{
	$selectConfigurationString = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./DTS:Property[@DTS:Name=&amp;#39;ConfigurationString&amp;#39;]&amp;#34;&lt;/span&gt;;
	$configurationStringNode = $configurationNode.SelectSingleNode($selectConfigurationString, $ns);

	$oldConfigurationStringValue = $configurationStringNode.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#text&amp;#39;&lt;/span&gt;;
	$newConfigurationStringValue = GetNewConfigurationStringValue $oldConfigurationStringValue;
	$configurationStringNode.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#text&amp;#39;&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$newConfigurationStringValue&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetNewConfigurationStringValue($oldConfigurationStringValue)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;# implement some logic to determine new value&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new value&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Build your solution with Visual Studio from MSBuild</title>
      <link>/post/2010-11-07-build-your-solution-with-visual-studio-from-msbuild/</link>
      <pubDate>Sun, 07 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-07-build-your-solution-with-visual-studio-from-msbuild/</guid>
      <description>
        
          &lt;p&gt;Unfortunately MSBuild and &lt;a href=&#34;http://bidshelper.codeplex.com/&#34;&gt;BIDS Helper&lt;/a&gt; are not able to build an .asdatabase from our Analysis Services project (.dwproj). Here is a task which invokes Visual Studio to build such a solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DevEnvBuild&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Error&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;$(SolutionFile)&amp;#39;==&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Missing SolutionFile&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;DevEnvTool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;$(DevEnvTool)&amp;#39;==&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;C:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE\devenv.exe&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/DevEnvTool&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;DevEnvSwitch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;$(DevEnvSwitch)&amp;#39;==&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Build&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/DevEnvSwitch&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;DevEnvBuildCommand&amp;gt;&lt;/span&gt;&amp;#34;$(DevEnvTool)&amp;#34; &amp;#34;$(SolutionFile)&amp;#34; /$(DevEnvSwitch)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/DevEnvBuildCommand&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Exec&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Command=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(DevEnvBuildCommand)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Invoke PowerShell script from MSBuild</title>
      <link>/post/2010-11-07-invoke-powershell-script-from-msbuild/</link>
      <pubDate>Sun, 07 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-07-invoke-powershell-script-from-msbuild/</guid>
      <description>
        
          &lt;p&gt;Here is a small MSBuild target that allows you to invoke a PowerShell script, eg: powershell.exe &amp;amp; &amp;lsquo;script.ps1&amp;rsquo; -SomeParam &amp;lsquo;x&amp;rsquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;InvokePowerShell&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PowerShellCommand&amp;gt;&lt;/span&gt;&amp;#34;$(PowerShellTool)&amp;#34; &amp;#34;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&lt;/span&gt; &amp;#39;$(ScriptFile)&amp;#39; -SomeParam &amp;#39;$(SomeParam)&amp;#39; &amp;#34;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PowerShellCommand&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Exec&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Command=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(PowerShellCommand)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Modify a text file with PowerShell</title>
      <link>/post/2010-11-07-modify-a-text-file-with-powershell/</link>
      <pubDate>Sun, 07 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-07-modify-a-text-file-with-powershell/</guid>
      <description>
        
          &lt;p&gt;A while ago i wanted to update a connection string in a configuration file. My first attempt was the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Get-Content $File
| &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt; { $_ &lt;span style=&#34;color:#f92672&#34;&gt;-Replace&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Source&amp;gt;(.*?)&amp;lt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Source&amp;gt;$New&amp;lt;&amp;#34;&lt;/span&gt; }
| Set-Content $File;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running this scripts leads to the following error: &amp;ldquo;Set-Content : The process cannot access the file because it is being used by another process.&amp;rdquo; In order to avoid this you can complete the read operation before you start writing as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;(Get-Content $File)
| &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt; { $_ &lt;span style=&#34;color:#f92672&#34;&gt;-Replace&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Source&amp;gt;(.*?)&amp;lt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Source&amp;gt;$New&amp;lt;&amp;#34;&lt;/span&gt; }
| Set-Content $File;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Deploying a Database Project does not create artefacts for custom schemas</title>
      <link>/post/2010-11-01-deploying-a-database-project-does-not-create-artefacts-for-custom-schemas/</link>
      <pubDate>Mon, 01 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-01-deploying-a-database-project-does-not-create-artefacts-for-custom-schemas/</guid>
      <description>
        
          &lt;p&gt;Last week we noticed that the artefacts for a custom schema in our Database Project were not created (or updated). It took us a while to figure out what was wrong. When you add a script via the &amp;lsquo;Add Existing item&amp;rsquo; menu in VS2010 the file&amp;rsquo;s &lt;strong&gt;Build Action&lt;/strong&gt; is set to &lt;strong&gt;Not in Build&lt;/strong&gt; for some unknown reason. As soon as we changed the value to &lt;strong&gt;Build&lt;/strong&gt; and Deployed again our artefacts were created.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Update all repositories with Powershell</title>
      <link>/post/2010-10-25-update-all-repositories-with-powershell/</link>
      <pubDate>Mon, 25 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-10-25-update-all-repositories-with-powershell/</guid>
      <description>
        
          &lt;p&gt;I typically store the repositories i am working on under D:\Code. Each morning i had to right click on each of those folders and select &amp;lsquo;SVN Update&amp;rsquo; using &lt;a href=&#34;http://tortoisesvn.tigris.org/&#34;&gt;Tortoise SVN&lt;/a&gt;. Today i decided there had to be a better way to accomplish this tedious task:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;dir d:\code | &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; { svn update $_.FullName }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And in case you really like tortoise, you can do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;dir c:\code | &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; { tortoiseproc /command&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;update /closeonend&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;1 /path&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;$($_.FullName) }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>WIF: whr parameter is a hint for user Home Realm</title>
      <link>/post/2010-09-07-wif-whr-parameter-is-a-hint-for-user-home-realm/</link>
      <pubDate>Tue, 07 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-09-07-wif-whr-parameter-is-a-hint-for-user-home-realm/</guid>
      <description>
        
          &lt;p&gt;Yesterday i was reading the &lt;a href=&#34;http://claimsid.codeplex.com/&#34;&gt;Claims Based Identity &amp;amp; Access Control Guide&lt;/a&gt; and learned that the whr parameter is a hint from the application to the STS about the user&amp;rsquo;s STS. So if i look back at the code in &lt;a href=&#34;http://www.timvw.be/wif-change-sts-per-request/&#34;&gt;WIF: Change STS per request&lt;/a&gt; i should not hardcode the HomeRealm parameter to timvw but use the company name instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetRedirectUrl(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; company, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; companySts, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; realm, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; returnUrl)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; signInRequestMessage = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SignInRequestMessage(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(companySts), realm)
	{
	Context = returnUrl,
	HomeRealm = company
	};

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; signInRequestMessage.WriteQueryString();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>WIF: Change STS per request</title>
      <link>/post/2010-09-05-wif-change-sts-per-request/</link>
      <pubDate>Sun, 05 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-09-05-wif-change-sts-per-request/</guid>
      <description>
        
          &lt;p&gt;Here is some code that will redirect unauthenticated users to their respective STS (Eg: A user visiting ~/CompanyA/Default.aspx will be asked to authenticate at the STS linked to CompanyA.&lt;/p&gt;
&lt;p&gt;Notice that in the enterprise you typically have multiple applications that require this kind of behavior, so you would solve this by establishing trust between your app(s) and your STS + establish trust between your STS and the client STSes.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Global&lt;/span&gt; : HttpApplication
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; wSFederationAuthenticationModule_RedirectingToIdentityProvider(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, RedirectingToIdentityProviderEventArgs e)
	{
		e.Cancel = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
		RedirectToCompanySts();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RedirectToCompanySts()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; httpContext = HttpContext.Current;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; rawUrl = httpContext.Request.RawUrl;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; returnUrl = rawUrl;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; companyName = ExtractCompanyName(rawUrl);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; companySts = GetCompanySts(companyName);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; realm = GetRealm(companyName);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; redirectUrl = GetRedirectUrl(companySts, realm, returnUrl);

		httpContext.Response.Redirect(redirectUrl, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
		httpContext.ApplicationInstance.CompleteRequest();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; ExtractCompanyName(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; rawUrl)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; regex = &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;~/(.\*?)/.\*&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; relativeUrl = VirtualPathUtility.ToAppRelative(rawUrl);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; match = Regex.Match(relativeUrl, regex);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; match.Success ? match.Groups[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].Value : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetCompanySts(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; companyName)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (companyName == &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CompanyA&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;http://localhost/STS2Site&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;http://localhost/STSSite&amp;#34;&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetRealm(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; companyName)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; realm = &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;http://localhost/RPSite/&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.IsNullOrEmpty(companyName)) realm += companyName +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; realm;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetRedirectUrl(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; companySts, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; realm, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; returnUrl)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; signInRequestMessage = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SignInRequestMessage(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(companySts), realm)
		{
			Context = returnUrl,
			HomeRealm = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timvw&amp;#34;&lt;/span&gt;
		};

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; signInRequestMessage.WriteQueryString();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>a little hint for writing and testing a script</title>
      <link>/post/2005-10-18-a-little-hint-for-writing-and-testing-a-script/</link>
      <pubDate>Tue, 18 Oct 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-10-18-a-little-hint-for-writing-and-testing-a-script/</guid>
      <description>
        
          &lt;p&gt;I noticed that most people think Vim sucks and they constantly perform the following keystrokes&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;:wq 
perl somefile.pl 
vim somefile.pl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the first trick, you do not need to exit vim to perform a command. Simply type the following while you are in vim&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;:!perl somefile.pl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Offcourse, you do not want to type the filename all the time, so you use the following&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;:!perl %
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, if you are using a different scripting language it might be more portable to make the file executable (chmod u+x) and make sure the &lt;a href=&#34;http://en.wikipedia.org/wiki/Shebang&#34;&gt;Shebang&lt;/a&gt; points to the right interpreter. Your script would be something like the following then&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Socket;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now all you have to do is type the following in vim and your script will be executed&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;:!%
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I noticed that the :!% trick does not work when your script is in your current working directory. This is how you can make it work&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;:!./%
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I also noticed that before you execute this command you always need to type :w to save the changes. To automate this i have added the following to my ~/.vimrc file&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;map ,r :w&amp;lt;cr&amp;gt;:!./%&amp;lt;/cr&amp;gt;&amp;lt;cr&amp;gt; 
&amp;lt;/cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now all i have to type is the following&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;,r  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For other tricks and hints you have to check out &lt;a href=&#34;http://www.vi-improved.org/tutorial.php&#34;&gt;Vi-IMproved.org&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
