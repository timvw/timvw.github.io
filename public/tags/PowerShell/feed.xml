<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PowerShell on Tim Van Wassenhove&#39;s blog</title>
    <link>/tags/PowerShell/</link>
    <description>Recent content in PowerShell on Tim Van Wassenhove&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Aug 2014 00:00:00 +0000</lastBuildDate><atom:link href="/tags/PowerShell/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploying a Cloud Service to Azure with Octopus</title>
      <link>/post/2014-08-15-deploying-a-cloud-service-to-azure-with-octopus/</link>
      <pubDate>Fri, 15 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-08-15-deploying-a-cloud-service-to-azure-with-octopus/</guid>
      <description>
        
          &lt;p&gt;Currently Octopus has limited support to deploy a Cloud Service on Azure. A typical use-case is that you need a different Web.Config file per environment. Simply add the Web.Environment.Config files to your NuGet package and use the following &lt;a href=&#34;https://gist.github.com/timvw/4e32226dd1ff149b5eab.js&#34;&gt;PreDeploy.ps1&lt;/a&gt; script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Load unzip support&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[Reflection.Assembly]&lt;/span&gt;::LoadWithPartialName(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System.IO.Compression.FileSystem&amp;#34;&lt;/span&gt;) | Out-Null
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Unzip($zipFile, $destination)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;If&lt;/span&gt; (Test-Path $destination){	  
		Remove-Item $destination -Recurse | Out-Null
	}
	  
	New-Item -ItemType directory -Force -Path $destination | Out-Null  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;[System.IO.Compression.ZipFile]&lt;/span&gt;::ExtractToDirectory($zipFile, $destination) | Out-Null
}

&lt;span style=&#34;color:#75715e&#34;&gt;# Unzip deployment package  &lt;/span&gt;
$CsPkg = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Customer.Project.Api.Azure.cspkg&amp;#34;&lt;/span&gt;
Unzip $CsPkg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurePackage&amp;#34;&lt;/span&gt;
Unzip (Get-Item (join-path -path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurePackage&amp;#34;&lt;/span&gt; -childPath &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.cssx&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Perform replacements, eg: replace Web.Config  &lt;/span&gt;
$ConfigFileToUse = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Web.&amp;#34;&lt;/span&gt; + $OctopusParameters[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Octopus.Environment.Name&amp;#34;&lt;/span&gt;] + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.config&amp;#34;&lt;/span&gt;
Copy-Item -Path $ConfigFileToUse -Destination &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website/sitesroot/0/Web.Config&amp;#34;&lt;/span&gt; -Force

&lt;span style=&#34;color:#75715e&#34;&gt;# Repackage  &lt;/span&gt;
$role = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Customer.Project.Api&amp;#34;&lt;/span&gt;
$contentPath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website\approot&amp;#34;&lt;/span&gt;
$rolePath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website/approot&amp;#34;&lt;/span&gt;
$webPath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website/sitesroot/0&amp;#34;&lt;/span&gt;
$cspackPath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Program Files\Microsoft SDKs\Windows Azure\.NET SDK\v2.2\bin\cspack.exe&amp;#34;&lt;/span&gt;
&amp;amp; $cspackPath &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ServiceDefinition.csdef&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/out:$CsPkg&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/role:$role;$rolePath;Customer.Project.Api.dll&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/sites:$role;Web;$webPath&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/sitePhysicalDirectories:$role;Web;$webPath&amp;#34;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Multiclean solution</title>
      <link>/post/2012-04-26-multiclean-solution/</link>
      <pubDate>Thu, 26 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-04-26-multiclean-solution/</guid>
      <description>
        
          &lt;p&gt;One of my favorite powershell commands when cleaning up:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$RootFolder = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\tfs&amp;#39;&lt;/span&gt;
Get-ChildItem $RootFolder bin -Recurse | Remove-Item -Recurse
Get-ChildItem $RootFolder obj -Recurse | Remove-Item -Recurse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Force the removal of a file with PowerShell</title>
      <link>/post/2011-10-18-force-the-removal-of-a-file-with-powershell/</link>
      <pubDate>Tue, 18 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-10-18-force-the-removal-of-a-file-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Last couple of weeks I have been generating a lot of files (and restricting their ACLs) and today I decided to remove all those files. The problem is that my user account did not have permissions on those files. Here is a small script that will first take ownership of the file, then grants FullControl permissions, and finally removes the file 🙂&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; RemoveFile 
{	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($FileName)
	
	&amp;amp;takeown /F $FileName
	$User = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Security.Principal.WindowsIdentity]&lt;/span&gt;::GetCurrent().User
	$Acl = Get-Acl $FileName	  
	$Acl.SetOwner($User)	  
	$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($User, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FullControl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;)	  
	$Acl.SetAccessRule($AccessRule)	  
	Set-Acl $FileName $Acl
	Remove-Item $FileName 
}

Get-ChildItem *.txt -R | % { RemoveFile $_.FullName; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Edit on 2011-10-19&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Resetting the permissions with icacls c:\output /reset /t and then calling Remove-Item c:\output -R does the trick.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; RemoveFiles 
{  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($Directory)

	icacls $Directory /reset /t 
	Remove-Item $Directory -R 
}

RemoveFiles c:\output;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Launch DtExec from PowerShell</title>
      <link>/post/2011-07-15-launch-dtexec-from-powershell/</link>
      <pubDate>Fri, 15 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-07-15-launch-dtexec-from-powershell/</guid>
      <description>
        
          &lt;p&gt;Running an SSIS package from PowerShell (using DTExec) can be as simple as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;RunPackage &lt;span style=&#34;color:#f92672&#34;&gt;-File&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\test.dtsx&amp;#39;&lt;/span&gt; -DatabaseHost &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; -DatabaseName &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TEST&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are the functions that make it this simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetDtExecPath {    
  $DtsPath = (Get-ItemProperty &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\100\DTS\Setup&amp;#39;&lt;/span&gt;).SQLPath;    
  $DtExecPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtsPath\Binn\DTExec.exe&amp;#34;&lt;/span&gt;);    
  $DtExecPath;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetDtExecPropertyPathValue() {      
  &lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;(
    $PropertyPath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
    $Value = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
  );

  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$PropertyPath;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$Value\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; RunPackage {
      
  &lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;(        
  $DtExecPath = (GetDtExecPath),       
  $File = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test.dtsx&amp;#39;&lt;/span&gt;  
  );

  $Params = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/FILE $File&amp;#34;&lt;/span&gt;;
   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;($i = 0; $i &lt;span style=&#34;color:#f92672&#34;&gt;-lt&lt;/span&gt; $Args.Length; $i += 2) {       
    $PropertyPath = $Args[$i].SubString(1);       
    $Value = $Args[$i+1];       
    $PropertyPathValue = GetDtExecPropertyPathValue -PropertyPath $PropertyPath -Value $Value;       
    $Params += &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; /SET $PropertyPathValue&amp;#34;&lt;/span&gt;;    
  } 

  &amp;amp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtExecPath&amp;#34;&lt;/span&gt; $Params;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Set variables in SSIS package at runtime</title>
      <link>/post/2011-05-19-set-variables-in-ssis-package-at-runtime/</link>
      <pubDate>Thu, 19 May 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-05-19-set-variables-in-ssis-package-at-runtime/</guid>
      <description>
        
          &lt;p&gt;The documentation on &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms162810.aspx&#34;&gt;dtexec Utility (SSIS Tool)&lt;/a&gt; says the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/Set propertyPath;value&lt;/p&gt;
&lt;p&gt;(Optional). Overrides the configuration of a variable, property, container, log provider, Foreach enumerator, or connection within a package. When this option is used, /Set changes the propertyPath argument to the value specified. Multiple /Set options can be specified.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At first sight this works like a charm but as soon as your value has a space dtexec seems to get confused 🙁 It took me a couple of websearches to find a &lt;a href=&#34;http://www.sqldev.org/sql-server-integration-services/escape-character-for-set-option-of-dtexec-34546.shtml&#34;&gt;post that suggests the following&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dtexec /SET \Package.Variables[User::TheVariable].Properties[Value];&#39;&#39;; space&#39;&#39;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It seems that this works like a charm 🙂 Because i am lazy i wrapped this in a powershell function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; PackageOption()
{	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($name, $value);
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$name;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$value\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now you can use it as following in your deployment script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$TheVariableOption = PackageOption -Name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\Package.Variables[User::TheVariable].Properties[Value]&amp;#34;&lt;/span&gt; -Value &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some thing&amp;#34;&lt;/span&gt;;
&amp;amp;dtexec /File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$package&amp;#34;&lt;/span&gt; /Set $TheVariableOption;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Invoke parameterized stored procedure with PowerShell</title>
      <link>/post/2011-03-21-invoke-parameterized-stored-procedure-with-powershell/</link>
      <pubDate>Mon, 21 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-21-invoke-parameterized-stored-procedure-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Here is a quick snippet that demonstrates how you can invoke a parametrized stored procedure with PowerShell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$CreateTraceCommand = $SqlConnection.CreateCommand();
$CreateTraceCommand.CommandType = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.CommandType]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StoredProcedure&amp;#34;&lt;/span&gt;;
$CreateTraceCommand.CommandText = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sp_trace_create&amp;#34;&lt;/span&gt;;
$TraceIdParameter = $CreateTraceCommand.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@traceid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.SqlDbType]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Int&amp;#34;&lt;/span&gt;);
$TraceIdParameter.Direction = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.ParameterDirection]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Output&amp;#34;&lt;/span&gt;;
$OptionParameter = $CreateTraceCommand.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@options&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.SqlDbType]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Int&amp;#34;&lt;/span&gt;);
$OptionParameter.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;[int]&lt;/span&gt; 2;
$TraceFileParameter = $CreateTraceCommand.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@tracefile&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.SqlDbType]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NVarChar&amp;#34;&lt;/span&gt;);
$TraceFileParameter.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c:\temp\test&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[void]&lt;/span&gt; $CreateTraceCommand.ExecuteNonQuery();

$TraceId = $TraceIdParameter.Value;
Write-Host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You created a trace with &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;``&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Dynamic scriptblock with PowerShell</title>
      <link>/post/2011-03-12-dynamic-scriptblock-with-powershell/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-12-dynamic-scriptblock-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Earlier this week i tried to run a command on a remote computer but it did not seem to work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tim&amp;#39;&lt;/span&gt;
$computer = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;
Invoke-Command -ComputerName $computer -ScriptBlock { Write-Host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello $name&amp;#34;&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because powershell serialises the { Write-Host &amp;ldquo;Hello $name&amp;rdquo; } as a string this ends up at the remote computer as { Write-Host &amp;ldquo;Hello $null&amp;rdquo; }. In order to send our &amp;ldquo;dynamic&amp;quot;command string over the wire we have to make sure it is serialised correctly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$scriptBlock = $executioncontext.InvokeCommand.NewScriptBlock(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Write-Host \&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Hello $name\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
Invoke-Command -ComputerName $computer -ScriptBlock $scriptBlock;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Some PowerShell functions to work with SSIS packages</title>
      <link>/post/2011-03-12-some-powershell-functions-to-work-with-ssis-packages/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-12-some-powershell-functions-to-work-with-ssis-packages/</guid>
      <description>
        
          &lt;p&gt;Here are some powershell functions (using XPath) that come in handy when working with SSIS packages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; FindConnectionManagerNames {	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($fileName)

	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $fileName);	  
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;	  
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);	  
	$xml.SelectNodes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:ConnectionManager/DTS:Property[@DTS:Name=&amp;#39;ObjectName&amp;#39;]&amp;#34;&lt;/span&gt;, $ns) | &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt; { $_.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#text&amp;#34;&lt;/span&gt;; }

}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetConnectionManagerConnectionString {  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($fileName, $connectionManagerName)

	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $fileName);
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);
	$path = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:ConnectionManager[DTS:Property=&amp;#39;$connectionManagerName&amp;#39;]/DTS:ObjectData/DTS:ConnectionManager/DTS:Property[@DTS:Name=&amp;#39;ConnectionString&amp;#39;]&amp;#34;&lt;/span&gt;
	$xml.SelectSingleNode($path, $ns).&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#text&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; FindVariables {	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($fileName)

	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $fileName);
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);
	$xml.SelectNodes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:Variable/DTS:Property[@DTS:Name=&amp;#39;ObjectName&amp;#39;]&amp;#34;&lt;/span&gt;, $ns) | &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt; { $_.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#text&amp;#34;&lt;/span&gt;; }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetVariable {	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($fileName, $variableName)

	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $fileName);
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);
	$xml.SelectSingleNode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:Variable[DTS:Property=&amp;#39;$variableName&amp;#39;]/DTS:VariableValue&amp;#34;&lt;/span&gt;, $ns).&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#text&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Consume custom SSIS tasks without GAC installation</title>
      <link>/post/2011-03-05-consume-custom-ssis-tasks-without-gac-installation/</link>
      <pubDate>Sat, 05 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-05-consume-custom-ssis-tasks-without-gac-installation/</guid>
      <description>
        
          &lt;p&gt;For a while i thought that in order to consume a custom SSIS task you had to install the assembly in the GAC. Now i know better 😉&lt;/p&gt;
&lt;p&gt;For the designer (BIDS) you have to copy the files to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\Program Files\Microsoft SQL Server\100\DTS\Tasks&lt;/li&gt;
&lt;li&gt;C:\Program Files\Microsoft SQL Server\100\DTS\PipelineComponents&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the runtime (BIDS) you have to copy the files to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE\PrivateAssemblies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And for dtexec you have to copy the files to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\Program Files\Microsoft SQL Server\100\DTS\Binn&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a small powershell script that gives you the paths where you want to copy your assembly to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Lookup Tasks, PipelineComponents and DtExec paths  &lt;/span&gt;
$DtsPath = (Get-ItemProperty &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\100\DTS\Setup&amp;#39;&lt;/span&gt;).SQLPath;
$DtsTasksPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtsPath\Tasks&amp;#34;&lt;/span&gt;);

$DtsPipelineComponentsPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtsPath\Pipelinecomponents&amp;#34;&lt;/span&gt;);
$DtExecPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtsPath\Binn&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Lookup VS2008/Bids path&lt;/span&gt;
$Vs2008Path = (Get-ItemProperty &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HKLM:\Software\Microsoft\VisualStudio\9.0&amp;#39;&lt;/span&gt;).InstallDir;
$Vs2008PrivateAssembliesPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$Vs2008Path\PrivateAssemblies&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Get current file in PowerShell</title>
      <link>/post/2011-01-24-get-current-file-in-powershell/</link>
      <pubDate>Mon, 24 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-01-24-get-current-file-in-powershell/</guid>
      <description>
        
          &lt;p&gt;A while ago i wrote a small script to take care of deployment. Configuring the source folders went as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;(  
  $BaseDir = (Get-Location).Path,  
  $WebDir = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$BaseDir\web&amp;#34;&lt;/span&gt;),  
  $DatabaseDir = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$BaseDir\database&amp;#34;&lt;/span&gt;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem with this code is that it only works when your current working directory is set to the location of this script. An administrator (or build system) invokes the script as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;PS C:\Users\Admin&amp;gt;&amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D:\Deployments\20110124\Deploy.ps1&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because we don&amp;rsquo;t want to annoy the consumer of our script with the burden of making sure he is in the correct directory we modified our code as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;(  
  $BaseDir = (Split-Path $MyInvocation.MyCommand.Definition),  
  $WebDir = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$BaseDir\web&amp;#34;&lt;/span&gt;),	  
  $DatabaseDir = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$BaseDir\database&amp;#34;&lt;/span&gt;)  
)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A quick win 🙂&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Polling the existence of a file with PowerShell</title>
      <link>/post/2011-01-24-polling-the-existence-of-a-file-with-powershell/</link>
      <pubDate>Mon, 24 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-01-24-polling-the-existence-of-a-file-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Sometimes you run into a situations where a given task spawns a separate thread and completes it&amp;rsquo;s work on that separate thread. Eg: sending a bit XMLA to SQL Server Analysis Services with Microsoft.AnalysisServices.Deployment.exe and then waiting for the processing to be completed. Anyway, here is a simple function that will wait untill a given file exists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; WaitForFile($File) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(!(Test-Path $File)) {    
    Start-Sleep -s 10;   
  }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Convert AAC/M4A files to MP3 with VLC and PowerShell</title>
      <link>/post/2010-11-20-convert-aacm4a-files-to-mp3-with-vlc-and-powershell/</link>
      <pubDate>Sat, 20 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-20-convert-aacm4a-files-to-mp3-with-vlc-and-powershell/</guid>
      <description>
        
          &lt;p&gt;Here is a way to convert your AAC/M4A files to MP3 using &lt;a href=&#34;http://www.videolan.org/vlc&#34;&gt;VLC&lt;/a&gt; media player:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;vlc.exe -I dummy old.m4a :sout=#transcode{acodec=$codec,vcodec=dummy}:standard{access=file,mux=raw,dst=new.mp3} vlc://quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s wrap this command in a bit of PowerShell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ConvertToMp3(&lt;span style=&#34;color:#66d9ef&#34;&gt;[switch]&lt;/span&gt; $inputObject, &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt; $vlc = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\Program Files\VideoLAN\VLC\vlc.exe&amp;#39;&lt;/span&gt;) {      
  &lt;span style=&#34;color:#66d9ef&#34;&gt;PROCESS&lt;/span&gt; {            
    $codec = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mp3&amp;#39;&lt;/span&gt;;        
    $oldFile = $_;

    $newFile = $oldFile.FullName.Replace($oldFile.Extension, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.$codec&amp;#34;&lt;/span&gt;);

    &amp;amp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$vlc&amp;#34;&lt;/span&gt; -I dummy &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$oldFile&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:sout=#transcode{acodec=$codec,vcodec=dummy}:standard{access=file,mux=raw,dst=\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$newFile\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#34;&lt;/span&gt; vlc&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//quit | out-null;

    &lt;span style=&#34;color:#75715e&#34;&gt;#Only remove source files when you are sure that the conversion works as you want          &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#Remove-Item $oldFile;&lt;/span&gt;
  }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can use this function for *all* m4a files in a given folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ConvertAllToMp3(&lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt; $sourcePath) {
  Get-ChildItem &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$sourcePath\*&amp;#34;&lt;/span&gt; -recurse -include *.m4a | ConvertToMp3;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the function is as easy as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;ConvertAllToMp3 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\Users\timvw\Music&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Configure Visual Studio 2010 environment in PowerShell</title>
      <link>/post/2010-11-17-configure-visual-studio-2010-environment-in-powershell/</link>
      <pubDate>Wed, 17 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-17-configure-visual-studio-2010-environment-in-powershell/</guid>
      <description>
        
          &lt;p&gt;Instead of using the &amp;ldquo;Visual Studo Command Prompt (2010)&amp;rdquo; i wanted to use PowerShell instead. I found &lt;a href=&#34;http://blogs.msdn.com/b/ploeh/archive/2008/04/09/visualstudio2008powershell.aspx&#34;&gt;this&lt;/a&gt; post which does it for VS2008. Extending it for VS2010 was pretty easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; SetVS2008()
{
	$vs90comntools = (Get-ChildItem env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;VS90COMNTOOLS).Value
	$batchFile = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.IO.Path]&lt;/span&gt;::Combine($vs90comntools, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vsvars32.bat&amp;#34;&lt;/span&gt;)
	Get-Batchfile $BatchFile
	&lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Console]&lt;/span&gt;::Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visual Studio 2008 Windows PowerShell&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; SetVS2010()
{
	$vs100comntools = (Get-ChildItem env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;VS100COMNTOOLS).Value
	$batchFile = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.IO.Path]&lt;/span&gt;::Combine($vs100comntools, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vsvars32.bat&amp;#34;&lt;/span&gt;)
	Get-Batchfile $BatchFile
	&lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Console]&lt;/span&gt;::Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visual Studio 2010 Windows PowerShell&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Get-Batchfile($file)
{
	$cmd = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$file\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;amp; set&amp;#34;&lt;/span&gt;
	cmd /c $cmd | &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt;-Object {
		$p, $v = $_.split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;)
		Set-Item -path env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;$p -value $v
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Load all script files at PowerShell startup</title>
      <link>/post/2010-11-17-load-all-script-files-at-powershell-startup/</link>
      <pubDate>Wed, 17 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-17-load-all-script-files-at-powershell-startup/</guid>
      <description>
        
          &lt;p&gt;These days i have quite some scripts files that i want to be loaded each time i launch PowerShell. &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb613488%28VS.85%29.aspx&#34;&gt;Windows PowerShell Profiles&lt;/a&gt; teaches me where i should store my $profile. Here is what it looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Lookup powershell scripts location&lt;/span&gt;
$UserProfile = (Get-ChildItem Env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;UserProfile).Value;
$ScriptFolder = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$UserProfile\My documents\WindowsPowerShell&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# Source all .ps1 files in PowerShell profile folder  &lt;/span&gt;
Get-ChildItem $ScriptFolder -name -include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*.ps1&amp;#39;&lt;/span&gt; -exclude &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;profile.ps1&amp;#39;&lt;/span&gt;   
| &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; { (. &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$ScriptFolder\$_&amp;#34;&lt;/span&gt;) };

&lt;span style=&#34;color:#75715e&#34;&gt;# Configure environment for VS2010  &lt;/span&gt;
SetVS2010;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Get variable value from variable with PowerShell</title>
      <link>/post/2010-11-11-get-variable-value-from-variable-with-powershell/</link>
      <pubDate>Thu, 11 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-11-get-variable-value-from-variable-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Sometimes you only know at runtime in which variable a certain value is stored. Let me clarify with an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$tim = 30;
$evy = 24;
$name = Read-Host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter your name&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In essence, if $name equals tim we want to use $tim and if $name equals evy we want to use $evy. This can be achieved with Get-Variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$age = Get-Variable $name -valueOnly;
Write-Host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your age is $age&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Update ConfigurationStrings in SSIS package with PowerShell</title>
      <link>/post/2010-11-11-update-configurationstrings-in-ssis-package-with-powershell/</link>
      <pubDate>Thu, 11 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-11-update-configurationstrings-in-ssis-package-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Here are some functions that allow you to update ConfigurationStrings in a SSIS package (dtsx) using PowerShell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; UpdateConfigurationStrings($file)
{
	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $file);
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);
	UpdateConfigurationNodes $xml $ns;
	Set-Content $file $xml.OuterXml;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; UpdateConfigurationNodes($xml, $ns)
{
	$selectConfigurationNodes = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:Configuration&amp;#34;&lt;/span&gt;;
	$xml.SelectNodes($selectConfigurationNodes, $ns) | &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; { UpdateConfigurationNode $_ $ns; };
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; UpdateConfigurationNode($configurationNode, $ns)
{
	$selectConfigurationString = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./DTS:Property[@DTS:Name=&amp;#39;ConfigurationString&amp;#39;]&amp;#34;&lt;/span&gt;;
	$configurationStringNode = $configurationNode.SelectSingleNode($selectConfigurationString, $ns);

	$oldConfigurationStringValue = $configurationStringNode.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#text&amp;#39;&lt;/span&gt;;
	$newConfigurationStringValue = GetNewConfigurationStringValue $oldConfigurationStringValue;
	$configurationStringNode.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#text&amp;#39;&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$newConfigurationStringValue&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetNewConfigurationStringValue($oldConfigurationStringValue)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;# implement some logic to determine new value&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new value&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Invoke PowerShell script from MSBuild</title>
      <link>/post/2010-11-07-invoke-powershell-script-from-msbuild/</link>
      <pubDate>Sun, 07 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-07-invoke-powershell-script-from-msbuild/</guid>
      <description>
        
          &lt;p&gt;Here is a small MSBuild target that allows you to invoke a PowerShell script, eg: powershell.exe &amp;amp; &amp;lsquo;script.ps1&amp;rsquo; -SomeParam &amp;lsquo;x&amp;rsquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;InvokePowerShell&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PowerShellCommand&amp;gt;&lt;/span&gt;&amp;#34;$(PowerShellTool)&amp;#34; &amp;#34;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&lt;/span&gt; &amp;#39;$(ScriptFile)&amp;#39; -SomeParam &amp;#39;$(SomeParam)&amp;#39; &amp;#34;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PowerShellCommand&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Exec&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Command=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(PowerShellCommand)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Modify a text file with PowerShell</title>
      <link>/post/2010-11-07-modify-a-text-file-with-powershell/</link>
      <pubDate>Sun, 07 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-07-modify-a-text-file-with-powershell/</guid>
      <description>
        
          &lt;p&gt;A while ago i wanted to update a connection string in a configuration file. My first attempt was the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Get-Content $File
| &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt; { $_ &lt;span style=&#34;color:#f92672&#34;&gt;-Replace&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Source&amp;gt;(.*?)&amp;lt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Source&amp;gt;$New&amp;lt;&amp;#34;&lt;/span&gt; }
| Set-Content $File;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running this scripts leads to the following error: &amp;ldquo;Set-Content : The process cannot access the file because it is being used by another process.&amp;rdquo; In order to avoid this you can complete the read operation before you start writing as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;(Get-Content $File)
| &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt; { $_ &lt;span style=&#34;color:#f92672&#34;&gt;-Replace&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Source&amp;gt;(.*?)&amp;lt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Source&amp;gt;$New&amp;lt;&amp;#34;&lt;/span&gt; }
| Set-Content $File;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Update all repositories with Powershell</title>
      <link>/post/2010-10-25-update-all-repositories-with-powershell/</link>
      <pubDate>Mon, 25 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-10-25-update-all-repositories-with-powershell/</guid>
      <description>
        
          &lt;p&gt;I typically store the repositories i am working on under D:\Code. Each morning i had to right click on each of those folders and select &amp;lsquo;SVN Update&amp;rsquo; using &lt;a href=&#34;http://tortoisesvn.tigris.org/&#34;&gt;Tortoise SVN&lt;/a&gt;. Today i decided there had to be a better way to accomplish this tedious task:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;dir d:\code | &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; { svn update $_.FullName }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And in case you really like tortoise, you can do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;dir c:\code | &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; { tortoiseproc /command&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;update /closeonend&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;1 /path&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;$($_.FullName) }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
  </channel>
</rss>
