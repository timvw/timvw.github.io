<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visual Studio on Tim Van Wassenhove&#39;s blog</title>
    <link>/tags/Visual-Studio/</link>
    <description>Recent content in Visual Studio on Tim Van Wassenhove&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Nov 2010 00:00:00 +0000</lastBuildDate><atom:link href="/tags/Visual-Studio/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configure Visual Studio 2010 environment in PowerShell</title>
      <link>/post/2010-11-17-configure-visual-studio-2010-environment-in-powershell/</link>
      <pubDate>Wed, 17 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-17-configure-visual-studio-2010-environment-in-powershell/</guid>
      <description>
        
          &lt;p&gt;Instead of using the &amp;ldquo;Visual Studo Command Prompt (2010)&amp;rdquo; i wanted to use PowerShell instead. I found &lt;a href=&#34;http://blogs.msdn.com/b/ploeh/archive/2008/04/09/visualstudio2008powershell.aspx&#34;&gt;this&lt;/a&gt; post which does it for VS2008. Extending it for VS2010 was pretty easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; SetVS2008()
{
	$vs90comntools = (Get-ChildItem env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;VS90COMNTOOLS).Value
	$batchFile = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.IO.Path]&lt;/span&gt;::Combine($vs90comntools, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vsvars32.bat&amp;#34;&lt;/span&gt;)
	Get-Batchfile $BatchFile
	&lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Console]&lt;/span&gt;::Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visual Studio 2008 Windows PowerShell&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; SetVS2010()
{
	$vs100comntools = (Get-ChildItem env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;VS100COMNTOOLS).Value
	$batchFile = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.IO.Path]&lt;/span&gt;::Combine($vs100comntools, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vsvars32.bat&amp;#34;&lt;/span&gt;)
	Get-Batchfile $BatchFile
	&lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Console]&lt;/span&gt;::Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visual Studio 2010 Windows PowerShell&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Get-Batchfile($file)
{
	$cmd = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$file\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;amp; set&amp;#34;&lt;/span&gt;
	cmd /c $cmd | &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt;-Object {
		$p, $v = $_.split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;)
		Set-Item -path env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;$p -value $v
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Build your solution with Visual Studio from MSBuild</title>
      <link>/post/2010-11-07-build-your-solution-with-visual-studio-from-msbuild/</link>
      <pubDate>Sun, 07 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-07-build-your-solution-with-visual-studio-from-msbuild/</guid>
      <description>
        
          &lt;p&gt;Unfortunately MSBuild and &lt;a href=&#34;http://bidshelper.codeplex.com/&#34;&gt;BIDS Helper&lt;/a&gt; are not able to build an .asdatabase from our Analysis Services project (.dwproj). Here is a task which invokes Visual Studio to build such a solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DevEnvBuild&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Error&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;$(SolutionFile)&amp;#39;==&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Missing SolutionFile&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;DevEnvTool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;$(DevEnvTool)&amp;#39;==&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;C:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE\devenv.exe&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/DevEnvTool&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;DevEnvSwitch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;$(DevEnvSwitch)&amp;#39;==&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Build&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/DevEnvSwitch&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;DevEnvBuildCommand&amp;gt;&lt;/span&gt;&amp;#34;$(DevEnvTool)&amp;#34; &amp;#34;$(SolutionFile)&amp;#34; /$(DevEnvSwitch)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/DevEnvBuildCommand&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Exec&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Command=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(DevEnvBuildCommand)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>What i dislike about the Web.config Transformation in VS2010</title>
      <link>/post/2010-08-25-what-i-dislike-about-the-web-config-transformation-in-vs2010/</link>
      <pubDate>Wed, 25 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-08-25-what-i-dislike-about-the-web-config-transformation-in-vs2010/</guid>
      <description>
        
          &lt;p&gt;There are a couple of things that i strongly dislike about the &lt;a href=&#34;http://blogs.msdn.com/b/webdevtools/archive/2009/05/04/web-deployment-web-config-transformation.aspx&#34;&gt;Web.config transformation in VS2010&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only works with XML files (eg: Can&amp;rsquo;t be used to generate a release notes.txt file)&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;Does not seem to support externalized sections, eg: log4net.config in a separate file&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;No support to copy/paste transform files&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Only works when Visual Studio 2010 is installed (And i am still not convinced a build server should have this).&lt;/li&gt;
&lt;li&gt;Ties environment to build configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lesson learned: Don&amp;rsquo;t trust your co-workers, always double-check!&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Having multiple transformations is easy-peasy, just invoke the TransformXml task for all your config files and make sure your transformation files are correct. For log4net this would look like&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;log4net&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:xdt=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.microsoft.com/XML-Document-Transform&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;root&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;level&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xdt:Transform=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Replace&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/log4net&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The support for copy/paste can be achieved by removing the DependentUpon tag in your proj file (At the cost that you do not have the + sign in solution explorer which &amp;lsquo;hides&amp;rsquo; the transforms files)&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Add &amp;quot;Run as administrator&amp;quot; to .sln files</title>
      <link>/post/2010-01-09-add-run-as-administrator-to-sln-files/</link>
      <pubDate>Sat, 09 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-01-09-add-run-as-administrator-to-sln-files/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://www.howtogeek.com/howto/windows-vista/add-run-as-administrator-to-any-file-type-in-windows-vista/&#34;&gt;Another trick&lt;/a&gt; i learned from the &amp;ldquo;How-To Geek&amp;rdquo; is how to add a &amp;ldquo;Run as administrator&amp;rdquo; option in the windows shell for .sln files which makes life considerably easier 😉&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/AddRunAsAdministratorToSlnFilesInShell.reg.txt&#34;&gt;AddRunAsAdministratorToSlnFilesInShell.reg.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/AddRunAsAdministratorAsDefaultToSlnFilesInShell.reg.txt&#34;&gt;AddRunAsAdministratorAsDefaultToSlnFilesInShell.reg.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>MSTEST tip: Add &#34;Full Class Name&#34; column to results view</title>
      <link>/post/2009-10-08-mstest-tip-add-full-class-name-column-to-results-view/</link>
      <pubDate>Thu, 08 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-08-mstest-tip-add-full-class-name-column-to-results-view/</guid>
      <description>
        
          &lt;p&gt;I firmly believe that adding the &amp;lsquo;Full Class Name&amp;rsquo; column to MSTEST&amp;rsquo;s result view makes it a lot easier to clarify the requirements:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/mstest-result-enhanced.png&#34; alt=&#34;screenshot of mstest result view with full class name column added&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>About the design of a fluent interface</title>
      <link>/post/2009-08-17-about-the-design-of-a-fluent-interface/</link>
      <pubDate>Mon, 17 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-08-17-about-the-design-of-a-fluent-interface/</guid>
      <description>
        
          &lt;p&gt;Now that i have &lt;a href=&#34;&#34;&gt;presented a simple ControlStateMachine&lt;/a&gt; i can raise the bar a little. A statemachine that handles commands. Here is how a developer should be able to initialize this machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;sut.WhenIn(States.Loading)
.On(Commands.Next)
.Do(() =&amp;gt; Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;got next command while loading...&amp;#34;&lt;/span&gt;))
.Do(() =&amp;gt; Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doing it again...&amp;#34;&lt;/span&gt;))
.On(Commands.Previous)
.Do(() =&amp;gt; Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;got previous command while loading...&amp;#34;&lt;/span&gt;));

sut.WhenIn(States.Ready)
.On(Commands.Previous)
.Do(() =&amp;gt; Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;got previous command while ready...&amp;#34;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So how should we define our methods to accomplish this initialization style? Let&amp;rsquo;s begin with identifying the methods we need.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WhenIn(TSTate state)&lt;/li&gt;
&lt;li&gt;On(TCommand command)&lt;/li&gt;
&lt;li&gt;Do(Action action)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next thing to do is analyze in which sequence these methods can be called:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;th style=&amp;quot;width: 100px&amp;quot;&amp;gt;
  WhenIn
&amp;lt;/th&amp;gt;

&amp;lt;th style=&amp;quot;width: 100px&amp;quot;&amp;gt;
  On
&amp;lt;/th&amp;gt;

&amp;lt;th style=&amp;quot;width: 100px&amp;quot;&amp;gt;
  Do
&amp;lt;/th&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  X
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  X
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  X
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  X
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Ok, now that we have clarified the requirements a little we can start working on a solution. Let&amp;rsquo;s start with defining an interface for each of the methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IChooseState&amp;lt;tstate, TCommand&amp;gt; { Q1 WhenIn(TState state); }
&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IChooseCommand&amp;lt;tstate, TCommand&amp;gt; { Q2 On(TCommand command); }
&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IChooseAction&amp;lt;tstate, TCommand&amp;gt; { Q3 Do(Action action); }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From WhenIn we need to be able to call On. Thus Q1 = IChooseCommand&amp;lt;TState, TCommand&amp;gt;. Q2 is also easily solved because from On we only have to be able to call Do, thus Q2 = IChooseAction&amp;lt;TState, TCommand&amp;gt;.&lt;/p&gt;
&lt;p&gt;From Do we should be able to call both On and Do. We can do that by defining another interface which has both methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IChooseCommandAndAction&amp;lt;tstate, TCommand&amp;gt; : IChooseCommand&amp;lt;tstate, TCommand&amp;gt;, IChooseAction&amp;lt;tstate, TCommand&amp;gt; { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have found answers for Q1, Q2 and Q3 we can define the API for initializing our StateMachine as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;IChooseCommand&amp;lt;tstate, TCommand&amp;gt; WhenIn(TState state);
IChooseAction&amp;lt;tstate, TCommand&amp;gt; On(TCommand command);
IChooseCommandAndAction&amp;lt;tstate, TCommand&amp;gt; Do(Action action);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now tell me about your strategy for implementing a fluent interface!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>VS2010: Unable to insert a breakpoint by clicking next to the line number</title>
      <link>/post/2009-06-16-vs2010-unable-to-insert-a-breakpoint-by-clicking-next-to-the-line-number/</link>
      <pubDate>Tue, 16 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-06-16-vs2010-unable-to-insert-a-breakpoint-by-clicking-next-to-the-line-number/</guid>
      <description>
        
          &lt;p&gt;For some reason i was &lt;a href=&#34;https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=464203&#34;&gt;unable to insert a breakpoint by clicking next to the line number&lt;/a&gt; in VS2010. Anyway, here is the trick that made the problem disappear for me: Go to &amp;ldquo;Tools &amp;gt; Import and export settings&amp;hellip; &amp;quot; and choose &amp;ldquo;Reset all settings&amp;rdquo;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Another reason for not using mstest</title>
      <link>/post/2009-03-14-another-reason-for-not-using-mstest/</link>
      <pubDate>Sat, 14 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-03-14-another-reason-for-not-using-mstest/</guid>
      <description>
        
          &lt;p&gt;As you can read in &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms182172(VS.80).aspx&#34;&gt;CA1001&lt;/a&gt;: Types that own disposable fields should be disposable. Pretty solid advice, but for some reason the mstest runner does not dispose of classes that implement IDisposable. A possible workaround is to apply a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.testcleanupattribute(VS.80).aspx&#34;&gt;TestCleanupAttribute&lt;/a&gt; to the Dispose method, but this is really contradictory with the &amp;ldquo;Shared test fixture&amp;rdquo; approach mstest uses. Imho, there is only one clean solution: use a decent testing framework instead.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting MyTestRunner</title>
      <link>/post/2008-12-24-presenting-mytestrunner/</link>
      <pubDate>Wed, 24 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-12-24-presenting-mytestrunner/</guid>
      <description>
        
          &lt;p&gt;Here are a couple of reasons why i dislike the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms243147(VS.80).aspx&#34;&gt;Unit Testing Framework&lt;/a&gt; that comes with &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/fda2bad5(VS.80).aspx&#34;&gt;Visual Studio Team System&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not all versions of Visual Studio are capable of running the tests.&lt;/li&gt;
&lt;li&gt;Test inheritance is not supported.&lt;/li&gt;
&lt;li&gt;Running tests via mstest.exe is slow.&lt;/li&gt;
&lt;li&gt;Visual Studio creating tens of .vmsdi files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are already a couple of better frameworks out there, and currently &lt;a href=&#34;http://mbunit.com/&#34;&gt;MbUnit&lt;/a&gt; is my favorite one, certainly in combination with &lt;a href=&#34;http://www.testdriven.net/&#34;&gt;TestDriven.NET&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have created a custom implementation of the Microsoft.VisualStudio.QualityTools.UnitTestingFramework assembly. Actually, the assembly only has a couple of Attributes for the moment but contributions are always welcome 😉&lt;/p&gt;
&lt;p&gt;In order to achieve better performance i decided to implement a custom test runner. Currently &lt;a href=&#34;http://www.gallio.org/&#34;&gt;Gallio&lt;/a&gt; uses mstest.exe but there might be a day that i decide to write a plugin so that mytestrunner can be used instead.&lt;/p&gt;
&lt;p&gt;I was inspired by &lt;a href=&#34;http://docs.mbunit.com/help/html/MbUnitAndVisualStudio/CreatingSelfTestingAssemblies.htm&#34;&gt;Creating Self-testing Assemblies&lt;/a&gt; and decided to use that approach but for some odd reason visual studio insists on running unit tests although the assembly is a console application 🙁 Anyway, i can still invoke mytestrunner via the external tools as following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/mytestrunner-external-tools.gif&#34; alt=&#34;screenshot of external tools dialog&#34;&gt;&lt;/p&gt;
&lt;p&gt;The source code is available at &lt;a href=&#34;http://code.google.com/p/mytestrunner/&#34;&gt;http://code.google.com/p/mytestrunner/&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Revisited the int and string ValueObject templates</title>
      <link>/post/2008-10-13-revisited-the-int-and-string-valueobject-templates/</link>
      <pubDate>Mon, 13 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-10-13-revisited-the-int-and-string-valueobject-templates/</guid>
      <description>
        
          &lt;p&gt;After reading &lt;a href=&#34;http://blogs.msdn.com/bclteam/archive/2008/10/06/the-compare-contract-kim-hamilton.aspx&#34;&gt;The Compare Contract&lt;/a&gt; last week i realized that my &lt;a href=&#34;http://www.timvw.be/presenting-templates-for-int-and-string-valueobjects&#34;&gt;templates for int and string ValueObjects&lt;/a&gt; did not comply with the contract so i decided to add a unittest that reproduces the faulty behavior (and then corrected the implementation)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestMethod]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldReturnPositiveWhenComparedWithNull()
{
	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;classname&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;classname&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;);
	Assert.IsTrue(&lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;.CompareTo(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Anyway, feel free to download the corrected &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/IntValueObject.zip&#34;&gt;IntValueObject&lt;/a&gt; and &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/StringValueObject.zip&#34;&gt;StringValueObject&lt;/a&gt; templates.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting templates for int and string ValueObjects</title>
      <link>/post/2008-09-26-presenting-templates-for-int-and-string-valueobjects/</link>
      <pubDate>Fri, 26 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-26-presenting-templates-for-int-and-string-valueobjects/</guid>
      <description>
        
          &lt;p&gt;Most &lt;a href=&#34;http://domaindrivendesign.org/discussion/messageboardarchive/ValueObjects.html&#34;&gt;ValueObjects&lt;/a&gt; that i have implemented were wrappers around an int or a string. Apart from the domain specific rules, there is a lot of repetitive work in implementing operator overloads, IEquatable&lt;!-- raw HTML omitted --&gt;, IComparable&lt;!-- raw HTML omitted --&gt;, &amp;hellip; Thus i decided to create a couple of Item templates that generate this code (and related tests).&lt;/p&gt;
&lt;p&gt;Simply save &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/IntValueObject.zip&#34;&gt;IntValueObject.zip&lt;/a&gt; and &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/StringValueObject.zip&#34;&gt;StringValueObject.zip&lt;/a&gt; under %My Documents%\Visual Studio 2005\Templates\ItemTemplates and click on &amp;ldquo;Add New Item&amp;rdquo; in your project:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/template_add_new_item.gif&#34; alt=&#34;screenshot of add new item dialog in visual studio&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add the bottom of the dialog you can choose one of the templates:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/template_my_templates.gif&#34; alt=&#34;screenshot of add new item dialog in visual studio&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is the result of adding an &lt;a href=&#34;http://en.wikipedia.org/wiki/International_Standard_Book_Number&#34;&gt;International Standard Book Number&lt;/a&gt; class:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/template_isbn.gif&#34; alt=&#34;screenshot of generated artificates for isbn&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Visual Studio 2008 (SP1) crashes when opening ViewPage in designer</title>
      <link>/post/2008-09-16-visual-studio-2008-sp1-crashes-when-opening-viewpage-in-designer/</link>
      <pubDate>Tue, 16 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-16-visual-studio-2008-sp1-crashes-when-opening-viewpage-in-designer/</guid>
      <description>
        
          &lt;p&gt;Visual Studio 2008 (SP1) crashed every time i tried to open a ViewPage with the Web Form Editor (designer). Kudos go to eniac who &lt;a href=&#34;http://haacked.com/archive/2008/09/05/mvcfutures-and-asp.net-mvc-beta.aspx&#34;&gt;suggested&lt;/a&gt; the removal of the &lt;a href=&#34;http://code.msdn.microsoft.com/PowerCommands&#34;&gt;Power Commands&lt;/a&gt; add-in. This made the crashes disappear.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Error loading testrunconfig: Failed to instantiate type Microsoft.VisualStudio.TestTools.WebStress.WebTestRunConfig</title>
      <link>/post/2008-07-26-error-loading-testrunconfig-failed-to-instantiate-type-microsoftvisualstudiotesttoolswebstresswebtestrunconfig/</link>
      <pubDate>Sat, 26 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-07-26-error-loading-testrunconfig-failed-to-instantiate-type-microsoftvisualstudiotesttoolswebstresswebtestrunconfig/</guid>
      <description>
        
          &lt;p&gt;Earlier this week i ran into the following exception when opening a solution: &amp;ldquo;Error loading TestRunConfig1.testrunconfig: Failed to instantiate type Microsoft.VisualStudio.TestTools.WebStress.WebTestRunConfig&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/testrunconfig_notexpectedformat.gif&#34; alt=&#34;screenshot of testrunconfig not expected format dialog box&#34;&gt;&lt;/p&gt;
&lt;p&gt;Apparently (&lt;a href=&#34;http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=228438&amp;amp;SiteID=1&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=425717&amp;amp;SiteID=1&#34;&gt;here&lt;/a&gt;) the VS2005 Developer edition is missing a couple of libraries that the VS2005 Tester edition adds to the testrunconfig. If your tests don&amp;rsquo;t depend on these, the simplest way to solve this problem is to remove all the values nodes, and their childnodes, where the type is defined in the Microsoft.VisualStudio.QualityTools.LoadTest, Microsoft.VisualStudio.QualityTools.WebTest and Microsoft.VisualStudio.QualityTools.LoadTest.WebStress assemblies.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Easily switching between configuration files with MSBuild</title>
      <link>/post/2008-03-22-easily-switching-between-configuration-files-with-msbuild/</link>
      <pubDate>Sat, 22 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-03-22-easily-switching-between-configuration-files-with-msbuild/</guid>
      <description>
        
          &lt;p&gt;A couple of days ago i wrote about &lt;a href=&#34;http://www.timvw.be/easily-switching-between-appconfig-files-with-msbuild/&#34;&gt;Easily switching between App.Config files with MSBuild&lt;/a&gt;. Christophe Gijbels, a fellow &lt;a href=&#34;http://www.compuware.be/root/Careers/index.asp&#34;&gt;compuwarrior&lt;/a&gt;, pointed out that developers usually need to copy more than a single App.Config file&amp;hellip; I would propose to add a Folder for each Customer that contains all the specific configuration files. Eg&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/customerconfigurations.gif&#34; alt=&#34;screenshot of solution explorer with proposed folder structures&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now i have to configure MSBuild so that the right files are copied into the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/bb629394.aspx&#34;&gt;OutDir&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Define the CustomerPath depending on the choosen Configuration --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;propertyGroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $(Configuration) == &amp;#39;Customer1 Debug&amp;#39; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;customerPath&amp;gt;&lt;/span&gt;Customer1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/customerPath&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/propertyGroup&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;propertyGroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $(Configuration) == &amp;#39;Customer2 Debug&amp;#39; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;customerPath&amp;gt;&lt;/span&gt;Customer2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/customerPath&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/propertyGroup&amp;gt;&lt;/span&gt; 

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Define AppConfig in the CustomerPath  --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;propertyGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;appConfig&amp;gt;&lt;/span&gt;$(CustomerPath)\App.config&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/appConfig&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/propertyGroup&amp;gt;&lt;/span&gt; 

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Find all files in CustomerPath, excluding AppConfig --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;itemGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;customerFiles&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(CustomerPath)\*.*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exclude=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(CustomerPath)\App.config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/itemGroup&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AfterBuild&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;copy&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SourceFiles=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@(CustomerFiles)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DestinationFolder=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(OutDir)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SkipUnchangedFiles=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Why doesn&#39;t Visual Studio display my MSBuild message texts?</title>
      <link>/post/2008-03-22-why-doesnt-visual-studio-display-my-msbuild-message-texts/</link>
      <pubDate>Sat, 22 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-03-22-why-doesnt-visual-studio-display-my-msbuild-message-texts/</guid>
      <description>
        
          &lt;p&gt;In order to debug an &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/wea2sca5.aspx&#34;&gt;MSBuild&lt;/a&gt; script i added a couple of &lt;!-- raw HTML omitted --&gt; tasks, but when i asked Visual Studio to Build i didn&amp;rsquo;t get to see the output&amp;hellip; By default Visual Studio will use &amp;ldquo;Minimal&amp;rdquo; as &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/ms164311.aspx&#34;&gt;verbosity&lt;/a&gt; level. You can change this via Tools -&amp;gt; Options -&amp;gt; Projects and Solutions -&amp;gt; Build and Run.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/msbuildverbosity.gif&#34; alt=&#34;screenshot of configuration dialog in visual studio that allows the user to set the verbosity of msbuild&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Easily switching between App.Config files with MSBuild</title>
      <link>/post/2008-03-17-easily-switching-between-appconfig-files-with-msbuild/</link>
      <pubDate>Mon, 17 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-03-17-easily-switching-between-appconfig-files-with-msbuild/</guid>
      <description>
        
          &lt;p&gt;Imagine the following situation: One codebase, two customers with different &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/kkz9kefa(VS.80).aspx&#34;&gt;Application Configuration files&lt;/a&gt;. How can we easily switch between the different configurations? By taking advantage of the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/kkz9kefa(VS.80).aspx&#34;&gt;Build Configurations&lt;/a&gt; functionality in Visual Studio we can easily switch between different configurations&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/vsconfigurationmanager.gif&#34; alt=&#34;screenshot of the configuration manager in visual studio&#34;&gt;&lt;/p&gt;
&lt;p&gt;A brute-force solution would be to add a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/42x5kfw4(VS.80).aspx&#34;&gt;Post-build Event&lt;/a&gt; that copies the desired App.Config file to the destination directory. In the Microsoft.Common.targets file (usually at C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727) around line 725 you can read how &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/wea2sca5.aspx&#34;&gt;MSBuild&lt;/a&gt; chooses the App.Config that is copied to the destination folder&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Choose exactly one app.config to be the main app.config that is copied to the destination folder.&lt;br&gt;
The search order is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose the value $(AppConfig) set in the main project.&lt;/li&gt;
&lt;li&gt;Choose @(None) App.Config in the same folder as the project.&lt;/li&gt;
&lt;li&gt;Choose @(Content) App.Config in the same folder as the project.&lt;/li&gt;
&lt;li&gt;Choose @(None) App.Config in any subfolder in the project.&lt;/li&gt;
&lt;li&gt;Choose @(Content) App.Config in any subfolder in the project.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus, simply setting $(AppConfig) should be enough to make sure that MSBuild chooses the appropriate App.Config file. Here is an example of a csproj section that defines $(AppConfig) as App.Customer1.Config or App.Customer2.Config depending on the choosen Build configuration&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;propertyGroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#39;$(Configuration)|$(Platform)&amp;#39; == &amp;#39;Debug Customer1|AnyCPU&amp;#39; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;debugSymbols&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/debugSymbols&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;debugType&amp;gt;&lt;/span&gt;full&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/debugType&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;optimize&amp;gt;&lt;/span&gt;false&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/optimize&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;outputPath&amp;gt;&lt;/span&gt;bin\Debug\&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/outputPath&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;defineConstants&amp;gt;&lt;/span&gt;DEBUG;TRACE&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/defineConstants&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;errorReport&amp;gt;&lt;/span&gt;prompt&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/errorReport&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;warningLevel&amp;gt;&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/warningLevel&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;appConfig&amp;gt;&lt;/span&gt;App.Customer1.Config&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/appConfig&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/propertyGroup&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;propertyGroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#39;$(Configuration)|$(Platform)&amp;#39; == &amp;#39;Debug Customer2|AnyCPU&amp;#39; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;debugSymbols&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/debugSymbols&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;outputPath&amp;gt;&lt;/span&gt;bin\Debug Customer2\&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/outputPath&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;defineConstants&amp;gt;&lt;/span&gt;DEBUG;TRACE&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/defineConstants&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;debugType&amp;gt;&lt;/span&gt;full&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/debugType&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;platformTarget&amp;gt;&lt;/span&gt;AnyCPU&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/platformTarget&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;codeAnalysisUseTypeNameInSuppression&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/codeAnalysisUseTypeNameInSuppression&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;codeAnalysisModuleSuppressionsFile&amp;gt;&lt;/span&gt;GlobalSuppressions.cs&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/codeAnalysisModuleSuppressionsFile&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;errorReport&amp;gt;&lt;/span&gt;prompt&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/errorReport&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;appConfig&amp;gt;&lt;/span&gt;App.Customer2.Config&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/appConfig&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/propertyGroup&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Bending the code generation of IExtenderProvider to your will</title>
      <link>/post/2007-08-21-bending-the-code-generation-of-iextenderprovider-to-your-will/</link>
      <pubDate>Tue, 21 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-21-bending-the-code-generation-of-iextenderprovider-to-your-will/</guid>
      <description>
        
          &lt;p&gt;In &lt;a href=&#34;http://www.timvw.be/exploring-codedomserializer/&#34;&gt;Exploring CodeDomSerializer&lt;/a&gt; i already explained how we can modify the code that the Visual Studio designer generates for us. With a typical &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.iextenderprovider.aspx&#34;&gt;IExtenderProvider&lt;/a&gt; the designer generates an initializer, SetXXX methods and a variable declaration, which looks like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.constantsExtenderProvider1 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WindowsApplication1.ConstantsExtenderProvider();

&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.constantsExtenderProvider1.SetConstants(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.button1, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] {
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Operation1&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Operation5&amp;#34;&lt;/span&gt;});

&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.constantsExtenderProvider1.SetConstants(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ConstantsExtenderProvider constantsExtenderProvider1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, what if we&amp;rsquo;re not happy with those generated SetXXX methods on each Component? The problem is that this code is not generated by the serializer for the ConstantsExtenderProvider but by the serializers for the Components. An easy workaround for this problem is to set the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.designerserializationvisibilityattribute.aspx&#34;&gt;DesignerSerializationVisibilityAttribute&lt;/a&gt; on the GetXXX method in our IExtenderProvider to &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.designerserializationvisibility.aspx&#34;&gt;Hidden&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With those ugly SetXXX methods out of the way it&amp;rsquo;s up to us to do it better. We do this by implementing a custom serializer for our ConstantsExtenderProvider&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConstantsSerializer&lt;/span&gt;&amp;lt;T&amp;gt; : CodeDomSerializer
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; Serialize(IDesignerSerializationManager manager, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
	{
		ConstantsExtenderProvider provider = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ConstantsExtenderProvider;

		CodeDomSerializer baseClassSerializer = manager.GetSerializer(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(ConstantsExtenderProvider).BaseType, &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(CodeDomSerializer)) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CodeDomSerializer;
		CodeStatementCollection statements = baseClassSerializer.Serialize(manager, &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CodeStatementCollection;

		IDesignerHost host = (IDesignerHost)manager.GetService(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(IDesignerHost));
		ComponentCollection components = host.Container.Components;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.SerializeExtender(manager, provider, components, statements);

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; statements;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SerializeExtender(IDesignerSerializationManager manager, ConstantsExtenderProvider provider, ComponentCollection components, CodeStatementCollection statements)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (IComponent component &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; components)
		{
			Control control = component &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Control;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (control != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; (control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Form == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;))
			{
				CodeMethodInvokeExpression methodcall = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeMethodInvokeExpression(&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.SerializeToExpression(manager, provider), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SetConstants&amp;#34;&lt;/span&gt;);
				methodcall.Parameters.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeFieldReferenceExpression(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeThisReferenceExpression(), control.Name));

				&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] constants = provider.GetConstants(control);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (constants != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
				{
					StringBuilder sb = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuilder();
					sb.Append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new string[] { &amp;#34;&lt;/span&gt;);

					&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; constant &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; constants)
					{
						sb.Append(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T).FullName);
						sb.Append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;);
						sb.Append(constant);
						sb.Append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;);
					}

					sb.Remove(sb.Length -- &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
					sb.Append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; }&amp;#34;&lt;/span&gt;);

					methodcall.Parameters.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeSnippetExpression(sb.ToString()));
				}
				&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
				{
					methodcall.Parameters.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodePrimitiveExpression(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;));
				}

				statements.Add(methodcall);
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now the generated code looks like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.constantsExtenderProvider1.SetConstants(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.button1, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { WindowsApplication1.Constants.Operation1, WindowsApplication1.Constants.Operation5 });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As always, feel free to download the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ConstantsExtenderProvider.zip&#34;&gt;ConstantsExtenderProvider&lt;/a&gt; source.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Debugging custom UITypeEditors</title>
      <link>/post/2007-08-10-debugging-custom-uitypeeditors/</link>
      <pubDate>Fri, 10 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-10-debugging-custom-uitypeeditors/</guid>
      <description>
        
          &lt;p&gt;If you read this you&amp;rsquo;re probably gonna think: What a moron! Anyway, i&amp;rsquo;m sharing this in the hope that i&amp;rsquo;ll be the last to undergo the following. In order to test my custom &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.drawing.design.uitypeeditor.aspx&#34;&gt;UITypeEditor&lt;/a&gt; i did the following&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.usercontrol.aspx&#34;&gt;UserControl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add a property to the control&lt;/li&gt;
&lt;li&gt;Add an &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.editorattribute.aspx&#34;&gt;Editor&lt;/a&gt; attribute to the property&lt;/li&gt;
&lt;li&gt;Build&lt;/li&gt;
&lt;li&gt;Drag a UserControl on the designer form&lt;/li&gt;
&lt;li&gt;Test via Visual Studio&amp;rsquo;s Property Window if the UITypeEditor works as expected&lt;/li&gt;
&lt;li&gt;Everytime i changed some code: &lt;strong&gt;Restart Visual Studio&lt;/strong&gt;, load the project and repeat 6.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A tedious task to say the least. Yesterday i figured out that i could &lt;strong&gt;drag a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.propertygrid.aspx&#34;&gt;PropertyGrid&lt;/a&gt; on the designer form, and set it&amp;rsquo;s SelectedObject property to a class with a property that uses the custom UITypeEditor; Instead of having to reload visual studio i can simply start a debug session, and click on the property in the PropertyGrid.&lt;/strong&gt; Now it&amp;rsquo;s a breeze to develop custom UITypeEditors.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/uitypeeditor.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_Load(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// display an instance of PersonEntry,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// a class with a property that should use the custom UITypeEditor i want to test
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.propertyGrid1.SelectedObject = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonEntry(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tim&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Van Wassenhove&amp;#34;&lt;/span&gt;));
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonEntry&lt;/span&gt;
{
	...

	&lt;span style=&#34;color:#75715e&#34;&gt;// instruct the PropertyGrid to use my custom PersonUITypeEditor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[Editor(typeof(PersonUITypeEditor), typeof(UITypeEditor))]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person Person
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.person; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.person = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonUITypeEditor&lt;/span&gt; : UITypeEditor
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; UITypeEditorEditStyle.Modal;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; EditValue(ITypeDescriptorContext context, IServiceProvider provider, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
	{
		Person person = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Person;

		IWindowsFormsEditorService svc = context.GetService(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(IWindowsFormsEditorService)) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; IWindowsFormsEditorService;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (svc != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (PersonEditorForm personEditorForm = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonEditorForm(person))
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (svc.ShowDialog(personEditorForm) == DialogResult.OK)
				{
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; personEditorForm.Person;
				}
			}
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Inserting pause to your Console Applications</title>
      <link>/post/2006-08-05-inserting-pause-to-your-console-applications/</link>
      <pubDate>Sat, 05 Aug 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-08-05-inserting-pause-to-your-console-applications/</guid>
      <description>
        
          &lt;p&gt;When i write Console Applications i find myself to write the following two lines quite often&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine);
Console.ReadKey();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you already know i&amp;rsquo;m lazy so i decided to write an &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/ms165392.aspx&#34;&gt;IntelliSense Code Snippet&lt;/a&gt;. When i type &amp;ldquo;pau&amp;rdquo; Intellisense show the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/intellisense-drop-down-list.jpg&#34; alt=&#34;Intellisense drop down list&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next i hit the tab button twice and i get the following effect:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/intellisense-code-snippet.jpg&#34; alt=&#34;Intellisense code snippet&#34;&gt;&lt;/p&gt;
&lt;p&gt;Download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/pause.txt&#34;&gt;pause.txt&lt;/a&gt; and save it as Pause.snippet in your %My DocumentS\Visual Studio 2005\Code Snippets\Visual C#\My Code Snippets% folder.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve made it even simpler, you can install the snippet by simply running the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/pause.vsi&#34;&gt;pause.vsi&lt;/a&gt; package (Visual Studio Installer).&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Silly bug in Visual Studio 2005 editor</title>
      <link>/post/2006-03-29-silly-bug-in-visual-studio-2005-editor/</link>
      <pubDate>Wed, 29 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-03-29-silly-bug-in-visual-studio-2005-editor/</guid>
      <description>
        
          &lt;p&gt;If you try to compile the code below you will see that the i in the second loop is not defined in my main function. Position your mouse over the i, click right and choose &amp;ldquo;Go To Definition&amp;rdquo; in the context menu. Why does the cursor move to the i in the struct? Btw, if you remove the first for loop this doesn&amp;rsquo;t happen.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdafx.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
} BLAH;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_tmain&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, _TCHAR&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; argv[]) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) { ; } 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) { ; } 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
  </channel>
</rss>
