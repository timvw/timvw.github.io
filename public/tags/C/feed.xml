<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Tim Van Wassenhove&#39;s blog</title>
    <link>/tags/C/</link>
    <description>Recent content in C on Tim Van Wassenhove&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Jul 2014 00:00:00 +0000</lastBuildDate><atom:link href="/tags/C/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cute sort implementation</title>
      <link>/post/2014-07-28-cute-sort-implementation/</link>
      <pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-07-28-cute-sort-implementation/</guid>
      <description>
        
          &lt;p&gt;For years I had been implementing my &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/tfakywbh(v=vs.110).aspx&#34;&gt;sort functions&lt;/a&gt; as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;(x,y) =&amp;gt; {  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x.PartName == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; y.PartName == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x.PartName == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y.PartName == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x.PartName.CompareTo(y.PartName);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Earlier today I found the following cute variant while browsing through the &lt;a href=&#34;https://github.com/ServiceStack/ServiceStack/blob/v3/src/ServiceStack/WebHost.Endpoints/Utils/FilterAttributeCache.cs&#34;&gt;ServiceStack&lt;/a&gt; codebase:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;(x,y) =&amp;gt; x.Priority - y.Priority  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Add missing books to iTunes</title>
      <link>/post/2012-05-20-add-missing-books-to-itunes/</link>
      <pubDate>Sun, 20 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-05-20-add-missing-books-to-itunes/</guid>
      <description>
        
          &lt;p&gt;These days i read most books on my ipad. The problem is that iTunes does not seem to add pdf files when i choose &amp;lsquo;Add Folder&amp;rsquo; to the library. So here is a small application that adds them one by one (way too lazy/unmotivated to do this by hand).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/2759128&#34;&gt;https://gist.github.com/2759128&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Remove all access rules from a directory</title>
      <link>/post/2011-09-22-remove-all-access-rules-from-a-directory/</link>
      <pubDate>Thu, 22 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-09-22-remove-all-access-rules-from-a-directory/</guid>
      <description>
        
          &lt;p&gt;A while ago i needed to write some code that removes all (existing/inherited) access rules from a given directory. It was pretty frustrating to notice that all my attempts seemed to fail (&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.security.accesscontrol.commonobjectsecurity.removeaccessrule.aspx&#34;&gt;RemoveAccessRule&lt;/a&gt;, &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.security.accesscontrol.objectsecurity.purgeaccessrules.aspx&#34;&gt;PurgeAccessRule&lt;/a&gt;, &amp;hellip;)&lt;/p&gt;
&lt;p&gt;Finally i found that &lt;a href=&#34;&#34;&gt;SetAccessRuleProtection&lt;/a&gt; was the method that i needed to invoke.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Folder = &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;c:\temp\secured&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; directory = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryInfo(Folder);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; directorySecurity = directory.GetAccessControl();
directorySecurity.SetAccessRuleProtection(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
directory.SetAccessControl(directorySecurity);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;There you go ðŸ˜‰&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>SqlConnectionStringBuilder sets the Pooling property to true by default</title>
      <link>/post/2011-08-18-sqlconnectionstringbuilder-sets-the-pooling-property-to-true-by-default/</link>
      <pubDate>Thu, 18 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-08-18-sqlconnectionstringbuilder-sets-the-pooling-property-to-true-by-default/</guid>
      <description>
        
          &lt;p&gt;Here is something that surprised me: SqlConnectionStringBuilder sets the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlconnectionstringbuilder.pooling.aspx&#34;&gt;Pooling&lt;/a&gt; property to true by default.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>TryGetResult</title>
      <link>/post/2011-08-01-trygetresult/</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-08-01-trygetresult/</guid>
      <description>
        
          &lt;p&gt;I think this entry has been in the pipeline for a couple of years now and today i have decided to finally post it ðŸ˜‰ I got frustrated with the annoying out parameter in TryGet methods so i decided to use a different signature using TryGetResult:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryGetResult&lt;/span&gt;&amp;lt;T&amp;gt; 
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TryGetResult()   
  {   
    Success = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;  
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TryGetResult(T result)  
  {   
    Success = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; 
    Result = result;  
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Success { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; T Result { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now your TryGet methods can have the following signature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TryGetResult&amp;lt;Person&amp;gt; TryGetPersonByName(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name) 
{   
  &lt;span style=&#34;color:#75715e&#34;&gt;// person is not available  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(name.IsInvalidPersonName()) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TryGetResult();

  &lt;span style=&#34;color:#75715e&#34;&gt;// return the person
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TryGetResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(name));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Using User-Defined Table Type with Identity column in ADO.NET</title>
      <link>/post/2011-07-13-using-user-defined-table-type-with-identity-column-in-ado-net/</link>
      <pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-07-13-using-user-defined-table-type-with-identity-column-in-ado-net/</guid>
      <description>
        
          &lt;p&gt;A while ago i wanted to use a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb522526.aspx&#34;&gt;User-Defined Table Type&lt;/a&gt; to pass in a set of records. Nothing special about this except that the first column of the UDTT was an Identity column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TYPE&lt;/span&gt; [Star].[example] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt;(  
  [Ordinal] [int] &lt;span style=&#34;color:#66d9ef&#34;&gt;IDENTITY&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,  
  [Name] [nvarchar](&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After finding a lot of posts saying that this is not supported a colleague of mine, &lt;a href=&#34;http://stevehorsfield.wordpress.com/&#34;&gt;Stephen Horsfield&lt;/a&gt;, found a way to do it as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; sqlMetaData = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;[] 
{  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlMetaData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ordinal&amp;#34;&lt;/span&gt;, SqlDbType.Int, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, SortOrder.Unspecified, -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlMetaData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;, SqlDbType.NVarChar, &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;)
};

sqlRecords = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashSet&amp;lt;SqlDataRecord&amp;gt;(usersToInclude.Select(user =&amp;gt;
{   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; record = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlDataRecord(sqlMetaData);   
  record.SetString(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, user.Name);   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; record; 
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Get/SetVariable value from SSIS VariableDispenser</title>
      <link>/post/2011-03-08-getsetvariable-value-from-ssis-variabledispenser/</link>
      <pubDate>Tue, 08 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-08-getsetvariable-value-from-ssis-variabledispenser/</guid>
      <description>
        
          &lt;p&gt;Here is some code that allows you to Get/Set a variable (object) value from/on the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/microsoft.sqlserver.dts.runtime.variabledispenser.aspx&#34;&gt;VariableDispenser&lt;/a&gt; in an SSIS package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; T GetVariable&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; VariableDispenser variableDispenser, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; scopedVariableName)
{
  Variables variables = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
  {
    variableDispenser.LockForRead(scopedVariableName);
    variableDispenser.GetVariables(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; variables);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (T)variables[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].Value;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (variables != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) variables.Unlock();
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetVariable&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; VariableDispenser variableDispenser, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; scopedVariableName, T &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
{
  Variables variables = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;   
  {  
    variableDispenser.LockForWrite(scopedVariableName);  
    variableDispenser.GetVariables(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; variables);  
    variables[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;  
  }  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;  
  {   
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (variables != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) variables.Unlock();  
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Exploring messaging at lower levels...</title>
      <link>/post/2011-02-26-exploring-messaging-at-lower-levels/</link>
      <pubDate>Sat, 26 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-02-26-exploring-messaging-at-lower-levels/</guid>
      <description>
        
          &lt;p&gt;Yesterday a colleague of mine, &lt;a href=&#34;http://neildoesdotnet.blogspot.com/&#34;&gt;Neil Robbins&lt;/a&gt;, asked me how a piece of code would look like if I apply the Hollywood principle on it (Don&amp;rsquo;t call us, we&amp;rsquo;ll cal you).&lt;/p&gt;
&lt;p&gt;Let me start with setting the scene: The purpose of the code is to provide items via provider and to consume those items via a consumer.&lt;/p&gt;
&lt;p&gt;Here is how my oldskool function signatures would look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemProviderFactory&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ItemProvider Create() { .. } 
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemProvider&lt;/span&gt; {   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IEnumerable&amp;lt;Item&amp;gt; Provide() { .. } 
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemConsumerFactory&lt;/span&gt; { 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ItemConsumer Create() { .. }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemConsumer&lt;/span&gt; { 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Consume(IEnumerable&amp;lt;Item&amp;gt; items) { .. }
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My Hollywood style function signatures look like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemProviderFactory&lt;/span&gt; { 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; WithItemProvider(Action&amp;lt;ItemProvider&amp;gt; action) { .. } 
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemProvider&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Provide(Action&amp;lt;IEnumerable&amp;lt;Item&amp;gt;&amp;gt; action) { .. }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemConsumerFactory&lt;/span&gt; { 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; WithItemConsumer(Action&amp;lt;ItemConsumer&amp;gt; action) { .. }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemConsumer&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Consume(IEnumerable&amp;lt;Item&amp;gt; items) { .. }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now I am able compare the code that glues everything together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OldStyle(OldStyle.ItemProviderFactory itemProviderFactory, OldStyle.ItemConsumerFactory itemConsumerFactory) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; provider = itemProviderFactory.Create();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; items = provider.Provide();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; consumer = itemConsumerFactory.Create(); 
  consumer.Consume(items); 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;  
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; HollywoodStyle(HollywoodStyle.ItemProviderFactory itemProviderFactory, HollywoodStyle.ItemConsumerFactory itemConsumerFactory) {  
  itemProviderFactory.With(provider =&amp;gt; 
    provider.Provide(items =&amp;gt; itemConsumerFactory.With(consumer =&amp;gt; 
      consumer.Consume(items))));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let me refactor this Hollywood code a bit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// An itemconsumer consumes items as following:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Action&amp;lt;HollywoodStyle.ItemConsumer, IEnumerable&amp;lt;Item&amp;gt;&amp;gt; consumerAction = (consumer, items) =&amp;gt; consumer.Consume(items);

&lt;span style=&#34;color:#75715e&#34;&gt;// As soon as I have items, I want a consumer to consume them:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Action&amp;lt;IEnumerable&amp;lt;Item&amp;gt;&amp;gt; itemsAction = (items) =&amp;gt; itemConsumerFactory.With(consumer =&amp;gt; consumerAction(consumer, items));

&lt;span style=&#34;color:#75715e&#34;&gt;// I can get items as following:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Action&amp;lt;HollywoodStyle.ItemProvider&amp;gt; providerAction = (provider) =&amp;gt; provider.Provide(itemsAction);

&lt;span style=&#34;color:#75715e&#34;&gt;// I can get an ItemProvider as following:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;itemProviderFactory.With(providerAction);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I think that most colleagues are quite thankful that i am not a Hollywood star ðŸ˜‰&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>A TetriNet Spectator bot that generates game statistics</title>
      <link>/post/2002-09-05-a-tetrinet-spectator-bot-that-generates-game-statistics/</link>
      <pubDate>Thu, 05 Sep 2002 00:00:00 +0000</pubDate>
      
      <guid>/post/2002-09-05-a-tetrinet-spectator-bot-that-generates-game-statistics/</guid>
      <description>
        
          &lt;p&gt;Get the TetriNet Spectator bot that generates game statistics: &lt;a href=&#34;http://www.timvw.be/wp-content/code/c/statsbot.zip&#34;&gt;statsbot.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Dump a MySQL database into a TetriNet winlist</title>
      <link>/post/2002-07-29-dump-a-mysql-database-into-a-tetrinet-winlist/</link>
      <pubDate>Mon, 29 Jul 2002 00:00:00 +0000</pubDate>
      
      <guid>/post/2002-07-29-dump-a-mysql-database-into-a-tetrinet-winlist/</guid>
      <description>
        
          &lt;p&gt;Code: &lt;a href=&#34;/wp-content/code/c/database2winlist.txt&#34;&gt;c/database2winlist.txt&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Write a TetriNet winlist to a MySQL database</title>
      <link>/post/2001-05-05-write-a-tetrinet-winlist-to-a-mysql-database/</link>
      <pubDate>Sat, 05 May 2001 00:00:00 +0000</pubDate>
      
      <guid>/post/2001-05-05-write-a-tetrinet-winlist-to-a-mysql-database/</guid>
      <description>
        
          &lt;p&gt;Code: &lt;a href=&#34;/wp-content/code/c/winlist2database.txt&#34;&gt;c/winlist2database.txt&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
