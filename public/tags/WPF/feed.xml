<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WPF on Tim Van Wassenhove&#39;s blog</title>
    <link>/tags/WPF/</link>
    <description>Recent content in WPF on Tim Van Wassenhove&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Nov 2009 00:00:00 +0000</lastBuildDate><atom:link href="/tags/WPF/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Couple of methods missing on ObservableCollection</title>
      <link>/post/2009-11-06-couple-of-methods-missing-on-observablecollection/</link>
      <pubDate>Fri, 06 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-11-06-couple-of-methods-missing-on-observablecollection/</guid>
      <description>
        
          &lt;p&gt;Here are a couple of methods that are missing on &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms668604.aspx&#34;&gt;ObservableCollection&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ObservableCollectionExtensions&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AddRange&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; ObservableCollection&amp;lt;T&amp;gt; observableCollection, IEnumerable&amp;lt;T&amp;gt; elements)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; element &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; elements) observableCollection.Add(element);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ObservableCollection&amp;lt;T&amp;gt; Create&amp;lt;T&amp;gt;(IEnumerable&amp;lt;T&amp;gt; elements)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; observableCollection = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ObservableCollection&amp;lt;T&amp;gt;();
		observableCollection.AddRange(elements);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; observableCollection;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Exploring graphical programming with Blend, Visual State Manager and Behaviors</title>
      <link>/post/2009-10-16-exploring-graphical-programming-with-blend-visual-state-manager-and-behaviors/</link>
      <pubDate>Fri, 16 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-16-exploring-graphical-programming-with-blend-visual-state-manager-and-behaviors/</guid>
      <description>
        
          &lt;p&gt;A while ago i presented the &lt;a href=&#34;http://www.timvw.be/experimenting-with-controlstatemachine-and-fluent-interfaces/&#34;&gt;ControlStateMachine&lt;/a&gt; and in Silverlight this concept is implemented as the &lt;a href=&#34;http://windowsclient.net/wpf/wpf35/wpf-35sp1-toolkit-visual-state-manager-overview.aspx&#34;&gt;Visual State Manager&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my sokoban implementation i have a cellview which exists out of 6 canvasses but only two of them (one for the cell type and one for the piece type) are visible at any given point in time. I have implemented this with 6 properties CanvasXVisible (with X being Player, Box, Wall, Goal, Floor and Cell) in my ViewModel but a State Machine / Manager may help clarify how the visibility of the canvasses are related. Here are the 2 visual state groups and their states that i would need for the CellView&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/cellview-vsm.png&#34; alt=&#34;screenshot of visual state manager in expression blend&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see there is quite a lof of XAML involved to make the correct canvas visible:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;visualState&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x:Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Space1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;storyboard&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;objectAnimationUsingKeyFrames&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BeginTime=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;00:00:00&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Duration=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;00:00:00.0010000&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#a6e22e&#34;&gt;Storyboard.TargetName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Space&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Storyboard.TargetProperty=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(UIElement.Visibility)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;discreteObjectKeyFrame&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyTime=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;00:00:00&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;discreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;visibility&amp;gt;&lt;/span&gt;Visible&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/visibility&amp;gt;&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/discreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/discreteObjectKeyFrame&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/objectAnimationUsingKeyFrames&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/storyboard&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/visualState&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For a simple modification to the Visibility property this seems like overkill but in many situations you will want to change more than this one property.&lt;/p&gt;
&lt;p&gt;With the aid of the behaviors that come with Blend i can quickly add a couple of radio buttons, toss in some gotostate actions and end up with an interactive application:&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;radioButton&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;63&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Canvas.Left=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Canvas.Top=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;172&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Content=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wall&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GroupName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PieceTypes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;i:Interaction.Triggers&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;i:EventTrigger&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EventName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Checked&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ic:GoToStateAction&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StateName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wall1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/i:EventTrigger&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/i:Interaction.Triggers&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/radioButton&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to try it yourself by changing the radio buttons&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exploringVSM&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data:application/x-silverlight-2,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/x-silverlight-2&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;300&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;240&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.timvw.be/ClientBin/ExploringVSM.xap&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onError&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onSilverlightError&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;background&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;minRuntimeVersion&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3.0.40624.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;autoUpgrade&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://go.microsoft.com/fwlink/?LinkID=149156&amp;amp;#038;v=3.0.40624.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-decoration:none&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://go.microsoft.com/fwlink/?LinkId=108181&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alt=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get Microsoft Silverlight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;border-style:none&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_sl_historyFrame&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;visibility:hidden;height:0px;width:0px;border:0px&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Conclusion: All in all it is relatively easy to create interactive applications using Blend without writing a single line of code.
Too bad that the behaviors are in an Expression assembly and don&amp;rsquo;t come with standard Silverlight.
Another attention point is the maintainability of this new style of programming.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>About databinding and composite views</title>
      <link>/post/2009-10-13-about-databinding-and-composite-views/</link>
      <pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-13-about-databinding-and-composite-views/</guid>
      <description>
        
          &lt;p&gt;A couple of days ago i had a databound ItemsControl (collection of Model.Cell) which instantiated sub views (with their own viewmodel).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;grid&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;grid.Resources&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dataTemplate&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x:Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CellTemplate&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;views:CellView&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dataTemplate&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/grid.Resources&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;itemsControl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemTemplate=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{StaticResource CellTemplate}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemsSource=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{Binding Cells}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/grid&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because each CellViewModel needs to know which cell they manage i used the following dirty hack&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CellView()
{
	Loaded += CellView_Loaded;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; CellView_Loaded(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, RoutedEventArgs e)
{
	DataContext = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CellViewModel(DataContext);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Later on that day i realised there was a much cleaner solution: Let the BoardViewModel expose a collection of ViewModels.CellViewModel instead of Model.Cell. What a relief that i don&amp;rsquo;t have to use the Loaded event hack.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring M-V-VM</title>
      <link>/post/2009-10-13-exploring-m-v-vm/</link>
      <pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-13-exploring-m-v-vm/</guid>
      <description>
        
          &lt;p&gt;A couple of years ago a collegue recommended &lt;a href=&#34;http://www.amazon.com/Data-Binding-Windows-Forms-2-0/dp/032126892X&#34;&gt;Data Binding with Windows Forms 2.0: Programming Smart Client Data Applications with .NET&lt;/a&gt; and i noticed that my code started to gravitate towards an &lt;a href=&#34;http://en.wikipedia.org/wiki/Model_View_ViewModel&#34;&gt;Model-View-ViewModel&lt;/a&gt; architecture. Due to shortcomings and painful experiences i gave up on databinding and began to use &lt;a href=&#34;http://martinfowler.com/eaaDev/PassiveScreen.html&#34;&gt;Passieve View&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;Passive View doesn&amp;rsquo;t work (well) with smart views so i decided to give M-V-VM another because i really wanted to leverage WPF&amp;rsquo;s rich support for databinding.&lt;/p&gt;
&lt;p&gt;The key difference between M-V-VM and Passive View is, imho, the fact that the ViewModel is unaware of the View unlike Passive View where the Presenter knows about the (simple) View.&lt;/p&gt;
&lt;p&gt;When we test a Presenter i notice that we end up writing interaction based tests (assertions on a mocked view) and when we test a ViewModel we end up writing state-based tests instead.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>ViewModel to translate domain messages to view events</title>
      <link>/post/2009-10-13-viewmodel-to-translate-domain-messages-to-view-events/</link>
      <pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-13-viewmodel-to-translate-domain-messages-to-view-events/</guid>
      <description>
        
          &lt;p&gt;Here is an example of a ViewModel that translates domain messages to view events:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GameViewModel&lt;/span&gt; : INotifyPropertyChanged, IListener&amp;lt;boardChanged&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged = &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { };

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; GameViewModel()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; messageBus = ServiceLocator.MessageBus;
		messageBus.Subscribe&amp;lt;boardChanged&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; IListener&amp;lt;boardChanged&amp;gt;.Handle(BoardChanged message)
	{
		PropertyChanged(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Board&amp;#34;&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Sokoban: Creating graphics with Expression Design</title>
      <link>/post/2009-10-12-sokoban-creating-graphics-with-expression-design/</link>
      <pubDate>Mon, 12 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-12-sokoban-creating-graphics-with-expression-design/</guid>
      <description>
        
          &lt;p&gt;Earlier this morning i decided to improve the graphics the little. I launched Expression Design, created a new image, and drew each possible cell and piece in a seperate layer. With this technique i can easily preview how a &amp;ldquo;Box&amp;rdquo; on &amp;ldquo;Goal&amp;rdquo; looks like.&lt;/p&gt;
&lt;p&gt;For each layer i simply copied the XAML from Expression Design into my Cell.xaml file. Apparently all the layers are interpreted as a Canvas and the layer name determines their x:Name which makes it pretty easy to make the correct canvasses visible. With a simple ScaleTransform i can ensure that the canvasses are sized correctly.&lt;/p&gt;
&lt;p&gt;Here is the updated version of Sokoban:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;

        
      </description>
    </item>
    
    <item>
      <title>Silverlight wishlist</title>
      <link>/post/2009-10-10-silverlight-wishlist/</link>
      <pubDate>Sat, 10 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-10-silverlight-wishlist/</guid>
      <description>
        
          &lt;p&gt;Here are the features that i would love to see in Silverlight:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allow users to copy text from the UI (Or was the UX argument an excuse for playing with new toys?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MSTEST (I know that [Here are the features that i would love to see in Silverlight:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow users to copy text from the UI (Or was the UX argument an excuse for playing with new toys?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MSTEST (I know that](&lt;a href=&#34;http://code.msdn.microsoft.com/silverlightut/&#34;&gt;http://code.msdn.microsoft.com/silverlightut/&lt;/a&gt;) exists.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Triggers (including data triggers)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Typed data templates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uniform XAML (WPF: &amp;lt;Style TargetType={x:Type local:Foo}/&amp;gt; vs Silverlight: &lt;!-- raw HTML omitted --&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uniform validation API (eg: Data Annotations has three flavors)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XAML with less namespaces (doesn&amp;rsquo;t really matter if you&amp;rsquo;re a designer only type)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for Desktop (&amp;lsquo;regular&amp;rsquo;) .NET assemblies. As long as Desktop .NET assemblies are not supported, tools that automate the process of generating a &amp;lsquo;shadow&amp;rsquo; .Silverlight project (eg: Prism has for each project a silverlight project that, ignoring the different assembly references, exists out of file references to the orginal project).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UniformGrid&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: This list is not exhaustive and may change in the future.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>About Expression Blend</title>
      <link>/post/2009-10-05-about-expression-blend/</link>
      <pubDate>Mon, 05 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-05-about-expression-blend/</guid>
      <description>
        
          &lt;p&gt;At first i developed most WPF interfaces by writing XAML in the code view of Visual Studio. Those days are gone 😉 These days i find it a lot easier to use Expression Blend (eg: paths, animations and timelines) but i reallly don&amp;rsquo;t like it that Blend adds design-time information to the XAML that is intended to be used in production code. A tool should not add clutter to your code!&lt;/p&gt;
&lt;p&gt;I also dislike the fact that Blend adds values for Width and Height to each element by default. This requires me to hit that &amp;lsquo;auto&amp;rsquo; square in the properties window for each element. What a waste of time 🙁&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
