<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Tim Van Wassenhove&#39;s blog</title>
    <link>/tags/C&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Tim Van Wassenhove&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Apr 2006 00:00:00 +0000</lastBuildDate><atom:link href="/tags/C++/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using .Net assemblies in your WIN32 application</title>
      <link>/post/2006-04-22-using-net-assemblies-in-your-win32-application/</link>
      <pubDate>Sat, 22 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-04-22-using-net-assemblies-in-your-win32-application/</guid>
      <description>
        
          &lt;p&gt;Imagine that you&amp;rsquo;ve got an extensive codebase using WIN32/MFC and don&amp;rsquo;t want to give that up but on the other hand you&amp;rsquo;d like to take advantage of DOTNET classes then here&amp;rsquo;s a simple solution: First we write an Interface and an Implementation with C# as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IQuoteClient {
	String getQuote();
	Boolean setQuote(String quote);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;QuoteClient&lt;/span&gt; : IQuoteClient {
	&lt;span style=&#34;color:#75715e&#34;&gt;// COM requires a parameterless constructor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; QuoteClient() { ; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; getQuote() { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; String.Format&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quote&amp;#34;&lt;/span&gt;;}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; setQuote(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; quote) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go the project Properties and check the &amp;ldquo;Make assembly COM-Visible&amp;rdquo; box which you find in the Application tab, Assembly Information. Then you go to the Build tab and check &amp;ldquo;Register for COM interop&amp;rdquo; box and at the Signing tab you check the &amp;ldquo;Sign the assembly&amp;rdquo; box and assign a key. Build the project.&lt;/p&gt;
&lt;p&gt;Now we have to extract a typelibrary, register the typelibrary and install it in the global assembly cache. Open a Visual Studio 2005 Command Prompt and go to your project\bin\Debug directory. Type the following commands&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tlbexp QuoteClient.dll
regasm QuoteClient.dll /tlb:QuoteClient.tlb
gacutil /i QuoteClient.dll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can import the classes in this assembly from your WIN32 application as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#import &amp;#34;C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\mscorlib.tlb&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#import &amp;#34;D:\projects\Test\QuoteClient\bin\Debug\ClientLibrary.tlb&amp;#34; no_namespace named_guids
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And you can use them just like any other COM component&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;CoInitialize(NULL);

IQuoteClient &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;qc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
HRESULT hr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CoCreateInstance(
	CLSID_QuoteClient,
	NULL,
	CLSCTX_INPROC_SERVER,
	IID_IQuoteClient,
	&lt;span style=&#34;color:#66d9ef&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;qc)
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (SUCCEEDED(hr)) {
	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quote: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; qc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;getQuote() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; qc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Release();
	qc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
}

CoUninitialize();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>More marshalling...</title>
      <link>/post/2006-03-01-more-marshalling/</link>
      <pubDate>Wed, 01 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-03-01-more-marshalling/</guid>
      <description>
        
          &lt;p&gt;This snippet uses &lt;a href=&#34;http://windowssdk.msdn.microsoft.com/library/default.asp?url=/library/en-us/sysinfo/base/getprivateprofilestring.asp&#34;&gt;GetPrivateProfileString&lt;/a&gt; that is available in kernel32.dll. Apparently microsoft has decided to remove this useful function from the dotnet api.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;[DllImport(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kernel32&amp;#34;&lt;/span&gt;, SetLastError&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetPrivateProfileString(
String &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;pSection,
String &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;pKey,
String &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;pDefault,
StringBuilder &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;pValue,
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pBufferLen,
String &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;pFile
);

StringBuilder &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcnew StringBuilder(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;);
GetPrivateProfileString(
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;logsection&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;,
buf,
buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Capacity,
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.ini&amp;#34;&lt;/span&gt;
);

std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_log&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; string(
(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) Marshal&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StringToHGlobalAnsi(logf).ToPointer()
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Reading unmanaged structs with .NET</title>
      <link>/post/2006-02-27-reading-unmanaged-structs-with-net/</link>
      <pubDate>Mon, 27 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-02-27-reading-unmanaged-structs-with-net/</guid>
      <description>
        
          &lt;p&gt;Last week i&amp;rsquo;ve spend a lot of time studying &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemRuntimeInteropServices.asp&#34;&gt;System::Runtime::InteropServices&lt;/a&gt;. It took me a while to figure out how i could read unmanaged structs with .NET &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemio.asp&#34;&gt;System::IO&lt;/a&gt;. Here is a bit of sample code (Should be obvious enough to write a template or generic class for all sorts of structs, just like i did at the office)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; name[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; name;
&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; sterr;
} TEST;

FileStream &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcnew FileStream(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;TEST.DAT&amp;#34;&lt;/span&gt;, FileMode&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Open, FileAccess&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ReadWrite);
BinaryReader &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcnew BinaryReader(f);
array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;byte&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ReadBytes(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(TEST));
TEST test;
Marshal&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Copy(buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (IntPtr) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;test, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(TEST));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Preparing for my internship</title>
      <link>/post/2006-02-11-preparing-for-my-internship/</link>
      <pubDate>Sat, 11 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-02-11-preparing-for-my-internship/</guid>
      <description>
        
          &lt;p&gt;Only two more days before my internship starts. I&amp;rsquo;m a bit nervous and excited to dive into this adventure. Today i decided to fresh my knowledge of (MS)-C++ a bit up. I&amp;rsquo;ve read a tutorial on &lt;a href=&#34;http://www.newty.de/fpt/index.html&#34;&gt;function pointers&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vccore98/html/_core_argument_passing_and_naming_conventions.asp&#34;&gt;naming conventions&lt;/a&gt;. A couple of weeks ago i already had a look at &lt;a href=&#34;http://linuxquality.sunsite.dk/articles/memberpointers/&#34;&gt;pointers to member functions&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;customcallback&lt;/span&gt;() {
	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;running custom callback&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; 
} 
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;method)(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;); 
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b; } 
method &lt;span style=&#34;color:#a6e22e&#34;&gt;dosum&lt;/span&gt;() { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;sum; } 

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() { 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;plugin)() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL; 
	plugin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;customcallback; 
	plugin(); 
	method mymethod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dosum(); 
	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; mymethod(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>A Unix daemon</title>
      <link>/post/2004-06-25-a-unix-daemon/</link>
      <pubDate>Fri, 25 Jun 2004 00:00:00 +0000</pubDate>
      
      <guid>/post/2004-06-25-a-unix-daemon/</guid>
      <description>
        
          &lt;p&gt;Today i&amp;rsquo;ve written a daemon that communicates with the &lt;a href=&#34;http://www.netsize.com&#34;&gt;Netsize SMS Gateway&lt;/a&gt;. The &lt;a href=&#34;http://www.timvw.be/wp-content/code/cpp/daemon.zip&#34;&gt;daemon sources&lt;/a&gt; are available for download. You will have to implement your void getCode(double number, char * code) method yourself though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/daemon.png&#34; alt=&#34;daemon&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
