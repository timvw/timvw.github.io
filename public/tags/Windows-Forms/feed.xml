<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows Forms on Tim Van Wassenhove&#39;s blog</title>
    <link>/tags/Windows-Forms/</link>
    <description>Recent content in Windows Forms on Tim Van Wassenhove&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Nov 2009 00:00:00 +0000</lastBuildDate><atom:link href="/tags/Windows-Forms/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Presenting FilterList</title>
      <link>/post/2009-11-06-presenting-filterlist/</link>
      <pubDate>Fri, 06 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-11-06-presenting-filterlist/</guid>
      <description>
        
          &lt;p&gt;Earlier today i decided to add &amp;lsquo;Filtering&amp;rsquo; to my SortableBindingList. This resulted in writing a &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/FilterList.txt&#34;&gt;FilterList&lt;/a&gt; class. This class can be easily used as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; textBoxFilter_KeyUp(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, KeyEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; filterChars = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.textBoxFilter.Text.ToLower();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Filter(filterChars);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Filter(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; filterChars)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; persons = (FilterList&amp;lt;person&amp;gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource;
	persons.Filter(p =&amp;gt; p.Firstname.ToLower().Contains(filterChars));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I even created a screencast to demonstrate it:&lt;/p&gt;
&lt;p&gt;[mediaplayer src=&amp;lsquo;http://www.timvw.be/screencasts/filterlist.wmv&amp;rsquo; width=512 height=344]&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting ControlStateMachine</title>
      <link>/post/2009-08-17-presenting-controlstatemachine/</link>
      <pubDate>Mon, 17 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-08-17-presenting-controlstatemachine/</guid>
      <description>
        
          &lt;p&gt;Here is a situation we are all familiar with: A form that only displays a certain set of controls depending on the mode or state of the application. Let me start with an example: At design time there are three buttons&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/controlstatemachine.design.png&#34; alt=&#34;screenshot of flowlayoutpanel with three buttons: edit, save and cancel.&#34;&gt;&lt;/p&gt;
&lt;p&gt;The user can look at the data and decide to edit it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/controlstatemachine.display.png&#34; alt=&#34;screenshot of flowlayoutpanel with only one visible button: edit.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Or the user is editing the data and can decide to commit or discard her changes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/controlstatemachine.edit.png&#34; alt=&#34;screenshot of flowlayoutpanel with two visible buttons: save and cancel.&#34;&gt;&lt;/p&gt;
&lt;p&gt;A couple of years i ago i used to spread such display logic all over my code and it was hard to figure out which control was visible at a given point. Later on i refactored that code and encapsulated it in functions like: MakeControlsForDisplayVisible and MakeControlsForEditVisible which felt like a huge improvement. These days i have the feeling that a very simple state machine can improve the readability even better.&lt;/p&gt;
&lt;p&gt;Ok, so how simple is simple? Currently the requirements list is pretty limited:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/controlstatemachine.specs.png&#34; alt=&#34;screenshot of unittests for controlstatemachine&#34;&gt;&lt;/p&gt;
&lt;p&gt;Anyway, here is how i would write the code today (Yeah, for a stupid example this looks like overkill):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; InitializeButtonLayoutPanelMachine()
{
controlStateMachine = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ControlStateMachine&amp;lt;displayAndEditStates&amp;gt;(buttonLayoutPanel);

controlStateMachine.WhenStateChangesTo(DisplayAndEditStates.Display)
.TheOnlyVisibleControlsAre(buttonEdit);

controlStateMachine.WhenStateChangesTo(DisplayAndEditStates.Edit)
.TheOnlyVisibleControlsAre(buttonSave, buttonCancel);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As always, here is the source: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ControlStateMachine.cs.txt&#34;&gt;ControlStateMachine&lt;/a&gt; and &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/WhenChangingState.cs.txt&#34;&gt;WhenChangingState&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting ControlChanges</title>
      <link>/post/2009-08-15-presenting-controlchanges/</link>
      <pubDate>Sat, 15 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-08-15-presenting-controlchanges/</guid>
      <description>
        
          &lt;p&gt;Because i noticed that i kept writing the same operations on control over and over again i decided to capture them in a couple of functions. I presume most of you have done this already. Here is the list of operations:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/controlchanges.cd.png&#34; alt=&#34;screenshot of a class diagram with the following operations: MakeVisible, MakeInvisible and TheOnlyVisibleControlsAre.&#34;&gt;&lt;/p&gt;
&lt;p&gt;In case it is not clear what these methods should do i have defined the following specifications for them:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/controlchanges.specs.png&#34; alt=&#34;screenshot of requirements list for controlchanges.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Get the code here: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ControlChanges.cs.txt&#34;&gt;ControlChanges&lt;/a&gt; and &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/WhenExecutingControlChanges.cs.txt&#34;&gt;WhenExecutingControlChanges&lt;/a&gt;. Stay tuned for more!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Experimenting with ControlStateMachine and Fluent interfaces</title>
      <link>/post/2009-08-13-experimenting-with-controlstatemachine-and-fluent-interfaces/</link>
      <pubDate>Thu, 13 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-08-13-experimenting-with-controlstatemachine-and-fluent-interfaces/</guid>
      <description>
        
          &lt;p&gt;A long time ago i read &lt;a href=&#34;http://codebetter.com/blogs/jeremy.miller/archive/2007/07/25/the-build-your-own-cab-series-table-of-contents.aspx&#34;&gt;Build your own CAB series&lt;/a&gt; and recently i noticed that there is a wiki: &lt;a href=&#34;http://www.jeremydmiller.com/ppatterns/Default.aspx?Page=MainPage&amp;amp;AspxAutoDetectCookieSupport=1&#34;&gt;Presentation Patterns Wiki!&lt;/a&gt; and it inspired me to experiment with state machines. Here are a couple of examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;controlStateMachine = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ControlStateMachine&amp;lt;states&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);

controlStateMachine.AfterEachStateChange()
.Do(MakeRelevantButtonsVisible);

controlStateMachine.WhenStateChangesTo(States.RetrievingSubscriptionPeriod)
.TheOnlyVisibleControlsAre(flowLayoutPanel1, datePicker1);

controlStateMachine.WhenStateChangesTo(States.RetrievingCustomerInformation)
.MakeVisible(customerInput1)
.Do(() =&amp;gt; customerInput1.Dock = DockStyle.Fill);

controlStateMachine.WhenStateChangesTo(States.Ready)
.MakeInvisible(customerInput1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is another example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;wizardStateMachine = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WizardStateMachine&amp;lt;states&amp;gt;(controlStateMachine);

wizardStateMachine.InState(States.RetrievingSubscriptionPeriod)
.OnCommand(WizardCommands.Next)
.TransitionTo(States.RetrievingCustomerInformation);

wizardStateMachine.InState(States.RetrievingCustomerInformation)
.OnCommand(WizardCommands.Back)
.TransitionTo(States.RetrievingSubscriptionPeriod)
.OnCommand(WizardCommands.Finish)
.TransitionTo(States.Ready);

wizardStateMachine.InState(States.Ready)
.OnCommand(WizardCommands.New)
.Do(() =&amp;gt; MessageBox.Show(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Currently not supported&amp;#34;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Stay tuned for future posts where i describe the problem space that have lead to this API.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting AssemblyTypePicker</title>
      <link>/post/2008-09-01-presenting-assemblytypepicker/</link>
      <pubDate>Mon, 01 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-01-presenting-assemblytypepicker/</guid>
      <description>
        
          &lt;p&gt;I really like the way the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/exy1facf(VS.80).aspx&#34;&gt;Object Browser&lt;/a&gt; makes the types in an assembly visible. Because i have a couple of programs that require a given type as input, i have decided to add a TypeTree control to &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt; that mimicks the Object Browser. Here are a couple of screenshots of the control in a demo application that allows the user to generate interfaces and wrapper classes based on a selected type:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/codegenerator_01.gif&#34; alt=&#34;screenshot of assemblytypepicker with no values&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/codegenerator_02.gif&#34; alt=&#34;screenshot of dialog that requests the user to pick an assembly file&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/codegenerator_03.gif&#34; alt=&#34;screenshot of dialog that requests the user to pick a type in the previously selected assembly&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/CodeGenerator.zip&#34;&gt;CodeGenerator.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Display WorkItems in a WinForms application</title>
      <link>/post/2008-02-29-display-workitems-in-a-winforms-application/</link>
      <pubDate>Fri, 29 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-02-29-display-workitems-in-a-winforms-application/</guid>
      <description>
        
          &lt;p&gt;Using the Microsoft.TeamFoundation.WorkItemTracking.Controls assembly it is possibe to display WorkItems. Here is a little demo application that will display all the WorkItems that have been changed by one of the given users in the given range&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/workitemtracker.gif&#34; alt=&#34;screenshot of workitemtracker application&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the source: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/WorkItemTracker.zip&#34;&gt;WorkItemTracker.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit (05/03/2008):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Refactored the code a little and added some features like sortable columns, loading default tfsserver and users from App.Config, &amp;hellip;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>How the name of an embedded resource is generated in a C# project</title>
      <link>/post/2008-02-20-how-the-name-of-an-embedded-resource-is-generated-in-a-c-project/</link>
      <pubDate>Wed, 20 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-02-20-how-the-name-of-an-embedded-resource-is-generated-in-a-c-project/</guid>
      <description>
        
          &lt;p&gt;A while ago i was wondering how the name of an embedded resource is generated in a C# project. Earlier today i was looking in Microsoft.CSharp.targets and found the answer&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The CreateManifestResourceNames target create the manifest resource names from the .RESX files.&lt;/p&gt;
&lt;p&gt;[IN]
@(ResxWithNoCulture) - The names the non-culture .RESX files.
@(ResxWithCulture) - The names the culture .RESX files.
@(NonResxWithNoCulture) - The names of the non-culture non-RESX files (like bitmaps, etc).
@(NonResxWithCulture) - The names of the culture non-RESX files (like bitmaps, etc).&lt;/p&gt;
&lt;p&gt;[OUT]
@(ManifestResourceWithNoCultureName) - The corresponding manifest resource name (.RESOURCE)
@(ManifestResourceWithCultureName) - The corresponding manifest resource name (.RESOURCE)
@(ManifestNonResxWithNoCulture) - The corresponding manifest resource name.
@(ManifestNonResxWithCulture) - The corresponding manifest resource name.&lt;/p&gt;
&lt;p&gt;For C# applications the transformation is like:&lt;/p&gt;
&lt;p&gt;Resources1.resx =&amp;gt; RootNamespace.Resources1 =&amp;gt; Build into main assembly
SubFolder\Resources1.resx =&amp;gt; RootNamespace.SubFolder.Resources1 =&amp;gt; Build into main assembly
Resources1.fr.resx =&amp;gt; RootNamespace.Resources1.fr =&amp;gt; Build into satellite assembly
Resources1.notaculture.resx =&amp;gt; RootNamespace.Resources1.notaculture =&amp;gt; Build into main assembly&lt;/p&gt;
&lt;p&gt;For other project systems, this transformation may be different.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With &lt;a href=&#34;http://www.attrice.info/msbuild/index.htm&#34;&gt;Attrice Corporation Microsoft Build Sidekick v2&lt;/a&gt; you can easily visualize the flow throughout the targets via Tools -&amp;gt; View Targets Diagram.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Using DateTimePicker and Custom Format</title>
      <link>/post/2007-08-29-using-datetimepicker-and-custom-format/</link>
      <pubDate>Wed, 29 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-29-using-datetimepicker-and-custom-format/</guid>
      <description>
        
          &lt;p&gt;Today we ran into a nasty problem with &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datetimepickerformat.aspx&#34;&gt;DateTimePickerFormat&lt;/a&gt;.Custom. We allow the user to input a month/date with a DateTimePicker as following (nothing fancy)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_Load(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTimePicker1.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTimePicker1.Format = DateTimePickerFormat.Custom;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTimePicker1.CustomFormat = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MM/yyyy&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, change to 09/2007 and notice that you get an Exception, because the control tries to create an unrepresentable new DateTime(2007, 8+1, 31). Thus, if you&amp;rsquo;re going to use the DateTimePicker for MM/yyyy input make sure to set it&amp;rsquo;s value to a DateTimeTime with a day component that exists for all months/years (thus a value between 1 and 28).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Addendum:&lt;/strong&gt; As usual, super moderator and MVP &lt;a href=&#34;https://mvp.support.microsoft.com/default.aspx/profile=6c93adc6-026f-42bf-823c-8e65ca732af2&#34;&gt;Hans Passant&lt;/a&gt; provided a nice workaround for the problem:)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MonthPicker&lt;/span&gt; : DateTimePicker 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MonthPicker() 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Format = DateTimePickerFormat.Custom;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.CustomFormat = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MM/yyyy&amp;#34;&lt;/span&gt;;
		DateTime now = DateTime.Now;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(now.Year, now.Month, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	}
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; WndProc(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; Message m) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m.Msg == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;x204e) 
		{
			NMHDR hdr = (NMHDR)m.GetLParam(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(NMHDR));
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hdr.code == -&lt;span style=&#34;color:#ae81ff&#34;&gt;759&lt;/span&gt;) 
				{
					NMDATETIMECHANGE dt = (NMDATETIMECHANGE)m.GetLParam(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(NMDATETIMECHANGE));
					&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(dt.st.wYear, dt.st.wMonth, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
				}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.WndProc(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; m);
	}
	
	&lt;span style=&#34;color:#75715e&#34;&gt;// P/Invoke declarations
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[StructLayout(LayoutKind.Sequential)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NMHDR&lt;/span&gt; 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IntPtr hWnd;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IntPtr id;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; code;
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;	
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NMDATETIMECHANGE&lt;/span&gt; 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; NMHDR nmhdr;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dwFlags;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SYSTEMTIME st;
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;	
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[StructLayout(LayoutKind.Sequential)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SYSTEMTIME&lt;/span&gt; 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wYear;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wMonth;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wDayOfWeek;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wDay;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wHour;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wMinute;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wSecond;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wMilliseconds;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Bending the code generation of IExtenderProvider to your will</title>
      <link>/post/2007-08-21-bending-the-code-generation-of-iextenderprovider-to-your-will/</link>
      <pubDate>Tue, 21 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-21-bending-the-code-generation-of-iextenderprovider-to-your-will/</guid>
      <description>
        
          &lt;p&gt;In &lt;a href=&#34;http://www.timvw.be/exploring-codedomserializer/&#34;&gt;Exploring CodeDomSerializer&lt;/a&gt; i already explained how we can modify the code that the Visual Studio designer generates for us. With a typical &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.iextenderprovider.aspx&#34;&gt;IExtenderProvider&lt;/a&gt; the designer generates an initializer, SetXXX methods and a variable declaration, which looks like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.constantsExtenderProvider1 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WindowsApplication1.ConstantsExtenderProvider();

&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.constantsExtenderProvider1.SetConstants(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.button1, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] {
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Operation1&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Operation5&amp;#34;&lt;/span&gt;});

&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.constantsExtenderProvider1.SetConstants(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ConstantsExtenderProvider constantsExtenderProvider1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, what if we&amp;rsquo;re not happy with those generated SetXXX methods on each Component? The problem is that this code is not generated by the serializer for the ConstantsExtenderProvider but by the serializers for the Components. An easy workaround for this problem is to set the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.designerserializationvisibilityattribute.aspx&#34;&gt;DesignerSerializationVisibilityAttribute&lt;/a&gt; on the GetXXX method in our IExtenderProvider to &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.designerserializationvisibility.aspx&#34;&gt;Hidden&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With those ugly SetXXX methods out of the way it&amp;rsquo;s up to us to do it better. We do this by implementing a custom serializer for our ConstantsExtenderProvider&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConstantsSerializer&lt;/span&gt;&amp;lt;T&amp;gt; : CodeDomSerializer
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; Serialize(IDesignerSerializationManager manager, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
	{
		ConstantsExtenderProvider provider = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ConstantsExtenderProvider;

		CodeDomSerializer baseClassSerializer = manager.GetSerializer(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(ConstantsExtenderProvider).BaseType, &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(CodeDomSerializer)) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CodeDomSerializer;
		CodeStatementCollection statements = baseClassSerializer.Serialize(manager, &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CodeStatementCollection;

		IDesignerHost host = (IDesignerHost)manager.GetService(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(IDesignerHost));
		ComponentCollection components = host.Container.Components;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.SerializeExtender(manager, provider, components, statements);

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; statements;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SerializeExtender(IDesignerSerializationManager manager, ConstantsExtenderProvider provider, ComponentCollection components, CodeStatementCollection statements)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (IComponent component &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; components)
		{
			Control control = component &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Control;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (control != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; (control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Form == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;))
			{
				CodeMethodInvokeExpression methodcall = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeMethodInvokeExpression(&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.SerializeToExpression(manager, provider), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SetConstants&amp;#34;&lt;/span&gt;);
				methodcall.Parameters.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeFieldReferenceExpression(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeThisReferenceExpression(), control.Name));

				&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] constants = provider.GetConstants(control);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (constants != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
				{
					StringBuilder sb = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuilder();
					sb.Append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new string[] { &amp;#34;&lt;/span&gt;);

					&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; constant &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; constants)
					{
						sb.Append(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T).FullName);
						sb.Append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;);
						sb.Append(constant);
						sb.Append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;);
					}

					sb.Remove(sb.Length -- &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
					sb.Append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; }&amp;#34;&lt;/span&gt;);

					methodcall.Parameters.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeSnippetExpression(sb.ToString()));
				}
				&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
				{
					methodcall.Parameters.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodePrimitiveExpression(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;));
				}

				statements.Add(methodcall);
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now the generated code looks like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.constantsExtenderProvider1.SetConstants(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.button1, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { WindowsApplication1.Constants.Operation1, WindowsApplication1.Constants.Operation5 });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As always, feel free to download the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ConstantsExtenderProvider.zip&#34;&gt;ConstantsExtenderProvider&lt;/a&gt; source.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Debugging custom UITypeEditors</title>
      <link>/post/2007-08-10-debugging-custom-uitypeeditors/</link>
      <pubDate>Fri, 10 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-10-debugging-custom-uitypeeditors/</guid>
      <description>
        
          &lt;p&gt;If you read this you&amp;rsquo;re probably gonna think: What a moron! Anyway, i&amp;rsquo;m sharing this in the hope that i&amp;rsquo;ll be the last to undergo the following. In order to test my custom &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.drawing.design.uitypeeditor.aspx&#34;&gt;UITypeEditor&lt;/a&gt; i did the following&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.usercontrol.aspx&#34;&gt;UserControl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add a property to the control&lt;/li&gt;
&lt;li&gt;Add an &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.editorattribute.aspx&#34;&gt;Editor&lt;/a&gt; attribute to the property&lt;/li&gt;
&lt;li&gt;Build&lt;/li&gt;
&lt;li&gt;Drag a UserControl on the designer form&lt;/li&gt;
&lt;li&gt;Test via Visual Studio&amp;rsquo;s Property Window if the UITypeEditor works as expected&lt;/li&gt;
&lt;li&gt;Everytime i changed some code: &lt;strong&gt;Restart Visual Studio&lt;/strong&gt;, load the project and repeat 6.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A tedious task to say the least. Yesterday i figured out that i could &lt;strong&gt;drag a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.propertygrid.aspx&#34;&gt;PropertyGrid&lt;/a&gt; on the designer form, and set it&amp;rsquo;s SelectedObject property to a class with a property that uses the custom UITypeEditor; Instead of having to reload visual studio i can simply start a debug session, and click on the property in the PropertyGrid.&lt;/strong&gt; Now it&amp;rsquo;s a breeze to develop custom UITypeEditors.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/uitypeeditor.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_Load(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// display an instance of PersonEntry,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// a class with a property that should use the custom UITypeEditor i want to test
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.propertyGrid1.SelectedObject = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonEntry(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tim&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Van Wassenhove&amp;#34;&lt;/span&gt;));
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonEntry&lt;/span&gt;
{
	...

	&lt;span style=&#34;color:#75715e&#34;&gt;// instruct the PropertyGrid to use my custom PersonUITypeEditor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[Editor(typeof(PersonUITypeEditor), typeof(UITypeEditor))]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person Person
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.person; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.person = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonUITypeEditor&lt;/span&gt; : UITypeEditor
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; UITypeEditorEditStyle.Modal;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; EditValue(ITypeDescriptorContext context, IServiceProvider provider, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
	{
		Person person = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Person;

		IWindowsFormsEditorService svc = context.GetService(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(IWindowsFormsEditorService)) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; IWindowsFormsEditorService;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (svc != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (PersonEditorForm personEditorForm = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonEditorForm(person))
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (svc.ShowDialog(personEditorForm) == DialogResult.OK)
				{
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; personEditorForm.Person;
				}
			}
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Exploring formatting...</title>
      <link>/post/2007-07-28-exploring-formatting/</link>
      <pubDate>Sat, 28 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-07-28-exploring-formatting/</guid>
      <description>
        
          &lt;p&gt;In the documentation you can read the following for &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.globalization.cultureinfo.aspx&#34;&gt;CultureInfo&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;First i&amp;rsquo;ll initialize an instance of a customized CultureInfo and install it in the current thread:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;CultureInfo appCultureInfo = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CultureInfo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en-US&amp;#34;&lt;/span&gt;);
appCultureInfo.NumberFormat.NumberDecimalSeparator = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;;
appCultureInfo.NumberFormat.NumberGroupSeparator = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
appCultureInfo.NumberFormat.NumberDecimalDigits = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
appCultureInfo.NumberFormat.CurrencySymbol = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;€&amp;#34;&lt;/span&gt;;
Thread.CurrentThread.CurrentCulture = appCultureInfo;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The culture in Thread.CurrentThread.CurrentUICulture is only used by the Resource Manager to lookup culture-specific resources at run-time. Since we&amp;rsquo;re not playing with resources, we don&amp;rsquo;t have to care about this one.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t provide the desired format specifier, you will get the generic format specifier &amp;ldquo;G&amp;rdquo; ( Standard &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/dwhawy9k(VS.71).aspx&#34;&gt;Numeric&lt;/a&gt;, &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/az4se3k1(VS.71).aspx&#34;&gt;DateTime&lt;/a&gt;, &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/c3s1ez6e(VS.71).aspx&#34;&gt;Enumeration&lt;/a&gt; Format Strings) And now it&amp;rsquo;s time for a little demo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; SomeValue
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12345.6789&lt;/span&gt;; }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_Load(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	label1.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default to generic format: &amp;#34;&lt;/span&gt; + SomeValue.ToString();
	label2.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;numeric format: &amp;#34;&lt;/span&gt; + SomeValue.ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;);
	label3.Text = String.Format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;currency format: {0:C}&amp;#34;&lt;/span&gt;, SomeValue);
	label4.DataBindings.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SomeValue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, DataSourceUpdateMode.Never, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column1.DefaultCellStyle.Format = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E1&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column1.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SomeValue&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Form1[] { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/formatting-01.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another important interface for formatting is &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.IFormattable.aspx&#34;&gt;IFormattable&lt;/a&gt; which provides functionality to format the value of an object into a string representation. Put simply, it allows you to define your own format specifiers. Here is an example that allows the user to build his own representation of a Person&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; : IFormattable
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// omitted the code for 4 properties: Id, Name, Title and Birthday
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; ToString()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{Id}, {Name}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; ToString(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; format, IFormatProvider formatProvider)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; actualFormat = format;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] replacements = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Title&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Birthday&amp;#34;&lt;/span&gt; };
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; replacements.Length; ++i) 
		{ 
			actualFormat = actualFormat.Replace(replacements[i], i.ToString()); 
		} 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Format(actualFormat, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.title, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.birthday); 
	} 
} 

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_Load(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e) 
{ 
	List&amp;lt;person&amp;gt; persons = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;person&amp;gt;();
	persons.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1980&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tim&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sir&amp;#34;&lt;/span&gt;));
	persons.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1974&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jenna&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Miss&amp;#34;&lt;/span&gt;));

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox1.FormatString = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{Name} born on {Birthday}&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox1.FormattingEnabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox1.DataSource = persons;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/formatting-02.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Using interfaces with Drag and Drop</title>
      <link>/post/2007-07-26-using-interfaces-with-drag-and-drop/</link>
      <pubDate>Thu, 26 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-07-26-using-interfaces-with-drag-and-drop/</guid>
      <description>
        
          &lt;p&gt;Earlier today i was refactoring some graphical components. I wanted to use an interface instead of concrete implementations for my drag and drop code&amp;hellip; Although i was using an instance of Foo, and thus IFoo, the following code never allowed me to drop&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IFoo { }
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; : IFoo { }

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; label1_MouseDown(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, MouseEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.DoDragDrop(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Foo(), DragDropEffects.All);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_DragEnter(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DragEventArgs e)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// for an instance of Foo it returns false,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// if you use typeof(Foo) it returns true though...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e.Data.GetDataPresent(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(IFoo)))
	{
		e.Effect = DragDropEffects.All;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simply wrapping the concrete instance in a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.dataobject(VS.80).aspx&#34;&gt;DataObject&lt;/a&gt; results in the desired behaviour&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; label1_MouseDown(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, MouseEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.DoDragDrop(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataObject(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(IFoo).FullName,&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Foo()), DragDropEffects.All);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Improvements for the SortableBindingList (and TypedList)</title>
      <link>/post/2007-05-10-improvements-for-the-sortablebindinglist-and-typedlist/</link>
      <pubDate>Thu, 10 May 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-05-10-improvements-for-the-sortablebindinglist-and-typedlist/</guid>
      <description>
        
          &lt;p&gt;I found out that the sorting didn&amp;rsquo;t work for &amp;lsquo;Expression&amp;rsquo; properties. My first thought was to add another switch to the logic of the already existing code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; value1 = t1;
&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; value2 = t2;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (prop.Name.StartsWith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;||&amp;#34;&lt;/span&gt;))
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// do something to find the &amp;#39;ExpressionProperty&amp;#39; values
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; property &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; prop.Name.Split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;))
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// navigate through the relations
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		PropertyInfo propertyInfo = value1.GetType().GetProperty(property);
		value1 = propertyInfo.GetValue(value1, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
		value2 = propertyInfo.GetValue(value2, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since i already have a PropertyDescriptor it seems a lot smarter to use it&amp;rsquo;s GetValue instead&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; value1 = prop.GetValue(t1);
&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; value2 = prop.GetValue(t2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At &lt;a href=&#34;http://blog.developpez.com/index.php?blog=121&amp;amp;title=typedlistalt_tagt&amp;amp;more=1&amp;amp;c=1&amp;amp;tb=1&amp;amp;pb=1&#34;&gt;Matthieu MEZIL&lt;/a&gt;&amp;rsquo;s blog i found a suggestion to use &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/cfttsh47(VS.80).aspx&#34;&gt;Comparer&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;. This allowed me to reduce&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;IComparable comparable = value1 &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; IComparable;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (comparable != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reverse * comparable.CompareTo(value2);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
{
	comparable = value2 &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; IComparable;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (comparable != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;* reverse &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;* comparable.CompareTo(value1);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Notice that this requires that atleast value1 or value2 are an instance of a type that implements IComparable
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reverse * Comparer.Default.Compare(value1, value2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to get yet another version of &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/TypedList.zip&#34;&gt;TypedList.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting the ExpressionDescriptor</title>
      <link>/post/2007-05-08-presenting-the-expressiondescriptor/</link>
      <pubDate>Tue, 08 May 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-05-08-presenting-the-expressiondescriptor/</guid>
      <description>
        
          &lt;p&gt;A couple of days ago i presented you the &lt;a href=&#34;http://www.timvw.be/presenting-the-typedlistt/&#34;&gt;TypedList&lt;/a&gt; which supports navigation through subproperties. Another common feature request is the possibility to add a column that has a value based on other values in the row (like a DataColumn with it&amp;rsquo;s Expression property set). With the plumbing code i&amp;rsquo;ve written it&amp;rsquo;s as simple as implementing the following interface&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IExpressionProvider&amp;lt;componentType, PropertyType&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; }
	PropertyType GetValue(ComponentType component);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An example implementation could be an expression that represents the duration of an Appointment&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DurationExpressionProvider&lt;/span&gt; : IExpressionProvider&amp;lt;appointment, TimeSpan&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;||Duration&amp;#34;&lt;/span&gt;; } }

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TimeSpan GetValue(Appointment component)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; component.DateTimeRange.End -- component.DateTimeRange.Start;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve changed the constructor of TypedList a bit so that it accepts an enumeration of PropertyDescriptors. In my example you can initialise the list as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;List&amp;lt;propertyDescriptor&amp;gt; propertyDescriptors = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;propertyDescriptor&amp;gt;();

&lt;span style=&#34;color:#75715e&#34;&gt;// create the subpropertydescriptors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] propertyNames = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patient.Name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patient.Address.Municipality&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTimeRange.Start&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTimeRange.End&amp;#34;&lt;/span&gt; };
propertyDescriptors.AddRange(Array.ConvertAll&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, SubPropertyDescriptor&amp;lt;appointment&amp;gt;&amp;gt;(propertyNames, &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; propertyName) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SubPropertyDescriptor&amp;lt;appointment&amp;gt;(propertyName); }));

&lt;span style=&#34;color:#75715e&#34;&gt;// add an expressiondescriptor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IExpressionProvider&amp;lt;appointment, TimeSpan&amp;gt; expressionProvider = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DurationExpressionProvider();
ExpressionDescriptor&amp;lt;appointment, TimeSpan&amp;gt; durationDescriptor = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ExpressionDescriptor&amp;lt;appointment, TimeSpan&amp;gt;(expressionProvider);
propertyDescriptors.Add(durationDescriptor);

TypedBindingList&amp;lt;appointment&amp;gt; appointments = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TypedBindingList&amp;lt;appointment&amp;gt;(propertyDescriptors);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this is how it looks like at runtime&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/typedlist-3.gif&#34; alt=&#34;image of the typedlist&#34;&gt;&lt;/p&gt;
&lt;p&gt;As always, feel free to download the code: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/TypedList.zip&#34;&gt;TypedList.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting the TypedList&lt;T&gt;</title>
      <link>/post/2007-05-05-presenting-the-typedlistt/</link>
      <pubDate>Sat, 05 May 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-05-05-presenting-the-typedlistt/</guid>
      <description>
        
          &lt;p&gt;A while ago i presented the &lt;a href=&#34;http://www.timvw.be/presenting-the-sortablebindinglistt/&#34;&gt;SortableBindingList&lt;/a&gt;. One of the nice features you get with DataSets is that you can use relations to navigate through the data. Business Objects don&amp;rsquo;t give you this functionality by default. Today i implemented a BindingList that supports navigation through relations. First i&amp;rsquo;ll present you the Business Objects&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/typedlist-1.gif&#34; alt=&#34;screenshot of business objects&#34;&gt;&lt;/p&gt;
&lt;p&gt;We would like to create an overview of the appointments using a datagridview&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/typedlist-2.gif&#34; alt=&#34;screenshot of wanted ui&#34;&gt;&lt;/p&gt;
&lt;p&gt;I drag a datagridview on the designer form, add columns, and then i set the datapropertynames as following: (Notice how i use a . to navigate the relations)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnId.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPatient.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patient.Name&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnMunicipality.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patient.Address.Municipality&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnStart.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTimeRange.Start&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnEnd.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTimeRange.End&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First we need to implement a method that allows us to find a PropertyInfo for the given property name&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PropertyInfo Resolve(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; propertyName)
{
	Type t = &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T);
	PropertyInfo propertyInfo = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] subPropertyNames = propertyName.Split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (subPropertyNames.Length == &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// a regular property
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		propertyInfo = t.GetProperty(propertyName);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// navigate through the subproperties
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; subPropertyNames.Length - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; ++i) 
		{ 
			propertyInfo = t.GetProperty(subPropertyNames[i]); 
			t = propertyInfo.PropertyType; 
		} 
	} 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; propertyInfo; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we are ready to implement the ITypedList.GetItemProperties method in our TypedList&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors)
{
	PropertyDescriptorCollection propertyDescriptors = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PropertyDescriptorCollection(listAccessors);

	&lt;span style=&#34;color:#75715e&#34;&gt;// add the regular property descriptors T has
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (PropertyDescriptor propertyDescriptor &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; TypeDescriptor.GetProperties(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T)))
	{
		propertyDescriptors.Add(propertyDescriptor);
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// add the subproperties
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; subPropertyName &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.subPropertyNames)
	{
		propertyDescriptors.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SubPropertyDescriptor&amp;lt;t&amp;gt;(subPropertyName));
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; propertyDescriptors;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using this class is as simple as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// create a TypedList that holds Appointments
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;TypedBindingList&amp;lt;appointment&amp;gt; appointments = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TypedBindingList&amp;lt;appointment&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patient.Name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patient.Address.Municipality&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTimeRange.Start&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTimeRange.End&amp;#34;&lt;/span&gt; });

&lt;span style=&#34;color:#75715e&#34;&gt;// Initialise two patients
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Patient patient = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Patient(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tim&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Address(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MyStreet&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1820&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Melsbroek&amp;#34;&lt;/span&gt;));
Patient patient2 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Patient(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Address(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;His Street&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Leuven&amp;#34;&lt;/span&gt;));

&lt;span style=&#34;color:#75715e&#34;&gt;// Add appointsments to the list
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;appointments.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Appointment(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, patient, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTimeRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))));
appointments.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Appointment(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, patient2, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTimeRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))));
appointments.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Appointment(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, patient, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTimeRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))));
appointments.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Appointment(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, patient, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTimeRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))));
appointments.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Appointment(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, patient2, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTimeRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))));
appointments.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Appointment(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, patient, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTimeRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))));

&lt;span style=&#34;color:#75715e&#34;&gt;// Assign this list to the datagridview datasource
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = appointments;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty cool, don&amp;rsquo;t you think? As always, feel free to download the code: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/TypedList.zip&#34;&gt;TypedList.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Today, May 8th 2007, i discovered a but in SubPropertyDescriptor.SetValue and uploaded a newer version of the code.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring DataGridViewComboBoxColumn databinding (part2)</title>
      <link>/post/2007-05-03-exploring-datagridviewcomboboxcolumn-databinding-part2/</link>
      <pubDate>Thu, 03 May 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-05-03-exploring-datagridviewcomboboxcolumn-databinding-part2/</guid>
      <description>
        
          &lt;p&gt;A while ago i wrote about &lt;a href=&#34;http://www.timvw.be/exploring-datagridviewcomboboxcolumn-databinding/&#34;&gt;Exploring DataGridViewComboBoxColumn databinding&lt;/a&gt; using Business Objects. Some people asked me to give an example using DataSets&amp;hellip;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll start with creating a DataSet, add two DataTables, and create a relation on PersonType.Id (int32). In the designer this looks like&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-dataset1.gif&#34; alt=&#34;screenshot of dataset designer displaying person and persontype&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next i create a DataSetDac that will return an instance of a Filled PersonDataSet (In real life you would probably use a TableAdapter and get the data from a database) The code is as simple as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PersonsDataSet Find()
{
	PersonsDataSet personsDataSet = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonsDataSet();

	personsDataSet.PersonType.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A geeky person&amp;#34;&lt;/span&gt; });
	personsDataSet.PersonType.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A coward&amp;#34;&lt;/span&gt; });
	personsDataSet.PersonType.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Feeling hot hot hot&amp;#34;&lt;/span&gt; });
	personsDataSet.PersonType.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(None)&amp;#34;&lt;/span&gt; });

	personsDataSet.Person.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Timvw&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; });
	personsDataSet.Person.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; });
	personsDataSet.Person.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An Onymous&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; });
	personsDataSet.Person.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jenna Jameson&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; });
	personsDataSet.Person.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Null Able&amp;#34;&lt;/span&gt;, -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; });

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; personsDataSet;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now comes the important stuff: Bind the data to the DataGridView and DataGridViewComboBoxColumn&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
	InitializeComponent();

	PersonsDataSet personsDataSet = DataSetDac.Find();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnName.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PersonTypeId&amp;#34;&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Label&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.ValueMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataSource = personsDataSet.PersonType;

	BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingSource();
	bindingSource.DataSource = personsDataSet.Person;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = bindingSource;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Geeks are doomed to stay Geeks forever. When you try change a Person that is a Geek, the values in ComboBox should be limited to Geek and (None). The following code takes care of that&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_EditingControlShowing(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewEditingControlShowingEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.CurrentCell.ColumnIndex == &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.Index)
	{
		BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; BindingSource;
		PersonsDataSet.PersonRow person = (bindingSource.Current &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DataRowView).Row &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PersonsDataSet.PersonRow;

		&lt;span style=&#34;color:#75715e&#34;&gt;// this method returns the allowed persontypes for the given person
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		PersonsDataSet.PersonTypeDataTable personTypeDataTable = DataSetDac.FindPersonTypes(person);

		DataGridViewComboBoxEditingControl comboBox = e.Control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DataGridViewComboBoxEditingControl;
		comboBox.DataSource = personTypeDataTable;

		comboBox.SelectionChangeCommitted -= &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox_SelectionChangeCommitted;
		comboBox.SelectionChangeCommitted += &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox_SelectionChangeCommitted;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PersonsDataSet.PersonTypeDataTable FindPersonTypes(PersonsDataSet.PersonRow person)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// by default, all persons simply have one of the available persontypecodes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	PersonsDataSet personsDataSet = Find();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person.PersonTypeId.Equals(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// geeks are doomed to stay geeks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		personsDataSet.PersonType.Rows.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
		personsDataSet.PersonType.Rows.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; personsDataSet.PersonType;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; comboBox_SelectionChangeCommitted(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.EndEdit();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As always, feel free to download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DataGridViewComboBoxBinding2.zip&#34;&gt;DataGridViewComboBoxBinding2.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting the MultiPanel</title>
      <link>/post/2007-04-29-presenting-the-multipanel/</link>
      <pubDate>Sun, 29 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-04-29-presenting-the-multipanel/</guid>
      <description>
        
          &lt;p&gt;A while ago i was thinking that i would be nice to have a control that exposes multiple designer panels, but only shows one at a time&amp;hellip; Somewhat like a TabControl, but without the header.. Anyway, i found out (&lt;a href=&#34;http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=1518961&amp;amp;SiteID=1&#34;&gt;here&lt;/a&gt;) that a TabControl can be tweaked into that behaviour&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MultiPanel&lt;/span&gt; : TabControl
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; WndProc(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; Message m)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m.Msg == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;x1328 &amp;amp;&amp;amp; !DesignMode)
		{
			m.Result = (IntPtr) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.WndProc(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; m);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the designer it appears as following&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/MultiPanel1.gif&#34; alt=&#34;screenshot of MultiPanel at designtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/MultiPanel2.gif&#34; alt=&#34;screenshot of MultiPanel at designtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;And at runtime it appears as following&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/MultiPanel3.gif&#34; alt=&#34;screenshot of MultiPanel at designtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/MultiPanel4.gif&#34; alt=&#34;screenshot of MultiPanel at designtime&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Performing long running tasks in a Windows Application</title>
      <link>/post/2007-04-27-performing-long-running-tasks-in-a-windows-application/</link>
      <pubDate>Fri, 27 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-04-27-performing-long-running-tasks-in-a-windows-application/</guid>
      <description>
        
          &lt;p&gt;A while ago i blogged about &lt;a href=&#34;http://www.timvw.be/about-thread-safe-gui/&#34;&gt;Thread Safe UI&lt;/a&gt;. Today someone asked the following&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first thing i do is define a delegate (void Performer()) that will do the work of a long running operation. The reason i do this is because the compiler generates a class Performer that inherits from System.MulticastDelegate and exposes Begin- and EndInvoke methods.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/performerdelegate.gif&#34; alt=&#34;screenshot of ildasm displaying generated performer class&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since i want to disable my form before each run of a Performer and enable it after each run i implement a method Perform as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Perform(Performer performer, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; message)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PrePerform(message);
	performer.BeginInvoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PostPerform, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it&amp;rsquo;s simply a matter of implemeting Pre- and PostPerform&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; PrePerform(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; message)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.InvokeRequired)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.EndInvoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.BeginInvoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MethodInvoker(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PrePerform(message); })));
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Enabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.toolStripStatusLabel1.Text = message;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.toolStripStatusLabel1.Visible = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.toolStripProgressBar1.Visible = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; PostPerform(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; state)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.InvokeRequired)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.EndInvoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.BeginInvoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MethodInvoker(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PostPerform(state); })));
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.toolStripProgressBar1.Visible = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.toolStripStatusLabel1.Visible = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.toolStripStatusLabel1.Text = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Enabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have all the infrastructure i implement an eventhandler for a button click&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button1_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// remove previously retrieved results
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateResultLabel(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Perform(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// simulate the effect of a blocking operation that takes a while to complete
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// eg: remoting, webrequests, database queries, ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		Thread.Sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;);

		&lt;span style=&#34;color:#75715e&#34;&gt;// display the result of the long running operation
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateResultLabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Value was retrieved...&amp;#34;&lt;/span&gt;);
	}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Retrieving value...&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are a couple of screenshots of the running program&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/performerdelegate2.gif&#34; alt=&#34;screenshot of application not doing anything&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/performerdelegate3.gif&#34; alt=&#34;screenshot of application performing long running task&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/performerdelegate4.gif&#34; alt=&#34;screenshot of application after completion of long running task&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/AsyncDemo.zip&#34;&gt;AsyncDemo.zip&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>DataGridView to Excel</title>
      <link>/post/2007-04-05-datagridview-to-excel/</link>
      <pubDate>Thu, 05 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-04-05-datagridview-to-excel/</guid>
      <description>
        
          &lt;p&gt;The &lt;a href=&#34;http://www.carlosag.net/Tools/ExcelXmlWriter/Default.aspx&#34;&gt;CarlosAg Excel Xml Writer Library&lt;/a&gt; does not require &lt;a href=&#34;http://office.microsoft.com/en-us/excel/default.aspx&#34;&gt;Excel&lt;/a&gt; in order to generate Excel Workbooks. I already presented a method to print a DataGridView (&lt;a href=&#34;http://www.timvw.be/print-a-control/&#34;&gt;here&lt;/a&gt;) and now i present you a method that allows you to export a DataGridView to an Excel Workbook: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DataGridViewToExcel.zip&#34;&gt;DataGridViewToExcel.zip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridview-to-excel-1.gif&#34; alt=&#34;screenshot of the source datagridview&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridview-to-excel-2.gif&#34; alt=&#34;screenshot of the generated excel workbook&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Little INotifyPropertyChanged helper</title>
      <link>/post/2007-03-19-little-inotifypropertychanged-helper/</link>
      <pubDate>Mon, 19 Mar 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-03-19-little-inotifypropertychanged-helper/</guid>
      <description>
        
          &lt;p&gt;Most implementations of INotifyPropertyChanged look as following (notice that you have to make sure that the hardcoded PropertyName is spelled correctly)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyClass&lt;/span&gt; : INotifyPropertyChanged
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; X
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.x; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.x != &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.x = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.OnPropertyChanged(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;);
			}
		}
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[MethodImpl(MethodImplOptions.NoInlining)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Fire(Delegate del, &lt;span style=&#34;color:#66d9ef&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] args)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (del != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Delegate sink &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; del.GetInvocationList())
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; { sink.DynamicInvoke(args); }
				&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; { }
			}
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnPropertyChanged( &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; propertyName )
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Fire( &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PropertyChanged, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PropertyChangedEventArgs( propertyName ) );
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Everytime you refactor a property you also have to make sure to refactor the string with it&amp;rsquo;s name in the setter method. Here&amp;rsquo;s a helper method that makes life a little easier&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnPropertyChanged()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.OnPropertyChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StackTrace(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;).GetFrame(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).GetMethod().Name.Substring(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This makes the implementation of a property as simple as (No more hardcoded strings to maintain)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; X
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.x; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.x != &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.x = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.OnPropertyChanged();
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Presenting the SortableBindingList&lt;T&gt;</title>
      <link>/post/2007-02-22-presenting-the-sortablebindinglistt/</link>
      <pubDate>Thu, 22 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-02-22-presenting-the-sortablebindinglistt/</guid>
      <description>
        
          &lt;p&gt;If you are databinding your custom objects (in a Bindinglist of &lt;!-- raw HTML omitted --&gt;) to a DataGridView you will notice that the users can&amp;rsquo;t sort the rows by clicking on the columnheaders&amp;hellip; Unlike an unbound DataGridView, the SortCompare event is not raised. Here is a class that uses IComparer to implement a BindingList that supports Sorting:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please read the &lt;a href=&#34;http://www.timvw.be/presenting-the-sortablebindinglistt-take-two/&#34;&gt;follow up article&lt;/a&gt; to find the updated source code.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using this SortableBindingList is as easy as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
	InitializeComponent();

	SortableBindingList&amp;lt;person&amp;gt; persons = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SortableBindingList&amp;lt;person&amp;gt;();
	persons.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timvw&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1980&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)));
	persons.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, DateTime.Now));

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnId.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnName.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnBirthday.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Birthday&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = persons;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/sortablebindinglist.gif&#34; alt=&#34;the sortablebindinglist at work&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the source and demoproject: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/SortableBindingList.zip&#34;&gt;SortableBindingList.zip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; You can find the latest implementation at &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt;, a project where i will keep classes that i find interesting.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Don&#39;t wait until the DateTimePicker has lost focus to write back the values</title>
      <link>/post/2007-02-07-dont-wait-until-the-datetimepicker-has-lost-focus-to-write-back-the-values/</link>
      <pubDate>Wed, 07 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-02-07-dont-wait-until-the-datetimepicker-has-lost-focus-to-write-back-the-values/</guid>
      <description>
        
          &lt;p&gt;Drag a TextBox and a DateTimePicker control on a Form and databind them to a DateTime property, eg&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
	{
		InitializeComponent();

		SimpleObject simpleObject = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SimpleObject();
		simpleObject.Birthday = DateTime.Now;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTimePicker1.DataBindings.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Value&amp;#34;&lt;/span&gt;, simpleObject, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Birthday&amp;#34;&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.textBox1.DataBindings.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;, simpleObject, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Birthday&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, DataSourceUpdateMode.OnPropertyChanged);
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SimpleObject&lt;/span&gt; : INotifyPropertyChanged
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; DateTime birthday;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DateTime Birthday
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.birthday; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;
		{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.birthday = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.OnPropertyChanged(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Birthday&amp;#34;&lt;/span&gt;);
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnPropertyChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; propertyName)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PropertyChanged != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PropertyChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PropertyChangedEventArgs(propertyName));
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The annoying bit is that every time the user picks a datetime, he has to move the focus before the changes in the DateTimePicker control are written back to the datasource&amp;hellip; You can circumvent this by handling the CloseUp event of the DataTimePicker as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dateTimePicker1_CloseUp(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	DateTimePicker dateTimePicker = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DateTimePicker;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dateTimePicker != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Binding binding &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; dateTimePicker.DataBindings)
		{
			binding.WriteValue();
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I think mosts users will appreciate this new behaviour 🙂 We can also apply this technique on a ComboBox (using the SelectionChangeCommitted event). Instead of manually hooking up to all these events, i&amp;rsquo;ve implemented an IExtenderProvider that takes care of this tedious task (only showing the part for the datetimepicker)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[ProvideProperty(&amp;#34;WriteValuesAfterCloseUp&amp;#34;, typeof(DateTimePicker))]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WriteValueAfterEventExtender&lt;/span&gt; : Component, IExtenderProvider
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Dictionary&amp;lt;dateTimePicker, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&amp;gt; writeValuesAfterCloseUp;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; WriteValueAfterEventExtender()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.writeValuesAfterCloseUp = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;dateTimePicker, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&amp;gt;();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; CanExtend(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; extendee)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; extendee &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; DateTimePicker;
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[Description(&amp;#34;Gets a boolean indicating if the values are written to the datasource after a CloseUp event.&amp;#34;)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; GetWriteValuesAfterCloseUp(DateTimePicker dateTimePicker)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.writeValuesAfterCloseUp.TryGetValue(dateTimePicker, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;))
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetWriteValuesAfterCloseUp(DateTimePicker dateTimePicker, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.writeValuesAfterCloseUp.ContainsKey(dateTimePicker))
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.writeValuesAfterCloseUp[dateTimePicker] = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.writeValuesAfterCloseUp.Add(dateTimePicker, &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
		{
			dateTimePicker.CloseUp += &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTimePicker_CloseUp;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		{
			dateTimePicker.CloseUp -= &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTimePicker_CloseUp;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dateTimePicker_CloseUp(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
	{
		DateTimePicker dateTimePicker = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DateTimePicker;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dateTimePicker != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Binding binding &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; dateTimePicker.DataBindings)
			{
				binding.WriteValue();
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As soon as you drop an instance of the WriteValueAfterEditExtender component on your designer form you will see the that an extra property appears on the datetimepicker&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/writevalueaftereventextender.gif&#34; alt=&#34;image of the propertylist for datetimepicker&#34;&gt;&lt;/p&gt;
&lt;p&gt;As always, feel free to download the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ExtenderProvider.zip&#34;&gt;ExtenderProvider.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Control the order of Properties in your Class</title>
      <link>/post/2007-02-04-control-the-order-of-properties-in-your-class/</link>
      <pubDate>Sun, 04 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-02-04-control-the-order-of-properties-in-your-class/</guid>
      <description>
        
          &lt;p&gt;Sometimes you want to manipulate the order in which properties are used for databinding. Eg: If you drag and drop an object datasource on a DataGridView you have no control in which order it binds the properties. Offcourse, you can order the columns by moving them around&amp;hellip; Today someone asked the following&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;I started with the implementation of a PropertyOrderAttribute&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[AttributeUsage(AttributeTargets.Property)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PropertyOrderAttribute&lt;/span&gt; : Attribute
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; order;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PropertyOrderAttribute(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; order)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.order = order;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Order
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.order; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So the user can use this attribute to define the order in which the properties should appear as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; DateTime birthDay;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Foo(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name, DateTime birthDay)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id = id;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name = name;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.birthDay = birthDay;
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[PropertyOrder(0)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Id
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; id; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { id = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[PropertyOrder(2)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; name; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { name = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[PropertyOrder(1)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DateTime BirthDay
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; birthDay; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { birthDay = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now i implement a generic BindingList that makes use of the PropertyOrderAttributes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PropertyOrderBindingList&lt;/span&gt;&amp;lt;T&amp;gt; : BindingList&amp;lt;T&amp;gt;, ITypedList
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PropertyOrderBindingList()
	: &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;()
	{ }

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors)
	{
		PropertyDescriptorCollection typePropertiesCollection = TypeDescriptor.GetProperties(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; typePropertiesCollection.Sort(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PropertyDescriptorComparer());
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetListName(PropertyDescriptor[] listAccessors)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A list with Properties for {0}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T).Name);
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PropertyDescriptorComparer&lt;/span&gt; : IComparer
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Compare(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; y)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x == y) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

		PropertyDescriptor propertyDescriptorX = x &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PropertyDescriptor;
		PropertyDescriptor propertyDescriptorY = y &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PropertyDescriptor;

		PropertyOrderAttribute propertyOrderAttributeX = propertyDescriptorX.Attributes[&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(PropertyOrderAttribute)] &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PropertyOrderAttribute;
		PropertyOrderAttribute propertyOrderAttributeY = propertyDescriptorY.Attributes[&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(PropertyOrderAttribute)] &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PropertyOrderAttribute;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (propertyOrderAttributeX == propertyOrderAttributeY) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (propertyOrderAttributeX == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (propertyOrderAttributeY == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; propertyOrderAttributeX.Order.CompareTo(propertyOrderAttributeY.Order);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With all this infrastructure it becomes as easy as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
	InitializeComponent();

	PropertyOrderBindingList&amp;lt;foo&amp;gt; fooList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PropertyOrderBindingList&amp;lt;foo&amp;gt;();
	fooList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Foo(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Timvw&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1980&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)));
	fooList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Foo(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mike&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1984&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = fooList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Presenting the DataGridViewLargeTextBoxCell</title>
      <link>/post/2007-01-27-presenting-the-datagridviewlargetextboxcell/</link>
      <pubDate>Sat, 27 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-27-presenting-the-datagridviewlargetextboxcell/</guid>
      <description>
        
          &lt;p&gt;Today i decided to experiment a bit with custom &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridviewcell.aspx&#34;&gt;DataGridViewCell&lt;/a&gt; implementations. If you insert large text into a DataGridView it will (at best) wrap the text. I wanted my DataGridView to behave like &lt;a href=&#34;http://office.microsoft.com/excel/&#34;&gt;Excel&lt;/a&gt; so that the whole text is displayed. Here are a couple of screenshots of the result&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridviewlargetextboxcell-1.gif&#34; alt=&#34;the large text flows over it&amp;rsquo;s surrounding columns&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridviewlargetextboxcell-2.gif&#34; alt=&#34;the editingcontrol is resized to fit the complete text&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/CustomDataGridViewCells.zip&#34;&gt;CustomDataGridViewCells.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>About Thread-Safe GUI...</title>
      <link>/post/2007-01-21-about-thread-safe-gui/</link>
      <pubDate>Sun, 21 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-21-about-thread-safe-gui/</guid>
      <description>
        
          &lt;p&gt;If you&amp;rsquo;re writing windows applications you&amp;rsquo;ll most certainly recognize the following piece of code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateIntResultDelegate(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result);

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateIntResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelIntResult.InvokeRequired)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelIntResult.Invoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UpdateIntResultDelegate(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateIntResult), result);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.IntResult = result;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateStringResultDelegate(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; result);

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateStringResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; result)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelStringResult.InvokeRequired)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelStringResult.Invoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UpdateStringResultDelegate(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateStringResult), result);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.StringResult = result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Today i was fed up with defining all these Delegates.. So i decided to define a generic delegate instead&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Delegate&amp;lt;t&amp;gt;(T t);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now i can reuse this Delegate for my two update methods&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateIntResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelIntResult.InvokeRequired)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelIntResult.Invoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Delegate&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateIntResult), result);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.IntResult = result;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateStringResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; result)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelStringResult.InvokeRequired)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelStringResult.Invoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Delegate&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateStringResult), result);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.StringResult = result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apparently (and not surprisingly) i&amp;rsquo;m not the first to come up with this idea, a little websearch for &amp;lsquo;Generic Delegate&amp;rsquo; learned me that &lt;a href=&#34;http://weblogs.asp.net/rosherove/default.aspx&#34;&gt;Roy Osherove&lt;/a&gt; blogged about it in: &lt;a href=&#34;http://weblogs.asp.net/rosherove/archive/2006/03/01/439309.aspx&#34;&gt;The 3 ways to create a Thread-Safe GUI with .NET 2.0, with one clear winner&lt;/a&gt;. After reading the article i decided to take the following approach (The call to UpdateIntResult is type-safe, it only calls Invoke when it&amp;rsquo;s required and no duplication)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateIntResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelIntResult.InvokeRequired)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelIntResult.Invoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MethodInvoker(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateIntResult(result); }));
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.IntResult = result;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Exploring DataGridViewComboBoxColumn databinding</title>
      <link>/post/2007-01-17-exploring-datagridviewcomboboxcolumn-databinding/</link>
      <pubDate>Wed, 17 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-17-exploring-datagridviewcomboboxcolumn-databinding/</guid>
      <description>
        
          &lt;p&gt;Let&amp;rsquo;s start with a simple example: Each Person has a Name (string) and PersonTypeCode (an Enumerated value) property. We drag a DataGridView on the designer form and add two columns (DataGridViewComboBoxColumn for the PersonTypeCode property). And then we hook up the Bindingsource as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
	{
		InitializeComponent();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnName.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PersonTypeCode&amp;#34;&lt;/span&gt;;

		BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingSource();
		bindingSource.DataSource = FindPersons();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = bindingSource;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;person&amp;gt; FindPersons()
	{
		BindingList&amp;lt;person&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;person&amp;gt;();
		bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Timvw&amp;#34;&lt;/span&gt;, PersonTypeCode.Geek));
		bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, PersonTypeCode.Anonymous));
		bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An Onymous&amp;#34;&lt;/span&gt;, PersonTypeCode.Anonymous));
		bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jenna Jameson&amp;#34;&lt;/span&gt;, PersonTypeCode.Babe));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; PersonTypeCode
{
	Geek = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	Anonymous = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	Babe = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; PersonTypeCode personTypeCode;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name, PersonTypeCode personTypeCode)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name = name;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.personTypeCode = personTypeCode;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PersonTypeCode PersonTypeCode
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.personTypeCode; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.personTypeCode = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we run this code we run in the following error:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-datagridviewcomboboxcolumn-1.gif&#34; alt=&#34;DataGridViewComboBoxCell value is not valid.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Always make sure the DataGridViewComboxColumn knows about all the possible values (&lt;a href=&#34;http://www.timvw.be/implementing-masterdetail-for-custom-objects-with-datagridviewcomboboxcolumns/&#34;&gt;Add them via the Items property&lt;/a&gt; or use databinding). Let&amp;rsquo;s extend our Form1 class as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
InitializeComponent();

&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnName.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PersonTypeCode&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataSource = FindPersonTypeCodes();

BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingSource();
bindingSource.DataSource = FindPersons();
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = bindingSource;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;personTypeCode&amp;gt; FindPersonTypeCodes()
{
BindingList&amp;lt;personTypeCode&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;personTypeCode&amp;gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (PersonTypeCode personTypeCode &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; Enum.GetValues(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(PersonTypeCode)))
{
bindingList.Add(personTypeCode);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Allright, here is a screenshot of our first working version:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-datagridviewcomboboxcolumn-2.gif&#34; alt=&#34;datagridviewcomboboxcolumn with enumerated values&#34;&gt;&lt;/p&gt;
&lt;p&gt;Instead of displaying the bare enum values we want to display a nice label. In order to achieve this we define a class PersonType to hold both the PersonTypeCode and the label:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonType&lt;/span&gt;
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; PersonTypeCode personTypeCode;
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; label;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PersonType(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; label, PersonTypeCode personTypeCode)
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.label = label;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.personTypeCode = personTypeCode;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Label
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.label; }
&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.label = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PersonTypeCode PersonTypeCode
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.personTypeCode; }
&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.personTypeCode = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We modify our code so that this new PersonType class is used for the ComboBoxColumn:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
InitializeComponent();

&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnName.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PersonTypeCode&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Label&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.ValueMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PersonTypeCode&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataSource = FindPersonTypes();

BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingSource();
bindingSource.DataSource = FindPersons();
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = bindingSource;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;personType&amp;gt; FindPersonTypes()
{
BindingList&amp;lt;personType&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;personType&amp;gt;();
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A geeky person&amp;#34;&lt;/span&gt;, PersonTypeCode.Geek));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A coward&amp;#34;&lt;/span&gt;, PersonTypeCode.Anonymous));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Feeling hot hot hot&amp;#34;&lt;/span&gt;, PersonTypeCode.Babe));
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-datagridviewcomboboxcolumn-3.gif&#34; alt=&#34;datagridviewcomboboxcolumn with nice labels.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Great! Now we&amp;rsquo;ll add some functionality that limits the possible values in the ComboBoxColumn basesd on the Name (I already demonstrated this technique &lt;a href=&#34;http://www.timvw.be/implementing-masterdetail-for-custom-objects-with-datagridviewcomboboxcolumns/&#34;&gt;here&lt;/a&gt;). Simply handle the EditingControlShowing Event on the DataGridView as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_EditingControlShowing(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewEditingControlShowingEventArgs e)
{
BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; BindingSource;
Person person = bindingSource.Current &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Person;
BindingList&amp;lt;personType&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.FindPersonTypes(person);

DataGridViewComboBoxEditingControl comboBox = e.Control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DataGridViewComboBoxEditingControl;
comboBox.DataSource = bindingList;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;personType&amp;gt; FindPersonTypes(Person person)
{
&lt;span style=&#34;color:#75715e&#34;&gt;// by default, all persons simply have one of the available persontypecodes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;BindingList&amp;lt;personType&amp;gt; bindingList = FindPersonTypes();

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person.PersonTypeCode == PersonTypeCode.Geek)
{
&lt;span style=&#34;color:#75715e&#34;&gt;// geeks are doomed to stay geeks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;bindingList.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
bindingList.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you open the combox for &amp;ldquo;Timvw&amp;rdquo; you see that you can only choose &amp;ldquo;A geeky person&amp;rdquo;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-datagridviewcomboboxcolumn-4.gif&#34; alt=&#34;datagridviewcomboboxcolumn with limited options.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Instead of using an enum we could have used a regular class too. The key is to override the Equals method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonTypeCode&lt;/span&gt;
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PersonTypeCode Geek
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonTypeCode(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PersonTypeCode Anonymous
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonTypeCode(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PersonTypeCode Babe
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonTypeCode(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PersonTypeCode(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id)
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id = id;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Equals(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; obj)
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (obj == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (obj == &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
PersonTypeCode personTypeCode = obj &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PersonTypeCode;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (personTypeCode == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id == personTypeCode.id;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetHashCode()
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id.GetHashCode();
}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;personType&amp;gt; FindPersonTypes(Person person)
{
&lt;span style=&#34;color:#75715e&#34;&gt;// by default, all persons simply have one of the available persontypecodes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;BindingList&amp;lt;personType&amp;gt; bindingList = FindPersonTypes();

&lt;span style=&#34;color:#75715e&#34;&gt;//if (person.PersonTypeCode == PersonTypeCode.Geek)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person.PersonTypeCode.Equals(PersonTypeCode.Geek))
{
&lt;span style=&#34;color:#75715e&#34;&gt;// geeks are doomed to stay geeks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;bindingList.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
bindingList.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now you&amp;rsquo;re thinking: But i want the user to not select a PersonTypeCode (null). We&amp;rsquo;ll represent that with an empty string &amp;ldquo;&amp;quot;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;person&amp;gt; FindPersons()
{
BindingList&amp;lt;person&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;person&amp;gt;();
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Timvw&amp;#34;&lt;/span&gt;, PersonTypeCode.Geek));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, PersonTypeCode.Anonymous));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An Onymous&amp;#34;&lt;/span&gt;, PersonTypeCode.Anonymous));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jenna Jameson&amp;#34;&lt;/span&gt;, PersonTypeCode.Babe));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Null Able&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;));
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;personType&amp;gt; FindPersonTypes()
{
BindingList&amp;lt;personType&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;personType&amp;gt;();
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A geeky person&amp;#34;&lt;/span&gt;, PersonTypeCode.Geek));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A coward&amp;#34;&lt;/span&gt;, PersonTypeCode.Anonymous));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Feeling hot hot hot&amp;#34;&lt;/span&gt;, PersonTypeCode.Babe));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;));
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;personType&amp;gt; FindPersonTypes(Person person)
{
&lt;span style=&#34;color:#75715e&#34;&gt;// by default, all persons simply have one of the available persontypecodes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;BindingList&amp;lt;personType&amp;gt; bindingList = FindPersonTypes();

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person.PersonTypeCode != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; person.PersonTypeCode.Equals(PersonTypeCode.Geek))
{
&lt;span style=&#34;color:#75715e&#34;&gt;// geeks are doomed to stay geeks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;bindingList.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
bindingList.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-datagridviewcomboboxcolumn-5.gif&#34; alt=&#34;datagridviewcomboboxcolumn with null option.&#34;&gt;&lt;/p&gt;
&lt;p&gt;When the user starts editing the record, the combobox will choose the first item in the list (A geeky person). Now we change this behaviour so that the actual PersonTypeCode is selected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_EditingControlShowing(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewEditingControlShowingEventArgs e)
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.CurrentCell.ColumnIndex == &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.Index)
{
BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; BindingSource;
Person person = bindingSource.Current &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Person;
BindingList&amp;lt;personType&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.FindPersonTypes(person);

DataGridViewComboBoxEditingControl comboBox = e.Control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DataGridViewComboBoxEditingControl;
comboBox.DataSource = bindingList;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person.PersonTypeCode != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
{
comboBox.SelectedValue = person.PersonTypeCode;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
{
comboBox.SelectedValue = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty;
}
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-datagridviewcomboboxcolumn-6.gif&#34; alt=&#34;datagridviewcomboboxcolumn with selected item.&#34;&gt;&lt;/p&gt;
&lt;p&gt;In order to make the DataGridView more usable we set the EditMode property to EditOnEnter. Selected values in the ComboBox are only commited when the user leaves the current cell. Handling the SelectionChangeCommited event on the ComboBox allows us to commit that value without requiring the user to leave the current cell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_EditingControlShowing(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewEditingControlShowingEventArgs e)
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.CurrentCell.ColumnIndex == &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.Index)
{
BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; BindingSource;
Person person = bindingSource.Current &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Person;
BindingList&amp;lt;personType&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.FindPersonTypes(person);

DataGridViewComboBoxEditingControl comboBox = e.Control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DataGridViewComboBoxEditingControl;
comboBox.DataSource = bindingList;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person.PersonTypeCode != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
{
comboBox.SelectedValue = person.PersonTypeCode;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
{
comboBox.SelectedValue = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty;
}

comboBox.SelectionChangeCommitted -= &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox_SelectionChangeCommitted;
comboBox.SelectionChangeCommitted += &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox_SelectionChangeCommitted;
}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; comboBox_SelectionChangeCommitted(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.EndEdit();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it&amp;rsquo;s up to you to apply these simple techniques and build great software. Feel free to download the complete source: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DataGridViewComboBoxBinding.zip&#34;&gt;DataGridViewComboBoxBinding.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Hide and unhide columns (or rows) in the DataGridView</title>
      <link>/post/2007-01-13-hide-and-unhide-columns-or-rows-in-the-datagridview/</link>
      <pubDate>Sat, 13 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-13-hide-and-unhide-columns-or-rows-in-the-datagridview/</guid>
      <description>
        
          &lt;p&gt;Once in a while i see the following question&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using the Visibile property of the DataGridViewColumn makes this a no-brainer. Let&amp;rsquo;s take the &lt;a href=&#34;http://www.timvw.be/developing-a-datasource-for-your-datagridview/&#34;&gt;Databound DataGridView&lt;/a&gt; and implement functionality to hide/unhide the quarterly results. All you have to do is add a DataGridViewButtonColumn and handle the DataGridView CellClick event as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_CellClick(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewCellEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e.ColumnIndex == &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnButton.Index)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; visible = !&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ1.Visible;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ1.Visible = visible;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ2.Visible = visible;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ3.Visible = visible;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ4.Visible = visible;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnButton.HeaderText = visible ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is how it looks like&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridview-hide.gif&#34; alt=&#34;screenshot of datagridview hiding columns&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridview-unhide.gif&#34; alt=&#34;screenshot of datagridview unhiding columns&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the updated source code for &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DataGridViewDataSource.zip&#34;&gt;DataGridViewDataSource.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Databinding a Nullable&lt;T&gt; property</title>
      <link>/post/2007-01-10-databinding-a-nullable-t-property/</link>
      <pubDate>Wed, 10 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-10-databinding-a-nullable-t-property/</guid>
      <description>
        
          &lt;p&gt;I find it frustrating that data binding does not really support Nullable&lt;!-- raw HTML omitted --&gt;. Anyway, it&amp;rsquo;s relatively easy to workaround this shortcoming&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; MyDataSource myDataSource;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
	{
		InitializeComponent();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MyDataSource();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.textBox1.DataBindings.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Double&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.textBox1.DataBindings[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;].Parse += &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Text_Parse;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Text_Parse( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, ConvertEventArgs e )
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( e.Value == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; || e.Value.ToString().Length == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
		{
			e.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; buttonTellMe_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.Double.HasValue)
		{
			MessageBox.Show(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The double is: &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.Double);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		{
			MessageBox.Show(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The double is null&amp;#34;&lt;/span&gt;);
		}
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyDataSource&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double?&lt;/span&gt; _double;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double?&lt;/span&gt; Double
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;._double; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;._double = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-nullabletext1.gif&#34; alt=&#34;screenshot of double value in textbox&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-nullabletext2.gif&#34; alt=&#34;screenshot of null value in textbox&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>The NullableDateAndTimePicker Control</title>
      <link>/post/2007-01-07-the-nullabledateandtimepicker-control/</link>
      <pubDate>Sun, 07 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-07-the-nullabledateandtimepicker-control/</guid>
      <description>
        
          &lt;p&gt;A while ago i presented the concept of a &lt;a href=&#34;http://www.timvw.be/a-dateandtimepicker-control/&#34;&gt;DateAndTimePicker&lt;/a&gt;. Today someone asked if it&amp;rsquo;s possible to give the user an option to &amp;lsquo;not choose a DateTime&amp;rsquo;. I created a UserControl that has both a DateAndTimePicker and a CheckBox with a Value property of Nullable&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dateandtimepicker-nullable-1.gif&#34; alt=&#34;screenshot of the nullable dateandtimepicker&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dateandtimepicker-nullable-2.gif&#34; alt=&#34;screenshot of the nullable dateandtimepicker&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the updated &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DateAndTimePicker.zip&#34;&gt;DateAndTimePicker.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Enable and disable TabPages on a TabControl</title>
      <link>/post/2007-01-06-enable-and-disable-tabpages-on-a-tabcontrol/</link>
      <pubDate>Sat, 06 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-06-enable-and-disable-tabpages-on-a-tabcontrol/</guid>
      <description>
        
          &lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/disabled-tabcontrol-1.gif&#34; alt=&#34;screenshot of tabcontrol with disabled tabpages&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/disabled-tabcontrol-2.gif&#34; alt=&#34;screenshot of tabcontrol with disabled tabpages&#34;&gt;&lt;/p&gt;
&lt;p&gt;Apparently &lt;a href=&#34;http://www.microsoft.com&#34;&gt;Microsoft&lt;/a&gt; choose not to implement support for disabled &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.tabpage.aspx&#34;&gt;TabPage&lt;/a&gt;s. The reason seems to be that it&amp;rsquo;s against their &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/aa511493.aspx&#34;&gt;Guidelines for Tabs&lt;/a&gt;. Let&amp;rsquo;s ignore the guideline and implement the support anyway. First we set the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.tabcontrol.drawmode.aspx&#34;&gt;DrawMode&lt;/a&gt; property of the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.tabcontrol.aspx&#34;&gt;TabControl&lt;/a&gt; to &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.tabdrawmode.aspx&#34;&gt;OwnerDrawFixed&lt;/a&gt;. Next we add an eventhandler for the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.tabcontrol.drawitem.aspx&#34;&gt;DrawItem&lt;/a&gt; Event&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; tabControl1_DrawItem(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DrawItemEventArgs e)
{
	TabControl tabControl = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; TabControl;
	TabPage tabPage = tabControl.TabPages[e.Index];
	Rectangle tabRectangle = tabControl.GetTabRect(e.Index);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tabControl.Alignment == TabAlignment.Left || tabControl.Alignment == TabAlignment.Right)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; rotateAngle = &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tabControl.Alignment == TabAlignment.Left)
		{
			rotateAngle = &lt;span style=&#34;color:#ae81ff&#34;&gt;270&lt;/span&gt;;
		}

		PointF cp = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PointF(tabRectangle.Left + (tabRectangle.Width / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), tabRectangle.Top + (tabRectangle.Height / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
		e.Graphics.TranslateTransform(cp.X, cp.Y);
		e.Graphics.RotateTransform(rotateAngle);
		tabRectangle = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Rectangle(-(tabRectangle.Height / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), -(tabRectangle.Width / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), tabRectangle.Height, tabRectangle.Width);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (SolidBrush foreBrush = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SolidBrush(tabPage.ForeColor))
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (SolidBrush backBrush = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SolidBrush(tabPage.BackColor))
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!tabPage.Enabled)
			{
				foreBrush.Color = SystemColors.GrayText;
			}

			e.Graphics.FillRectangle(backBrush, tabRectangle);

			&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (StringFormat stringFormat = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringFormat())
			{
				stringFormat.Alignment = StringAlignment.Center;
				stringFormat.LineAlignment = StringAlignment.Center;
				e.Graphics.DrawString(tabPage.Text, e.Font, foreBrush, tabRectangle, stringFormat);
			}
		}
	}

	e.Graphics.ResetTransform();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we handle the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.tabcontrol.selecting.aspx&#34;&gt;Selecting&lt;/a&gt; Event as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; tabControl1_Selecting(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, TabControlCancelEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!e.TabPage.Enabled)
	{
		e.Cancel = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works pretty fine, but we still have to make sure that the TabPages are Invalidated when the users changes their &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.enabled.aspx&#34;&gt;Enabled&lt;/a&gt; property. We do this by attaching and detaching an eventhandler for their &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.enabledchanged.aspx&#34;&gt;EnabledChanged&lt;/a&gt; Event when they&amp;rsquo;re &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.controladded.aspx&#34;&gt;added&lt;/a&gt; and &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.controlremoved.aspx&#34;&gt;removed&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; tabControl1_ControlAdded(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, ControlEventArgs e)
{
	TabPage tabPage = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; TabPage;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tabPage != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
	{
		tabPage.EnabledChanged += &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EventHandler(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.tabPage_EnabledChanged);
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; tabControl1_ControlRemoved(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, ControlEventArgs e)
{
	TabPage tabPage = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; TabPage;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tabPage != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
	{
		tabPage.EnabledChanged -= &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EventHandler(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.tabPage_EnabledChanged);
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; tabPage_EnabledChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	TabPage tabPage = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; TabPage;
	TabControl tabControl = tabPage.Parent &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; TabControl;
	tabControl.Invalidate(tabPage.ClientRectangle);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to download the demo application: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DisabledTabControl.zip&#34;&gt;DisabledTabControl.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Developing a DataSource for your DataGridView</title>
      <link>/post/2007-01-04-developing-a-datasource-for-your-datagridview/</link>
      <pubDate>Thu, 04 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-04-developing-a-datasource-for-your-datagridview/</guid>
      <description>
        
          &lt;p&gt;Imagine that you want to develop a DataSource that is capable to represent the data displayed in the following excel sheet&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dgv-ds-1.gif&#34; alt=&#34;screenshot of excel sheet&#34;&gt;&lt;/p&gt;
&lt;p&gt;For each region the values are given. The YEAR value is defined as the sum of Q1, Q2, Q3 and Q4, eg: for EMEA this is SUM(B2:E2). The GLOBAL values are calculated as the sum of the regions for the quarter, eg: for Q1 this is SUM(B2:B5). We&amp;rsquo;ll start with the easiest task: Add columns to the DGV and define the headers&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dgv-ds-2.gif&#34; alt=&#34;screenshot of first datagridview&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we look at the DGV it becomes clear that each row exists out of a Label, values for Q1 to Q4 and the sum of those values. If we translate this to code we end up with something like: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/SalesRow.txt&#34;&gt;SalesRow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve implemented &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx&#34;&gt;INotifyPropertyChanged&lt;/a&gt; because i want the DGV to request and display the updated Year value when one of the quarterly values changes. Configure the Columns to use these properties as DataPropertyName and add a couple of SalesRow instances to a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/ms132679.aspx&#34;&gt;BindingList&lt;/a&gt; that we use as DataSource for the DGV.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
	InitializeComponent();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnRegion.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Label&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ1.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q1&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ2.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q2&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ3.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q3&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ4.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q4&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnYear.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Year&amp;#34;&lt;/span&gt;;

	BindingList&amp;lt;salesRow&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;salesRow&amp;gt;();
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EMEA&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; }));
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LATAM&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt; }));
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;APAC&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; }));
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NORAM&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt; }));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = bindingList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that the Year value is nicely updated when the user changes one of the quarterly values&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dgv-ds-3.gif&#34; alt=&#34;screenshot of datagridview with rows for regions.&#34;&gt;&lt;/p&gt;
&lt;p&gt;In order to calculate the GLOBAL values we inherit from the SalesRow class and override the implementation for the Q1, Q2, Q3, Q4 and Year properties: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/GlobalSalesRow.txt&#34;&gt;GlobalSalesRow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally we can wrap everyting in a &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/SalesRows.txt&#34;&gt;SalesRows&lt;/a&gt; class to represent our Data. Hooking this code up is as easy as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
	InitializeComponent();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnRegion.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Label&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ1.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q1&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ2.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q2&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ3.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q3&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ4.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q4&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnYear.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Year&amp;#34;&lt;/span&gt;;

	BindingList&amp;lt;salesRow&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;salesRow&amp;gt;();
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EMEA&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; }));
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LATAM&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt; }));
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;APAC&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; }));
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NORAM&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt; }));

	SalesRows salesRows = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRows(bindingList);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rows&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = salesRows;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is a screenshot of the result&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dgv-ds-4.gif&#34; alt=&#34;screenshot of the complete implementation at work&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the complete project: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DataGridViewDataSource.zip&#34;&gt;DataGridViewDataSource.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Print a Control</title>
      <link>/post/2006-12-31-print-a-control/</link>
      <pubDate>Sun, 31 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-31-print-a-control/</guid>
      <description>
        
          &lt;p&gt;A while ago i discovered the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.drawtobitmap.aspx&#34;&gt;DrawToBitmap&lt;/a&gt; method on the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.aspx&#34;&gt;Control&lt;/a&gt; class. The availability of this method makes it relatively easy to implement a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.drawing.printing.printpageeventhandler.aspx&#34;&gt;PrintPageEventHandler&lt;/a&gt; for the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.drawing.printing.printdocument.aspx&#34;&gt;PrintDocument&lt;/a&gt; class. Here is an example implementation that prints a DataGridView&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; buttonPrint_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.printDocument1.Print();
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; printDocument1_BeginPrint(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, PrintEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.currentPage = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; printDocument1_PrintPage(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, System.Drawing.Printing.PrintPageEventArgs e)
{
	Size oldSize = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Size;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Height = Math.Max(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Height, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.PreferredSize.Height);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Width = Math.Max(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Width, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.PreferredSize.Width);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; requiredPagesForWidth = ((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Width / e.MarginBounds.Width) + &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; requiredPagesForHeight = ((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Height / e.MarginBounds.Height) + &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; requiredPages = requiredPagesForWidth * requiredPagesForHeight;
	e.HasMorePages = (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.currentPage &amp;lt; requiredPages - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; posX = ((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.currentPage % requiredPagesForWidth) &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;* e.MarginBounds.Width; 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; posY = ((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.currentPage / requiredPagesForWidth) &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;* e.MarginBounds.Height; 
	Graphics graphics = e.Graphics; 
	Bitmap bitmap = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Bitmap(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Width, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Height); 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DrawToBitmap(bitmap, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Bounds); 
	graphics.DrawImage(bitmap, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Rectangle(e.MarginBounds.X, e.MarginBounds.Y, e.MarginBounds.Width, e.MarginBounds.Height), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Rectangle(posX, posY, e.MarginBounds.Width, e.MarginBounds.Height), GraphicsUnit.Pixel); 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Size = oldSize; 
	++&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.currentPage; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that you understand the main idea, let&amp;rsquo;s wrap it in a class and make it reusable: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ResizedControlPrintPageEventHandler.txt&#34;&gt;ResizedControlPrintPageEventHandler&lt;/a&gt;. Using this class is as simple as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Initialise a controlPrintPageEventHandler and register the PrintPage method...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ResizedControlPrintPageEventHandler resizedControlPrintPageEventHandler = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ResizedControlPrintPageEventHandler(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1);
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.printDocument1.PrintPage += resizedControlPrintPageEventHandler.PrintPage;

&lt;span style=&#34;color:#75715e&#34;&gt;// Print the control
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; buttonPrint_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.printDocument1.Print();
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Give the user a preview
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; buttonPreview_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.printPreviewDialog1.Show();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are a couple of screenshots&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/print-datagridview1.gif&#34; alt=&#34;Screenshot of demo application that has a datagridview with scrollbars.&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/print-datagridview2.gif&#34; alt=&#34;Screenshot of print preview. Notice that the scrollbars are gone.&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/print-datagridview3.gif&#34; alt=&#34;Screenshot of the print document.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the class and demo application: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ControlPrintPageEventHandler.zip&#34;&gt;ControlPrintPageEventHandler.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Drag and Drop Microsoft Office Outlook Contacts on your WinForm</title>
      <link>/post/2006-12-19-drag-and-drop-microsoft-office-outlook-contacts-on-your-winform/</link>
      <pubDate>Tue, 19 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-19-drag-and-drop-microsoft-office-outlook-contacts-on-your-winform/</guid>
      <description>
        
          &lt;p&gt;Earlier today i saw someone that wanted to know how to drag and drop Microsoft Office Outlook Contacts on his winform (and get the data of the contact). Here are the few lines of code that do what he asked for&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in the constructor of the form (or in the InitializeComponent method if you set it via the Designer)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.AllowDrop = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;// handle the DragOver event
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_DragOver(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DragEventArgs e)
{
	e.Effect = DragDropEffects.All;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// handle the DragDrop event
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_DragDrop(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DragEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text = (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)e.Data.GetData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.label1.Text = text;

	&lt;span style=&#34;color:#75715e&#34;&gt;// for more finegrained access to the data
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//string[] lines = text.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/outlookcontactdragdrop.jpg&#34; alt=&#34;screenshot of outlook contact that was dragged and dropped on the form&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>A DateAndTimePicker control</title>
      <link>/post/2006-12-18-a-dateandtimepicker-control/</link>
      <pubDate>Mon, 18 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-18-a-dateandtimepicker-control/</guid>
      <description>
        
          &lt;p&gt;The &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datetimepicker.aspx&#34;&gt;DateTimePicker&lt;/a&gt; control allows the user to input a Date or a Time. The problem is that you can&amp;rsquo;t let the user pick both a date and a time with one instance of the control (unless you set the CustomFormat property and give up the &amp;lsquo;nice&amp;rsquo; ui) so i decided to build my own DateAndTimePicker control&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dateandtimepicker.jpg&#34; alt=&#34;screenshot of the dateandtimepicker control&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download and extended the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DateAndTimePicker.zip&#34;&gt;DateAndTimePicker.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Simple OutlookBar Control</title>
      <link>/post/2006-12-17-simple-outlookbar-control/</link>
      <pubDate>Sun, 17 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-17-simple-outlookbar-control/</guid>
      <description>
        
          &lt;p&gt;Earlier this evening i wanted to experiment with the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.toolstrip.aspx&#34;&gt;ToolStrip&lt;/a&gt; class so i decided to design a simple OutlookBar Control and a demo application that uses this control. Feel free to download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/OutlookBar.zip&#34;&gt;OutlookBar.zip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/outlookbardemo.jpg&#34; alt=&#34;screenshot of OutlookBar demo&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>What goes up must come down...</title>
      <link>/post/2006-12-13-what-goes-up-must-come-down/</link>
      <pubDate>Wed, 13 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-13-what-goes-up-must-come-down/</guid>
      <description>
        
          &lt;p&gt;What goes up must come down&amp;hellip; So you might think that after each CellMouseDown event you recieve a CellMouseUp event&amp;hellip; Well, here is some code that proves that isn&amp;rsquo;t always true&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; lastEvent;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
	{
		InitializeComponent();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.ColumnCount = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.RowCount = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; LastEvent
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lastEvent; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lastEvent == &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
			{
				MessageBox.Show(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i&amp;#39;ve detected two &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; after each other&amp;#34;&lt;/span&gt;);
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lastEvent = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_CellMouseDown(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewCellMouseEventArgs e)
	{
		LastEvent = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MouseDown&amp;#34;&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_CellMouseUp(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewCellMouseEventArgs e)
	{
		LastEvent = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MouseUp&amp;#34;&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And with a bit of a twisted optical mouse it&amp;rsquo;s pretty easy to see the following MessageBox&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/mousedown.jpg&#34; alt=&#34;MessageBox that says the MouseDownEvent was captured two times after each other&#34;&gt;&lt;/p&gt;
&lt;p&gt;After a bit of research i also found the following at &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.mouseeventargs.aspx&#34;&gt;MouseEventArgs&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;

        
      </description>
    </item>
    
    <item>
      <title>Master-Slave for databound ComboBoxes</title>
      <link>/post/2006-11-25-master-slave-for-databound-comboboxes/</link>
      <pubDate>Sat, 25 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-11-25-master-slave-for-databound-comboboxes/</guid>
      <description>
        
          &lt;p&gt;In most examples on the Internet you&amp;rsquo;ll find that the Master has a property that returns the allowed Slaves. Here&amp;rsquo;s an example that does not require such a property. Let&amp;rsquo;s start with a simple class that represents a Person.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name = name;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we define a class to hold the choosen Master and Slave persons.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MasterSlave&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Person master;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Person slave;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MasterSlave()
	{
		Person[] masters = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.GetMasters();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.master = masters[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];

		Person[] slaves = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.GetSlaves(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.master);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.slave = slaves[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person Master
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.master; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.master = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person Slave
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.slave; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.slave = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person[] GetMasters()
	{
		List&amp;lt;person&amp;gt; masters = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;person&amp;gt;();
		masters.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master1&amp;#34;&lt;/span&gt;));
		masters.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master2&amp;#34;&lt;/span&gt;));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; masters.ToArray();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person[] GetSlaves(Person person)
	{
		List&amp;lt;person&amp;gt; slaves = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;person&amp;gt;();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (person.Name)
		{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master1&amp;#34;&lt;/span&gt;:
		slaves.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master1-slave1&amp;#34;&lt;/span&gt;));
		slaves.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master1-slave2&amp;#34;&lt;/span&gt;));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master2&amp;#34;&lt;/span&gt;:
		slaves.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master2-slave1&amp;#34;&lt;/span&gt;));
		slaves.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master2-slave2&amp;#34;&lt;/span&gt;));
		slaves.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master2-slave3&amp;#34;&lt;/span&gt;));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; slaves.ToArray();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can hook these objects to your Form.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
	{
		InitializeComponent();

		MasterSlave masterSlave = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MasterSlave();

		BindingSource masterBindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingSource();
		masterBindingSource.DataSource = masterSlave.GetMasters();
		masterBindingSource.CurrentChanged += &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EventHandler(masterBindingSource_CurrentChanged);

		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxMaster.DataSource = masterBindingSource;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxMaster.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxMaster.DataBindings.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SelectedItem&amp;#34;&lt;/span&gt;, masterSlave, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Master&amp;#34;&lt;/span&gt;);

		BindingSource slaveBindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingSource();
		slaveBindingSource.DataSource = masterSlave.GetSlaves(masterBindingSource.Current &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Person);

		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxSlave.DataSource = slaveBindingSource;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxSlave.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxSlave.DataBindings.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SelectedItem&amp;#34;&lt;/span&gt;, masterSlave, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Slave&amp;#34;&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; masterBindingSource_CurrentChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
	{
		BindingSource masterBindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxMaster.DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; BindingSource;
		Person master = masterBindingSource.Current &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Person;

		BindingSource slaveBindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxSlave.DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; BindingSource;
		MasterSlave masterSlave = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxSlave.DataBindings[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SelectedItem&amp;#34;&lt;/span&gt;].DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; MasterSlave;
		slaveBindingSource.DataSource = masterSlave.GetSlaves(master);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Screenshot of DataGridViews</title>
      <link>/post/2006-10-08-screenshot-of-datagridviews/</link>
      <pubDate>Sun, 08 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-10-08-screenshot-of-datagridviews/</guid>
      <description>
        
          &lt;p&gt;The problem with a regular screenshot is that you only get to see a part of the DataGridViews. Here&amp;rsquo;s an example of a typical form&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridviews-with-scrollbars.jpg&#34; alt=&#34;image of datagridview with scrollbars&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is a snippet that makes a screenshot of the complete DataGridViews&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;List&amp;lt;bitmap&amp;gt; bitmaps = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;bitmap&amp;gt;();
Size size = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Size();

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; ++i) 
{ 
	&lt;span style=&#34;color:#75715e&#34;&gt;// lookup the datagridview 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	DataGridView dataGridView = (DataGridView)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Controls[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dataGridView&amp;#34;&lt;/span&gt; + i]; 
	&lt;span style=&#34;color:#75715e&#34;&gt;// maximize the datagridview size (choosing between current and preferred) 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	Size oldSize = dataGridView.Size; 
	Size newSize = dataGridView.PreferredSize; 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dataGridView.Size.Width &amp;gt; newSize.Width)
	{
		newSize.Width = dataGridView.Size.Width;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dataGridView.Size.Height &amp;gt; newSize.Height)
	{
		newSize.Height = dataGridView.Size.Height;
	}

	dataGridView.Size = newSize;

	&lt;span style=&#34;color:#75715e&#34;&gt;// draw the datagridview into a bitmap
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	Bitmap bitmap = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Bitmap(dataGridView.Width, dataGridView.Height);
	dataGridView.DrawToBitmap(bitmap, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Rectangle(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, dataGridView.Width, dataGridView.Height));

	&lt;span style=&#34;color:#75715e&#34;&gt;// restore the datagridview to it&amp;#39;s original size
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	dataGridView.Size = oldSize;

	bitmaps.Add(bitmap);

	&lt;span style=&#34;color:#75715e&#34;&gt;// update total bitmap size
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (newSize.Width &amp;gt; size.Width)
	{
		size.Width = newSize.Width;
	}
	size.Height += newSize.Height;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// copy all the bitmaps into one large bitmap
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Bitmap bitmapComplete = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Bitmap(size.Width, size.Height);
Graphics g = Graphics.FromImage(bitmapComplete);

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; height = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; ++i) 
{ 
	g.DrawImageUnscaled(bitmaps[i - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, height); 
	height += bitmaps[i - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].Height; 
} 

&lt;span style=&#34;color:#75715e&#34;&gt;// bitmapComplete is ready for use 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// eg: pictureBox1.Image = bitmapComplete 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// eg: bitmapComplete.Save(@&amp;#34;C:\screenshot.jpg&amp;#34;, ImageFormat.Jpeg); 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridviews-without-scrollbars.jpg&#34; alt=&#34;image of generated screenshot&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>DataGridView with EditOnEnter as EditMode</title>
      <link>/post/2006-09-16-datagridview-with-editonenter-as-editmode/</link>
      <pubDate>Sat, 16 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-16-datagridview-with-editonenter-as-editmode/</guid>
      <description>
        
          &lt;p&gt;Earlier this week i found that when a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx&#34;&gt;DataGridView&lt;/a&gt; has it&amp;rsquo;s &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridview.editmode.aspx&#34;&gt;EditMode&lt;/a&gt; property set to &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridvieweditmode.aspx&#34;&gt;EditOnEnter&lt;/a&gt; the user cannot select an entire row by clicking on the row header. This prevents the user from being able to delete a row. A couple of websearches later i found a &lt;a href=&#34;http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=98504&#34;&gt;bugreport&lt;/a&gt; but the proposed workarounds didn&amp;rsquo;t work for me 🙁 Here is a workaround that does work for me&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_MouseClick( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, MouseEventArgs e ) 
{
	DataGridView.HitTestInfo hitInfo = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.HitTest(e.X, e.Y);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( hitInfo.Type == DataGridViewHitTestType.RowHeader ) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.EditMode = DataGridViewEditMode.EditOnKeystrokeOrF2;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.EndEdit();
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.EditMode = DataGridViewEditMode.EditOnEnter;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Drag and Drop on a DataGridView</title>
      <link>/post/2006-09-16-drag-and-drop-on-a-datagridview/</link>
      <pubDate>Sat, 16 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-16-drag-and-drop-on-a-datagridview/</guid>
      <description>
        
          &lt;p&gt;Here is a bit of sample code that allows you to drag and drop a cellvalue in a DataGridView (don&amp;rsquo;t forget to set the AllowDrop property of the DataGridView to true). Notice that you need to translate the X and Y properties of the DragEventArgs first (unlike the X and Y properties of the MouseEventArgs)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_MouseDown( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, MouseEventArgs e )
{
	DataGridView.HitTestInfo info = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.HitTest( e.X, e.Y );
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( info.RowIndex != -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; info.ColumnIndex != -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
	{
		Object &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Rows[info.RowIndex].Cells[info.ColumnIndex].Value;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; )
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Rows[info.RowIndex].Cells[info.ColumnIndex].Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.DoDragDrop( &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;, DragDropEffects.Move );
		}
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_DragDrop( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DragEventArgs e )
{
	Point p = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.PointToClient( &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Point( e.X, e.Y ) );
	DataGridView.HitTestInfo info = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.HitTest( p.X, p.Y );
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( info.RowIndex != -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; info.ColumnIndex != -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
	{
		Object &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; = (Object)e.Data.GetData( &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; ) );
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Rows[info.RowIndex].Cells[info.ColumnIndex].Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_DragEnter( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DragEventArgs e )
{
	e.Effect = DragDropEffects.Move;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Inconsistent Drag and Drop API</title>
      <link>/post/2006-09-16-inconsistent-drag-and-drop-api/</link>
      <pubDate>Sat, 16 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-16-inconsistent-drag-and-drop-api/</guid>
      <description>
        
          &lt;p&gt;Every System.Windows.Forms.Control has the following events&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public event DragEventHandler &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.dragdrop.aspx&#34;&gt;DragDrop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;public event DragEventHandler &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.dragenter.aspx&#34;&gt;DragEnter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;public event EventHandler &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.dragleave.aspx&#34;&gt;DragLeave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;public event DragEventHandler &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.dragover.aspx&#34;&gt;DragOver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means, when the user drags something away of the control, you can&amp;rsquo;t access the data anymore (unless you cached it somewhere when the DragEnter or DragOver events occured). Here is an extract from Microsoft patterns and practives on &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/ms229011.aspx&#34;&gt;Event Design&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;

        
      </description>
    </item>
    
    <item>
      <title>Adding DataGridViewColumns (lots of them)</title>
      <link>/post/2006-09-14-adding-datagridviewcolumns-lots-of-them/</link>
      <pubDate>Thu, 14 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-14-adding-datagridviewcolumns-lots-of-them/</guid>
      <description>
        
          &lt;p&gt;Last couple of days i&amp;rsquo;ve been trying to add a couple (750+) columns into a DataGridView. Initially i tried the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.ColumnCount = &lt;span style=&#34;color:#ae81ff&#34;&gt;750&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code above results in the following error: &lt;strong&gt;Sum of the columns&#39; FillWeight values cannot exceed 65535.&lt;/strong&gt; Then i tried the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;DataGridViewColumn[] columns = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataGridViewColumn[&lt;span style=&#34;color:#ae81ff&#34;&gt;750&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; columns.Length; ++i ) 
{ 
	DataGridViewColumn column = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataGridViewColumn(); 
	column.CellTemplate = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataGridViewTextBoxCell(); 
	column.FillWeight = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; columns[i] = column; 
} 
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Columns.AddRange( columns );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This results in the following error: &lt;strong&gt;At least one of the DataGridView control&amp;rsquo;s columns has no cell template.&lt;/strong&gt; Thus i tried the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;DataGridViewColumn[] columns = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataGridViewColumn[&lt;span style=&#34;color:#ae81ff&#34;&gt;750&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; columns.Length; ++i ) 
{ 
	DataGridViewColumn column = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataGridViewTextBoxColumn(); 
	column.FillWeight = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; columns[i] = column; 
} 
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Columns.AddRange( columns ); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code works but the AddRange call took about 15 seconds to complete. With the aid of a collegue and &lt;a href=&#34;http://www.aisto.com/roeder/dotnet/&#34;&gt;Reflector&lt;/a&gt; i set the ColumnHeadersHeightSize to DisableResizing. This reduced the calltime to less than 0.5 seconds 🙂&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Implementing Master/Detail for Custom Objects with DataGridViewComboBoxColumns</title>
      <link>/post/2006-09-10-implementing-masterdetail-for-custom-objects-with-datagridviewcomboboxcolumns/</link>
      <pubDate>Sun, 10 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-10-implementing-masterdetail-for-custom-objects-with-datagridviewcomboboxcolumns/</guid>
      <description>
        
          &lt;p&gt;Imagine you have the following two classes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parent&lt;/span&gt; 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Parent( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name ) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id = id;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name = name;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Id 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name; }
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt; : Parent 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; parentId;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Child( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; parentId, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name ) : &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;( id, name ) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.parentId = parentId;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ParentId 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.parentId; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the first ComboBoxColumn you display a list of possible Parents. In the second ComboBoxColumn you display Children, but only those that belong to the Chosen Parent. Here is how it goes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Object selectedValue;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1() 
	{
		InitializeComponent();

		&lt;span style=&#34;color:#75715e&#34;&gt;// Add a couple of Parents
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; ++i ) 
		{ 
			Parent parent = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Parent( i, String.Format( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent{0:00}&amp;#34;&lt;/span&gt;, i ) ); 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column1.Items.Add( parent ); 
			&lt;span style=&#34;color:#75715e&#34;&gt;// Add a couple of Children to each parent 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; ++j ) 
			{ 
				Child child = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Child( j, i, String.Format( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child{0:00}&amp;#34;&lt;/span&gt;, i * &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; + j ) ); 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column2.Items.Add( child ); 
			} 
		} 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column1.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;; 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column2.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;; 
	} 
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_CellParsing( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewCellParsingEventArgs e ) 
	{ 
		e.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.selectedValue; 
		e.ParsingApplied = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; 
	} 
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_EditingControlShowing( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewEditingControlShowingEventArgs e ) 
	{ 
		ComboBox cb = e.Control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ComboBox; 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( cb != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; ) 
		{ 
			&lt;span style=&#34;color:#75715e&#34;&gt;// remove all the children that do not belong to the choosen parent 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; currentColumnIndex = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.CurrentCell.ColumnIndex; 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( currentColumnIndex == &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) 
			{ 
				cb.Items.Clear(); 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; currentRowIndex = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.CurrentCell.RowIndex; 
				Object currentCellValue = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Rows[currentRowIndex].Cells[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].Value; 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( currentCellValue != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; ) 
				{ 
					&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; parentId = ( (Parent)currentCellValue ).Id; 
					&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ( Child child &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column2.Items ) 
					{ 
						&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( child.ParentId == parentId ) 
						{ 
							cb.Items.Add( child ); 
						} 
					} 
				} 
			} 
			cb.SelectedIndexChanged -= cb_SelectedIndexChanged; 
			cb.SelectedIndexChanged += cb_SelectedIndexChanged; 
		} 
		
		&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; cb_SelectedIndexChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e) 
		{ 
			ComboBox comboBox = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ComboBox; 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.selectedValue = comboBox.SelectedItem; 
		} 
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Using DataGridViewComboBoxColumn with Custom Objects</title>
      <link>/post/2006-09-10-using-datagridviewcomboboxcolumn-with-custom-objects/</link>
      <pubDate>Sun, 10 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-10-using-datagridviewcomboboxcolumn-with-custom-objects/</guid>
      <description>
        
          &lt;p&gt;Earlier today i was playing with the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx&#34;&gt;DataGridView&lt;/a&gt; control. I wanted to have a couple of &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/xwx934x7.aspx&#34;&gt;DataGridViewComboBoxColumn&lt;/a&gt;s in order to limit the available input options for the user. The documentation clearly mentions the following&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is sample of a custom object&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Slot&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; DateTime dateTime;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Slot( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id, DateTime dateTime ) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id = id;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTime = dateTime;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Id {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DateTime DateTime {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTime; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is the workaround for a one to one mapping&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form 
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// here we&amp;#39;ll store the value the user selected in one of the comboboxcolumns
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Object selectedValue;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1() 
	{
		InitializeComponent();
		selectedValues = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Object[&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Columns.Count];

		&lt;span style=&#34;color:#75715e&#34;&gt;// create a couple of slots an add them to the comboboxcolumns
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; ++i ) 
		{ 
			Slot slot = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Slot( i, DateTime.Now.AddDays( i ) ); 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column1.Items.Add( slot ); 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column2.Items.Add( slot ); 
		} 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column1.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTime&amp;#34;&lt;/span&gt;; 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column2.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;; 
	} 
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_CellParsing( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewCellParsingEventArgs e ) 
	{ 
		&lt;span style=&#34;color:#75715e&#34;&gt;// lookup the selected value 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		e.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.selectedValue; 
		e.ParsingApplied = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; 
	} 
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_EditingControlShowing( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewEditingControlShowingEventArgs e ) 
	{ 
		ComboBox cb = e.Control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ComboBox; 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( cb != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; ) 
		{ 
			cb.SelectedIndexChanged -= cb_SelectedIndexChanged; 
			cb.SelectedIndexChanged += cb_SelectedIndexChanged; 
		} 
	} 
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; cb_SelectedIndexChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e) 
	{ 
		ComboBox comboBox = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ComboBox; 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.selectedValue = comboBox.SelectedItem; 
	} 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Selecting custom Objects from a ComboBox</title>
      <link>/post/2006-09-03-selecting-custom-objects-from-a-combobox/</link>
      <pubDate>Sun, 03 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-03-selecting-custom-objects-from-a-combobox/</guid>
      <description>
        
          &lt;p&gt;Earlier this week someone asked me how he could select custom objects from a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.combobox.aspx&#34;&gt;ComboBox&lt;/a&gt;. Here is the code he used&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; FillComboBoxPersons(List&amp;lt;person&amp;gt; persons) 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.Items.Clear();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.Items.Add( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-- Select Person -------------&amp;#34;&lt;/span&gt; );
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ( Person person &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; persons ) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.Items.Add( person.Name );
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.SelectedIndex = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to get the selected item he then used the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.combobox.selectedindex.aspx&#34;&gt;SelectedIndex&lt;/a&gt; property to lookup the Person in a cache of the persons collection.&lt;/p&gt;
&lt;p&gt;Here is an approach that doesn&amp;rsquo;t require you to have a cache of the collection (Since the persons are already stored in the items)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; FillComboBoxPersons(List&amp;lt;person&amp;gt; persons) 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.Items.Clear();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.Items.Add( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-- Select Person -------------&amp;#34;&lt;/span&gt; );
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ( Person person &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; persons ) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.Items.Add( person );
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.SelectedIndex = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can easily access the selected item through the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.listcontrol.selectedvalue.aspx&#34;&gt;SelectedValue&lt;/a&gt; property.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Selecting custom Objects from a DataGridView</title>
      <link>/post/2006-09-03-selecting-custom-objects-from-a-datagridview/</link>
      <pubDate>Sun, 03 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-03-selecting-custom-objects-from-a-datagridview/</guid>
      <description>
        
          &lt;p&gt;Here is a way that allows the user to select a row (custom object properties are used as column values) from a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx&#34;&gt;DataGridView&lt;/a&gt; assuming that the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridview.selectionmode.aspx&#34;&gt;SelectionMode&lt;/a&gt; property is set FullRowSelect&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; FillDataGridViewPersons( List&amp;lt;person&amp;gt; persons ) 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.Rows.Clear();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; persons.Count; ++i ) 
	{ 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.Rows.Add(); 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.Rows[i].Tag = persons[i]; 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.Rows[i].SetValues( &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { persons[i].Id, persons[i].Name } ); 
	} 
} 

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; buttonDoSomething_Click( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e ) 
{ 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.SelectedRows.Count == &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) 
	{ 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; selectedRowIndex = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.SelectedCells[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].RowIndex; 
		Person selectedPerson = (Person)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.Rows[selectedRowIndex].Tag; 
		MessageBox.Show( String.Format( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You selected the person with 	} 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Windows Multimedia Video Capture</title>
      <link>/post/2006-06-26-windows-multimedia-video-capture/</link>
      <pubDate>Mon, 26 Jun 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-06-26-windows-multimedia-video-capture/</guid>
      <description>
        
          &lt;p&gt;On my computer the &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wia/wia/overviews/startpage.asp&#34;&gt;WIA (Windows Image Acquisition)&lt;/a&gt; API is SLOOOOOW. So i decided to give the &lt;a href=&#34;http://windowssdk.msdn.microsoft.com/en-us/library/ms713477(VS.80).aspx&#34;&gt;Windows Multimedia Video Capture&lt;/a&gt; API a try. I didn&amp;rsquo;t take long to &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconcreatingprototypesinmanagedcode.asp&#34;&gt;create the prototypes in Managed Code&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/library/en-us/cpguide/html/cpconcallingdllfunction.asp&#34;&gt;call the DLL functions&lt;/a&gt;. Everything runs really smooth now&amp;hellip; As always, feel free to download the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/testavicap32.zip&#34;&gt;testavicap32&lt;/a&gt; sources now!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Windows Image Acquisition</title>
      <link>/post/2006-06-24-windows-image-acquisition/</link>
      <pubDate>Sat, 24 Jun 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-06-24-windows-image-acquisition/</guid>
      <description>
        
          &lt;p&gt;Earlier today i decided to toy around with my webcam. A couple of websearches later i ended up at &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wia/wia/overviews/startpage.asp&#34;&gt;WIA (Windows Image Acquisition)&lt;/a&gt;. I found a couple of articles (eg: &lt;a href=&#34;http://msdn.microsoft.com/coding4fun/someassemblyrequired/lookatme/default.aspx&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://blogs.msdn.com/robburke/archive/2005/09/21/472541.aspx&#34;&gt;here&lt;/a&gt;) that showed how to capture images. I wanted to display the caputered image in a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.picturebox.aspx&#34;&gt;PictureBox&lt;/a&gt;. Unfortunately everybody seems to save the WIA.ImageFile to a file and then load the imagefile into a PictureBox. It&amp;rsquo;s obvious that i don&amp;rsquo;t want to save the image into a file first. Here is my workaround&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Load the ImageFile into a PictureBox
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;pbImage.Image = Image.FromStream(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MemorySteam((&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[]) imgf.FileData.get_BinaryData()));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Removing selected items from a ListBox</title>
      <link>/post/2006-02-16-removing-selected-items-from-a-listbox/</link>
      <pubDate>Thu, 16 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-02-16-removing-selected-items-from-a-listbox/</guid>
      <description>
        
          &lt;p&gt;Today i was experimenting with a couple of windows controls. For some reason i wasn&amp;rsquo;t able to remove the selected items from a &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwindowsformslistboxmemberstopic.asp&#34;&gt;ListBox&lt;/a&gt;. Here is the code that didn&amp;rsquo;t work&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vbnet&#34; data-lang=&#34;vbnet&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;For&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Each&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;As&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListBox1.SelectedIndices
	ListBox2.Items.Add(ListBox1.Items(index))
	ListBox1.Items.Remove(index)
&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;For&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is that when you remove an item from the collection the indices change. Here is a possible solution&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vbnet&#34; data-lang=&#34;vbnet&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Dim&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;As&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListBox1.SelectedIndex
&lt;span style=&#34;color:#66d9ef&#34;&gt;While&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;1
	ListBox2.Items.Add(ListBox1.Items(index))
	ListBox1.Items.Remove(index)
	index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListBox1.SelectedIndex
&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;While&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
  </channel>
</rss>
