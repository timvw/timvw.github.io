<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FSharp on Tim Van Wassenhove</title>
    <link>https://timvw.be/tags/fsharp/</link>
    <description>Recent content in FSharp on Tim Van Wassenhove</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://timvw.be/tags/fsharp/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Composing functions and leveraging scala.util.Try</title>
      <link>https://timvw.be/2016/01/29/composing-functions-and-leveraging-scala.util.try/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2016/01/29/composing-functions-and-leveraging-scala.util.try/</guid>
      <description>Last couple of days I have been hacking around trying to find a cute way to express the intent of my code. Typically it involves parsing some input, validating whatever rules that are in charge and persisting some values. In scala one can compose such a function by using the andThen method. Here is a concrete example:
def id(x: String) = x def parseInput = id _ def validate = id _ def persist = id _ def usecase1 = parseInput andThen validate andThen persist Inspired by the excellent series on Railway Oriented Programming series by Scott Wlaschin I wanted to take advange of scala.</description>
    </item>
    
    <item>
      <title>A parameterized active pattern to match the first elements of an array</title>
      <link>https://timvw.be/2014/01/30/a-parameterized-active-pattern-to-match-the-first-elements-of-an-array/</link>
      <pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2014/01/30/a-parameterized-active-pattern-to-match-the-first-elements-of-an-array/</guid>
      <description>Been writing code in F# for almost a year and never blogged about it. Time to change that. Earlier today someone asked the following on twitter:
Is it possible to pattern match the first part of an array in #FSharp? Something like | 1::2::3::tail but for arrays? #lazyweb
I accepted the challenge :)
let (|Array|_|) pattern toMatch = let patternLength = Array.length pattern let toMatchLength = Array.length toMatch let tailLength = toMatchLength - patternLength if patternLength &amp;gt; toMatchLength then None else let firstElementsAreEqual = [ 0 .</description>
    </item>
    
  </channel>
</rss>
