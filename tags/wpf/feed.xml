<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WPF on Tim Van Wassenhove</title><link>https://timvw.be/tags/wpf/</link><description>Recent content in WPF on Tim Van Wassenhove</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 06 Nov 2009 00:00:00 +0000</lastBuildDate><atom:link href="https://timvw.be/tags/wpf/feed.xml" rel="self" type="application/rss+xml"/><item><title>Couple of methods missing on ObservableCollection</title><link>https://timvw.be/2009/11/06/couple-of-methods-missing-on-observablecollection/</link><pubDate>Fri, 06 Nov 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/11/06/couple-of-methods-missing-on-observablecollection/</guid><description>Here are a couple of methods that are missing on ObservableCollection
public static class ObservableCollectionExtensions { public static void AddRange&amp;lt;T&amp;gt;(this ObservableCollection&amp;lt;T&amp;gt; observableCollection, IEnumerable&amp;lt;T&amp;gt; elements) { foreach (var element in elements) observableCollection.Add(element); } public static ObservableCollection&amp;lt;T&amp;gt; Create&amp;lt;T&amp;gt;(IEnumerable&amp;lt;T&amp;gt; elements) { var observableCollection = new ObservableCollection&amp;lt;T&amp;gt;(); observableCollection.AddRange(elements); return observableCollection; } }</description></item><item><title>Exploring graphical programming with Blend, Visual State Manager and Behaviors</title><link>https://timvw.be/2009/10/16/exploring-graphical-programming-with-blend-visual-state-manager-and-behaviors/</link><pubDate>Fri, 16 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/16/exploring-graphical-programming-with-blend-visual-state-manager-and-behaviors/</guid><description>A while ago i presented the ControlStateMachine and in Silverlight this concept is implemented as the Visual State Manager.
In my sokoban implementation i have a cellview which exists out of 6 canvasses but only two of them (one for the cell type and one for the piece type) are visible at any given point in time. I have implemented this with 6 properties CanvasXVisible (with X being Player, Box, Wall, Goal, Floor and Cell) in my ViewModel but a State Machine / Manager may help clarify how the visibility of the canvasses are related.</description></item><item><title>About databinding and composite views</title><link>https://timvw.be/2009/10/13/about-databinding-and-composite-views/</link><pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/13/about-databinding-and-composite-views/</guid><description>A couple of days ago i had a databound ItemsControl (collection of Model.Cell) which instantiated sub views (with their own viewmodel).
&amp;lt;grid&amp;gt; &amp;lt;grid.Resources&amp;gt; &amp;lt;dataTemplate x:Key=&amp;#34;CellTemplate&amp;#34;&amp;gt; &amp;lt;views:CellView /&amp;gt; &amp;lt;/dataTemplate&amp;gt; &amp;lt;/grid.Resources&amp;gt; &amp;lt;itemsControl ItemTemplate=&amp;#34;{StaticResource CellTemplate}&amp;#34; ItemsSource=&amp;#34;{Binding Cells}&amp;#34; /&amp;gt; &amp;lt;/grid&amp;gt; Because each CellViewModel needs to know which cell they manage i used the following dirty hack
public CellView() { Loaded += CellView_Loaded; } void CellView_Loaded(object sender, RoutedEventArgs e) { DataContext = new CellViewModel(DataContext); } Later on that day i realised there was a much cleaner solution: Let the BoardViewModel expose a collection of ViewModels.</description></item><item><title>Exploring M-V-VM</title><link>https://timvw.be/2009/10/13/exploring-m-v-vm/</link><pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/13/exploring-m-v-vm/</guid><description>A couple of years ago a collegue recommended Data Binding with Windows Forms 2.0: Programming Smart Client Data Applications with .NET and i noticed that my code started to gravitate towards an Model-View-ViewModel architecture. Due to shortcomings and painful experiences i gave up on databinding and began to use Passieve View instead.
Passive View doesn&amp;rsquo;t work (well) with smart views so i decided to give M-V-VM another because i really wanted to leverage WPF&amp;rsquo;s rich support for databinding.</description></item><item><title>ViewModel to translate domain messages to view events</title><link>https://timvw.be/2009/10/13/viewmodel-to-translate-domain-messages-to-view-events/</link><pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/13/viewmodel-to-translate-domain-messages-to-view-events/</guid><description>Here is an example of a ViewModel that translates domain messages to view events:
class GameViewModel : INotifyPropertyChanged, IListener&amp;lt;boardChanged&amp;gt; { public event PropertyChangedEventHandler PropertyChanged = delegate { }; public GameViewModel() { var messageBus = ServiceLocator.MessageBus; messageBus.Subscribe&amp;lt;boardChanged&amp;gt;(this); } void IListener&amp;lt;boardChanged&amp;gt;.Handle(BoardChanged message) { PropertyChanged(&amp;#34;Board&amp;#34;); } }</description></item><item><title>Sokoban: Creating graphics with Expression Design</title><link>https://timvw.be/2009/10/12/sokoban-creating-graphics-with-expression-design/</link><pubDate>Mon, 12 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/12/sokoban-creating-graphics-with-expression-design/</guid><description>Earlier this morning i decided to improve the graphics the little. I launched Expression Design, created a new image, and drew each possible cell and piece in a seperate layer. With this technique i can easily preview how a &amp;ldquo;Box&amp;rdquo; on &amp;ldquo;Goal&amp;rdquo; looks like.
For each layer i simply copied the XAML from Expression Design into my Cell.xaml file. Apparently all the layers are interpreted as a Canvas and the layer name determines their x:Name which makes it pretty easy to make the correct canvasses visible.</description></item><item><title>Silverlight wishlist</title><link>https://timvw.be/2009/10/10/silverlight-wishlist/</link><pubDate>Sat, 10 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/10/silverlight-wishlist/</guid><description>Here are the features that i would love to see in Silverlight:
Allow users to copy text from the UI (Or was the UX argument an excuse for playing with new toys?)
MSTEST (I know that [Here are the features that i would love to see in Silverlight:
Allow users to copy text from the UI (Or was the UX argument an excuse for playing with new toys?</description></item><item><title>About Expression Blend</title><link>https://timvw.be/2009/10/05/about-expression-blend/</link><pubDate>Mon, 05 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/05/about-expression-blend/</guid><description>At first i developed most WPF interfaces by writing XAML in the code view of Visual Studio. Those days are gone ðŸ˜‰ These days i find it a lot easier to use Expression Blend (eg: paths, animations and timelines) but i reallly don&amp;rsquo;t like it that Blend adds design-time information to the XAML that is intended to be used in production code. A tool should not add clutter to your code!</description></item></channel></rss>