<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hibernate on Tim Van Wassenhove</title>
    <link>https://timvw.be/tags/hibernate/</link>
    <description>Recent content in Hibernate on Tim Van Wassenhove</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Jun 2006 00:00:00 +0000</lastBuildDate><atom:link href="https://timvw.be/tags/hibernate/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A TableModel for Entity Beans</title>
      <link>https://timvw.be/2006/06/18/a-tablemodel-for-entity-beans/</link>
      <pubDate>Sun, 18 Jun 2006 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2006/06/18/a-tablemodel-for-entity-beans/</guid>
      <description>For my graduation project i needed a component that could display a list of Entity Beans. I found that JTable is such a component and with the help of custom TableCellRenderer and TableCellEditor components i was able to customize the rendering to my needs. In order to get the data into the JTable i implemented a custom TableModel, namely EntityTableModel. Now i can easily generate a JTable that displays Entity Beans</description>
    </item>
    
    <item>
      <title>Couple of screenshots of my graduation project</title>
      <link>https://timvw.be/2006/06/12/couple-of-screenshots-of-my-graduation-project/</link>
      <pubDate>Mon, 12 Jun 2006 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2006/06/12/couple-of-screenshots-of-my-graduation-project/</guid>
      <description>Here are a couple of screenshots of my graduation project i&amp;rsquo;ve been working on last couple of weeks. The GUI is built with Swing, the bussiness rules make extensive use of the Apache BeanUtils and Hibernate Validators packages and with PostgreSQL we have a solid database. Since it takes a while to load the EntityManagerFactory we&amp;rsquo;ve added a simple splashscreen:

The base screen displays a map with the tables in the restaurant.</description>
    </item>
    
    <item>
      <title>ManyToMany relationships with Java Persistence (JSR-220)</title>
      <link>https://timvw.be/2006/01/28/manytomany-relationships-with-java-persistence-jsr-220/</link>
      <pubDate>Sat, 28 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2006/01/28/manytomany-relationships-with-java-persistence-jsr-220/</guid>
      <description>The scenario is as following: each table can have many reservations, and each reservation can span many tables. Here is our first trial
// Table.java @ManyToMany( targetEntity=Reservation.class ) public List getReservations() {..} // Reservation.java @ManyToMany( targetEntity=Table.class ) public List getTables() {..} We end up with linktables tables_reservations and reservations_tables. This is not what we want. It should not be possible to remove a table when there are still reservations related to that table.</description>
    </item>
    
    <item>
      <title>OneToMany relationships with Java Persistence (JSR 220)</title>
      <link>https://timvw.be/2006/01/25/onetomany-relationships-with-java-persistence-jsr-220/</link>
      <pubDate>Wed, 25 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2006/01/25/onetomany-relationships-with-java-persistence-jsr-220/</guid>
      <description>Let&amp;rsquo;s experiment a bit with Hibernate. We want to model the tables employee and shift. Each employee has multiple shifts (and each shift belongs to an employee). We want an employee table and a shift table (which has the employee_id as a foreign key).
// Employee.java @OneToMany(targetEntity=Shift.class) public List getShifts() {...} // Shift.java @ManyToOne public Employee getEmployee() {...} The code above generates the following tables: employee, employee_shift and shift. Time to read the documentation and discover the mappedBy attribute.</description>
    </item>
    
  </channel>
</rss>
