<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NHibernate on Tim Van Wassenhove</title>
    <link>https://timvw.be/tags/nhibernate/</link>
    <description>Recent content in NHibernate on Tim Van Wassenhove</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Jun 2009 00:00:00 +0000</lastBuildDate><atom:link href="https://timvw.be/tags/nhibernate/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Beyond the basics: IPropertyAccessor</title>
      <link>https://timvw.be/2009/06/27/beyond-the-basics-ipropertyaccessor/</link>
      <pubDate>Sat, 27 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2009/06/27/beyond-the-basics-ipropertyaccessor/</guid>
      <description>Consider the following classes: an abstract Account and a concrete SavingAccount
abstract class Account { int Id { get; protected set; } int CustomerId { get; protected set; } abstract AccountType Type { get; } } class SavingAccount : Account, ISavingAccount { private SavingAccount() { } public SavingAccount(int customerId) { CustomerId = customerId; } public override AccountType Type { get { return AccountType.SavingAccount; } } } And this is the schema on which we want to map these classes</description>
    </item>
    
  </channel>
</rss>
