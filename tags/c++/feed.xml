<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Tim Van Wassenhove</title>
    <link>https://timvw.be/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Tim Van Wassenhove</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Apr 2006 00:00:00 +0000</lastBuildDate><atom:link href="https://timvw.be/tags/c++/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using .Net assemblies in your WIN32 application</title>
      <link>https://timvw.be/2006/04/22/using-.net-assemblies-in-your-win32-application/</link>
      <pubDate>Sat, 22 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2006/04/22/using-.net-assemblies-in-your-win32-application/</guid>
      <description>Imagine that you&amp;rsquo;ve got an extensive codebase using WIN32/MFC and don&amp;rsquo;t want to give that up but on the other hand you&amp;rsquo;d like to take advantage of DOTNET classes then here&amp;rsquo;s a simple solution: First we write an Interface and an Implementation with C# as following
public interface IQuoteClient { String getQuote(); Boolean setQuote(String quote); } public class QuoteClient : IQuoteClient { // COM requires a parameterless constructor public QuoteClient() { ; } public string getQuote() { return String.</description>
    </item>
    
    <item>
      <title>More marshalling...</title>
      <link>https://timvw.be/2006/03/01/more-marshalling.../</link>
      <pubDate>Wed, 01 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2006/03/01/more-marshalling.../</guid>
      <description>This snippet uses GetPrivateProfileString that is available in kernel32.dll. Apparently microsoft has decided to remove this useful function from the dotnet api.
[DllImport(&amp;#34;kernel32&amp;#34;, SetLastError=true)] extern int GetPrivateProfileString( String ^pSection, String ^pKey, String ^pDefault, StringBuilder ^pValue, int pBufferLen, String ^pFile ); StringBuilder ^buf = gcnew StringBuilder(256); GetPrivateProfileString( &amp;#34;logsection&amp;#34;, &amp;#34;file&amp;#34;, &amp;#34;default&amp;#34;, buf, buf-&amp;gt;Capacity, &amp;#34;example.ini&amp;#34; ); std::string \_log\_file = new string( (char*) Marshal::StringToHGlobalAnsi(logf).ToPointer() ); </description>
    </item>
    
    <item>
      <title>Reading unmanaged structs with .NET</title>
      <link>https://timvw.be/2006/02/27/reading-unmanaged-structs-with-.net/</link>
      <pubDate>Mon, 27 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2006/02/27/reading-unmanaged-structs-with-.net/</guid>
      <description>Last week i&amp;rsquo;ve spend a lot of time studying System::Runtime::InteropServices. It took me a while to figure out how i could read unmanaged structs with .NET System::IO. Here is a bit of sample code (Should be obvious enough to write a template or generic class for all sorts of structs, just like i did at the office)
typedef struct { char name[9]; int name; double sterr; } TEST; FileStream ^f = gcnew FileStream(&amp;#34;C:\\TEST.</description>
    </item>
    
    <item>
      <title>Preparing for my internship</title>
      <link>https://timvw.be/2006/02/11/preparing-for-my-internship/</link>
      <pubDate>Sat, 11 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2006/02/11/preparing-for-my-internship/</guid>
      <description>Only two more days before my internship starts. I&amp;rsquo;m a bit nervous and excited to dive into this adventure. Today i decided to fresh my knowledge of (MS)-C++ a bit up. I&amp;rsquo;ve read a tutorial on function pointers and naming conventions. A couple of weeks ago i already had a look at pointers to member functions.
#include &amp;lt;iostream&amp;gt; using namespace std; void customcallback() { cout &amp;lt;&amp;lt; &amp;#34;running custom callback&amp;#34; &amp;lt;&amp;lt; endl; } typedef int (\*method)(int, int); int sum(int a, int b) { return a + b; } method dosum() { return &amp;amp;sum; } int main() { void (\*plugin)() = NULL; plugin = &amp;amp;customcallback; plugin(); method mymethod = dosum(); cout &amp;lt;&amp;lt; mymethod(10, 4) &amp;lt;&amp;lt; endl; return 0; } </description>
    </item>
    
    <item>
      <title>A Unix daemon</title>
      <link>https://timvw.be/2004/06/25/a-unix-daemon/</link>
      <pubDate>Fri, 25 Jun 2004 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2004/06/25/a-unix-daemon/</guid>
      <description>Today i&amp;rsquo;ve written a daemon that communicates with the Netsize SMS Gateway. The daemon sources are available for download. You will have to implement your void getCode(double number, char * code) method yourself though.</description>
    </item>
    
  </channel>
</rss>
