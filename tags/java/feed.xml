<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Tim Van Wassenhove</title>
    <link>https://timvw.be/tags/java/</link>
    <description>Recent content in Java on Tim Van Wassenhove</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Jan 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://timvw.be/tags/java/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Get entire message body from an Intent</title>
      <link>https://timvw.be/2011/01/06/get-entire-message-body-from-an-intent/</link>
      <pubDate>Thu, 06 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2011/01/06/get-entire-message-body-from-an-intent/</guid>
      <description>I recently started programming the Android and noticed that most examples for processing an incoming SMS are not entirely correct.
An SMS message is limited to 160 characters. Current mobile phones break up a larger message in multiple messages transparently for the user. When Android notifies you about an incoming SMS it has all parts (of that large message) available. So here is how you reconstruct the entire message body from an Intent</description>
    </item>
    
    <item>
      <title>Presenting TimeOTPClient</title>
      <link>https://timvw.be/2008/08/23/presenting-timeotpclient/</link>
      <pubDate>Sat, 23 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2008/08/23/presenting-timeotpclient/</guid>
      <description>Because most people have their java enabled mobile phone with them, and I did not want to buy an expensive token generator I decided to write a MIDlet that can generate passwords as specified in the TOTP algorithm. This project is build with Sun Java Wireless Toolkit for CLDC. Feel free to download the sources, TimeOTPClient.zip.</description>
    </item>
    
    <item>
      <title>BBCode for Graphics2D</title>
      <link>https://timvw.be/2006/06/14/bbcode-for-graphics2d/</link>
      <pubDate>Wed, 14 Jun 2006 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2006/06/14/bbcode-for-graphics2d/</guid>
      <description>For my graduation project we needed the ability to print a couple of bills etc. Printing lines was pretty simple with the LinesPrinter i blogged about a while ago. We had two choices: either implement a specific print method for each module or implement a reusable markup system. Obviously we went for the second option and came up with something alike BBCode. The codes we implemented are
 [b]..[/b] for bold [i].</description>
    </item>
    
    <item>
      <title>Printing an array of strings</title>
      <link>https://timvw.be/2006/05/31/printing-an-array-of-strings/</link>
      <pubDate>Wed, 31 May 2006 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2006/05/31/printing-an-array-of-strings/</guid>
      <description>Yesterday i&amp;rsquo;ve been experimenting with Printing on the Java Platform. I needed to generate a printout of ordered menuitems on the default printer. It took a while before i found out there is translation needed between the coordinates of the Graphics device and the PageFormat. Here is my LinesPrinter. Here is an example of how you can use the class
ArrayList&amp;lt;string&amp;gt; lines = new ArrayList&amp;lt;string&amp;gt;(); StringBuffer buf = new StringBuffer(&amp;#34;De RegaPan\t&amp;#34;); buf.</description>
    </item>
    
    <item>
      <title>JSpace</title>
      <link>https://timvw.be/2006/04/03/jspace/</link>
      <pubDate>Mon, 03 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2006/04/03/jspace/</guid>
      <description>I wrote a simple shoot-em-up game: JSpace.zip.</description>
    </item>
    
    <item>
      <title>Telnet server</title>
      <link>https://timvw.be/2005/08/20/telnet-server/</link>
      <pubDate>Sat, 20 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2005/08/20/telnet-server/</guid>
      <description>A telnet server that writes the content of a file to it&amp;rsquo;s clients: banner.txt.</description>
    </item>
    
    <item>
      <title>Formatted input</title>
      <link>https://timvw.be/2005/03/19/formatted-input/</link>
      <pubDate>Sat, 19 Mar 2005 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2005/03/19/formatted-input/</guid>
      <description>I was in need for formatted input and the decomposition of the input into a stream of tokens so i came up with the following:
Code: java/TokSequence.java.txt And now i am ready for formatted input like this:
public class Main { public static void main(String[] args) { try { BufferedReader input = new BufferedReader(new FileReader(&amp;#34;file.txt&amp;#34;)); for (String in = input.readLine()) { TokSequence ts = new TokSequence(new StringTokenizer(in)); int userId = ts.</description>
    </item>
    
    <item>
      <title>TetriNet spectator client</title>
      <link>https://timvw.be/2004/11/08/tetrinet-spectator-client/</link>
      <pubDate>Mon, 08 Nov 2004 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2004/11/08/tetrinet-spectator-client/</guid>
      <description>I present a Spectator (Applet) for TetriNet: JSpectator.zip.</description>
    </item>
    
    <item>
      <title>Sokoban</title>
      <link>https://timvw.be/2003/06/18/sokoban/</link>
      <pubDate>Wed, 18 Jun 2003 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2003/06/18/sokoban/</guid>
      <description>Today i finished my own version of the wellknown game Sokoban. Get sokoban.zip now!</description>
    </item>
    
    <item>
      <title>TetriNet server</title>
      <link>https://timvw.be/2002/08/13/tetrinet-server/</link>
      <pubDate>Tue, 13 Aug 2002 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2002/08/13/tetrinet-server/</guid>
      <description>I hacked a TetriNet server together (with some really ugly code in it). Anyway, you can get it at: tserver.zip.</description>
    </item>
    
  </channel>
</rss>
