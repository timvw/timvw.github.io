<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Windows Forms on Tim Van Wassenhove</title><link>https://timvw.be/tags/windows-forms/</link><description>Recent content in Windows Forms on Tim Van Wassenhove</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 06 Nov 2009 00:00:00 +0000</lastBuildDate><atom:link href="https://timvw.be/tags/windows-forms/feed.xml" rel="self" type="application/rss+xml"/><item><title>Presenting FilterList</title><link>https://timvw.be/2009/11/06/presenting-filterlist/</link><pubDate>Fri, 06 Nov 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/11/06/presenting-filterlist/</guid><description>Earlier today i decided to add &amp;lsquo;Filtering&amp;rsquo; to my SortableBindingList. This resulted in writing a FilterList class. This class can be easily used as following
void textBoxFilter_KeyUp(object sender, KeyEventArgs e) { var filterChars = this.textBoxFilter.Text.ToLower(); this.Filter(filterChars); } void Filter(string filterChars) { var persons = (FilterList&amp;lt;person&amp;gt;)this.dataGridView1.DataSource; persons.Filter(p =&amp;gt; p.Firstname.ToLower().Contains(filterChars)); } I even created a screencast to demonstrate it:
[mediaplayer src=&amp;lsquo;http://www.timvw.be/screencasts/filterlist.wmv&amp;rsquo; width=512 height=344]</description></item><item><title>Presenting ControlStateMachine</title><link>https://timvw.be/2009/08/17/presenting-controlstatemachine/</link><pubDate>Mon, 17 Aug 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/08/17/presenting-controlstatemachine/</guid><description>Here is a situation we are all familiar with: A form that only displays a certain set of controls depending on the mode or state of the application. Let me start with an example: At design time there are three buttons
The user can look at the data and decide to edit it:
Or the user is editing the data and can decide to commit or discard her changes:
A couple of years i ago i used to spread such display logic all over my code and it was hard to figure out which control was visible at a given point.</description></item><item><title>Presenting ControlChanges</title><link>https://timvw.be/2009/08/15/presenting-controlchanges/</link><pubDate>Sat, 15 Aug 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/08/15/presenting-controlchanges/</guid><description>Because i noticed that i kept writing the same operations on control over and over again i decided to capture them in a couple of functions. I presume most of you have done this already. Here is the list of operations:
In case it is not clear what these methods should do i have defined the following specifications for them:
Get the code here: ControlChanges and WhenExecutingControlChanges. Stay tuned for more!</description></item><item><title>Experimenting with ControlStateMachine and Fluent interfaces</title><link>https://timvw.be/2009/08/13/experimenting-with-controlstatemachine-and-fluent-interfaces/</link><pubDate>Thu, 13 Aug 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/08/13/experimenting-with-controlstatemachine-and-fluent-interfaces/</guid><description>A long time ago i read Build your own CAB series and recently i noticed that there is a wiki: Presentation Patterns Wiki! and it inspired me to experiment with state machines. Here are a couple of examples:
controlStateMachine = new ControlStateMachine&amp;lt;states&amp;gt;(this); controlStateMachine.AfterEachStateChange() .Do(MakeRelevantButtonsVisible); controlStateMachine.WhenStateChangesTo(States.RetrievingSubscriptionPeriod) .TheOnlyVisibleControlsAre(flowLayoutPanel1, datePicker1); controlStateMachine.WhenStateChangesTo(States.RetrievingCustomerInformation) .MakeVisible(customerInput1) .Do(() =&amp;gt; customerInput1.Dock = DockStyle.Fill); controlStateMachine.WhenStateChangesTo(States.Ready) .MakeInvisible(customerInput1); And here is another example:
wizardStateMachine = new WizardStateMachine&amp;lt;states&amp;gt;(controlStateMachine); wizardStateMachine.</description></item><item><title>Presenting AssemblyTypePicker</title><link>https://timvw.be/2008/09/01/presenting-assemblytypepicker/</link><pubDate>Mon, 01 Sep 2008 00:00:00 +0000</pubDate><guid>https://timvw.be/2008/09/01/presenting-assemblytypepicker/</guid><description>I really like the way the Object Browser makes the types in an assembly visible. Because i have a couple of programs that require a given type as input, i have decided to add a TypeTree control to BeTimvwFramework that mimicks the Object Browser. Here are a couple of screenshots of the control in a demo application that allows the user to generate interfaces and wrapper classes based on a selected type:</description></item><item><title>Display WorkItems in a WinForms application</title><link>https://timvw.be/2008/02/29/display-workitems-in-a-winforms-application/</link><pubDate>Fri, 29 Feb 2008 00:00:00 +0000</pubDate><guid>https://timvw.be/2008/02/29/display-workitems-in-a-winforms-application/</guid><description>Using the Microsoft.TeamFoundation.WorkItemTracking.Controls assembly it is possibe to display WorkItems. Here is a little demo application that will display all the WorkItems that have been changed by one of the given users in the given range
Feel free to download the source: WorkItemTracker.zip
Edit (05/03/2008):
Refactored the code a little and added some features like sortable columns, loading default tfsserver and users from App.Config, &amp;hellip;</description></item><item><title>How the name of an embedded resource is generated in a C# project</title><link>https://timvw.be/2008/02/20/how-the-name-of-an-embedded-resource-is-generated-in-a-c#-project/</link><pubDate>Wed, 20 Feb 2008 00:00:00 +0000</pubDate><guid>https://timvw.be/2008/02/20/how-the-name-of-an-embedded-resource-is-generated-in-a-c#-project/</guid><description>A while ago i was wondering how the name of an embedded resource is generated in a C# project. Earlier today i was looking in Microsoft.CSharp.targets and found the answer
The CreateManifestResourceNames target create the manifest resource names from the .RESX files.
[IN] @(ResxWithNoCulture) - The names the non-culture .RESX files. @(ResxWithCulture) - The names the culture .RESX files. @(NonResxWithNoCulture) - The names of the non-culture non-RESX files (like bitmaps, etc).</description></item><item><title>Using DateTimePicker and Custom Format</title><link>https://timvw.be/2007/08/29/using-datetimepicker-and-custom-format/</link><pubDate>Wed, 29 Aug 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/08/29/using-datetimepicker-and-custom-format/</guid><description>Today we ran into a nasty problem with DateTimePickerFormat.Custom. We allow the user to input a month/date with a DateTimePicker as following (nothing fancy)
private void Form1_Load(object sender, EventArgs e) { this.dateTimePicker1.Value = new DateTime(2007, 8, 31); this.dateTimePicker1.Format = DateTimePickerFormat.Custom; this.dateTimePicker1.CustomFormat = &amp;#34;MM/yyyy&amp;#34;; } Now, change to 09/2007 and notice that you get an Exception, because the control tries to create an unrepresentable new DateTime(2007, 8+1, 31). Thus, if you&amp;rsquo;re going to use the DateTimePicker for MM/yyyy input make sure to set it&amp;rsquo;s value to a DateTimeTime with a day component that exists for all months/years (thus a value between 1 and 28).</description></item><item><title>Bending the code generation of IExtenderProvider to your will</title><link>https://timvw.be/2007/08/21/bending-the-code-generation-of-iextenderprovider-to-your-will/</link><pubDate>Tue, 21 Aug 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/08/21/bending-the-code-generation-of-iextenderprovider-to-your-will/</guid><description>In Exploring CodeDomSerializer i already explained how we can modify the code that the Visual Studio designer generates for us. With a typical IExtenderProvider the designer generates an initializer, SetXXX methods and a variable declaration, which looks like
this.constantsExtenderProvider1 = new WindowsApplication1.ConstantsExtenderProvider(); this.constantsExtenderProvider1.SetConstants(this.button1, new string[] { &amp;#34;Operation1&amp;#34;, &amp;#34;Operation5&amp;#34;}); this.constantsExtenderProvider1.SetConstants(this, null); private ConstantsExtenderProvider constantsExtenderProvider1; Now, what if we&amp;rsquo;re not happy with those generated SetXXX methods on each Component? The problem is that this code is not generated by the serializer for the ConstantsExtenderProvider but by the serializers for the Components.</description></item><item><title>Debugging custom UITypeEditors</title><link>https://timvw.be/2007/08/10/debugging-custom-uitypeeditors/</link><pubDate>Fri, 10 Aug 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/08/10/debugging-custom-uitypeeditors/</guid><description>If you read this you&amp;rsquo;re probably gonna think: What a moron! Anyway, i&amp;rsquo;m sharing this in the hope that i&amp;rsquo;ll be the last to undergo the following. In order to test my custom UITypeEditor i did the following
Create a UserControl Add a property to the control Add an Editor attribute to the property Build Drag a UserControl on the designer form Test via Visual Studio&amp;rsquo;s Property Window if the UITypeEditor works as expected Everytime i changed some code: Restart Visual Studio, load the project and repeat 6.</description></item><item><title>Exploring formatting...</title><link>https://timvw.be/2007/07/28/exploring-formatting.../</link><pubDate>Sat, 28 Jul 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/07/28/exploring-formatting.../</guid><description>In the documentation you can read the following for CultureInfo
First i&amp;rsquo;ll initialize an instance of a customized CultureInfo and install it in the current thread:
CultureInfo appCultureInfo = new CultureInfo(&amp;#34;en-US&amp;#34;); appCultureInfo.NumberFormat.NumberDecimalSeparator = &amp;#34;.&amp;#34;; appCultureInfo.NumberFormat.NumberGroupSeparator = &amp;#34; &amp;#34;; appCultureInfo.NumberFormat.NumberDecimalDigits = 2; appCultureInfo.NumberFormat.CurrencySymbol = &amp;#34;€&amp;#34;; Thread.CurrentThread.CurrentCulture = appCultureInfo; Note: The culture in Thread.CurrentThread.CurrentUICulture is only used by the Resource Manager to lookup culture-specific resources at run-time. Since we&amp;rsquo;re not playing with resources, we don&amp;rsquo;t have to care about this one.</description></item><item><title>Using interfaces with Drag and Drop</title><link>https://timvw.be/2007/07/26/using-interfaces-with-drag-and-drop/</link><pubDate>Thu, 26 Jul 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/07/26/using-interfaces-with-drag-and-drop/</guid><description>Earlier today i was refactoring some graphical components. I wanted to use an interface instead of concrete implementations for my drag and drop code&amp;hellip; Although i was using an instance of Foo, and thus IFoo, the following code never allowed me to drop
interface IFoo { } class Foo : IFoo { } private void label1_MouseDown(object sender, MouseEventArgs e) { this.DoDragDrop(new Foo(), DragDropEffects.All); } private void Form1_DragEnter(object sender, DragEventArgs e) { // for an instance of Foo it returns false, // if you use typeof(Foo) it returns true though.</description></item><item><title>Improvements for the SortableBindingList (and TypedList)</title><link>https://timvw.be/2007/05/10/improvements-for-the-sortablebindinglist-and-typedlist/</link><pubDate>Thu, 10 May 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/05/10/improvements-for-the-sortablebindinglist-and-typedlist/</guid><description>I found out that the sorting didn&amp;rsquo;t work for &amp;lsquo;Expression&amp;rsquo; properties. My first thought was to add another switch to the logic of the already existing code
object value1 = t1; object value2 = t2; if (prop.Name.StartsWith(&amp;#34;||&amp;#34;)) { // do something to find the &amp;#39;ExpressionProperty&amp;#39; values } else { foreach (string property in prop.Name.Split(&amp;#39;.&amp;#39;)) { // navigate through the relations PropertyInfo propertyInfo = value1.GetType().GetProperty(property); value1 = propertyInfo.</description></item><item><title>Presenting the ExpressionDescriptor</title><link>https://timvw.be/2007/05/08/presenting-the-expressiondescriptor/</link><pubDate>Tue, 08 May 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/05/08/presenting-the-expressiondescriptor/</guid><description>A couple of days ago i presented you the TypedList which supports navigation through subproperties. Another common feature request is the possibility to add a column that has a value based on other values in the row (like a DataColumn with it&amp;rsquo;s Expression property set). With the plumbing code i&amp;rsquo;ve written it&amp;rsquo;s as simple as implementing the following interface
public interface IExpressionProvider&amp;lt;componentType, PropertyType&amp;gt; { string Name { get; } PropertyType GetValue(ComponentType component); } An example implementation could be an expression that represents the duration of an Appointment</description></item><item><title>Presenting the TypedList&lt;T></title><link>https://timvw.be/2007/05/05/presenting-the-typedlistt/</link><pubDate>Sat, 05 May 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/05/05/presenting-the-typedlistt/</guid><description>A while ago i presented the SortableBindingList. One of the nice features you get with DataSets is that you can use relations to navigate through the data. Business Objects don&amp;rsquo;t give you this functionality by default. Today i implemented a BindingList that supports navigation through relations. First i&amp;rsquo;ll present you the Business Objects
We would like to create an overview of the appointments using a datagridview
I drag a datagridview on the designer form, add columns, and then i set the datapropertynames as following: (Notice how i use a .</description></item><item><title>Exploring DataGridViewComboBoxColumn databinding (part2)</title><link>https://timvw.be/2007/05/03/exploring-datagridviewcomboboxcolumn-databinding-part2/</link><pubDate>Thu, 03 May 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/05/03/exploring-datagridviewcomboboxcolumn-databinding-part2/</guid><description>A while ago i wrote about Exploring DataGridViewComboBoxColumn databinding using Business Objects. Some people asked me to give an example using DataSets&amp;hellip;
I&amp;rsquo;ll start with creating a DataSet, add two DataTables, and create a relation on PersonType.Id (int32). In the designer this looks like
Next i create a DataSetDac that will return an instance of a Filled PersonDataSet (In real life you would probably use a TableAdapter and get the data from a database) The code is as simple as</description></item><item><title>Presenting the MultiPanel</title><link>https://timvw.be/2007/04/29/presenting-the-multipanel/</link><pubDate>Sun, 29 Apr 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/04/29/presenting-the-multipanel/</guid><description>A while ago i was thinking that i would be nice to have a control that exposes multiple designer panels, but only shows one at a time&amp;hellip; Somewhat like a TabControl, but without the header.. Anyway, i found out (here) that a TabControl can be tweaked into that behaviour
public class MultiPanel : TabControl { protected override void WndProc(ref Message m) { if (m.Msg == 0x1328 &amp;amp;&amp;amp; !</description></item><item><title>Performing long running tasks in a Windows Application</title><link>https://timvw.be/2007/04/27/performing-long-running-tasks-in-a-windows-application/</link><pubDate>Fri, 27 Apr 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/04/27/performing-long-running-tasks-in-a-windows-application/</guid><description>A while ago i blogged about Thread Safe UI. Today someone asked the following
The first thing i do is define a delegate (void Performer()) that will do the work of a long running operation. The reason i do this is because the compiler generates a class Performer that inherits from System.MulticastDelegate and exposes Begin- and EndInvoke methods.
Since i want to disable my form before each run of a Performer and enable it after each run i implement a method Perform as following</description></item><item><title>DataGridView to Excel</title><link>https://timvw.be/2007/04/05/datagridview-to-excel/</link><pubDate>Thu, 05 Apr 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/04/05/datagridview-to-excel/</guid><description>The CarlosAg Excel Xml Writer Library does not require Excel in order to generate Excel Workbooks. I already presented a method to print a DataGridView (here) and now i present you a method that allows you to export a DataGridView to an Excel Workbook: DataGridViewToExcel.zip.</description></item><item><title>Little INotifyPropertyChanged helper</title><link>https://timvw.be/2007/03/19/little-inotifypropertychanged-helper/</link><pubDate>Mon, 19 Mar 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/03/19/little-inotifypropertychanged-helper/</guid><description>Most implementations of INotifyPropertyChanged look as following (notice that you have to make sure that the hardcoded PropertyName is spelled correctly)
class MyClass : INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged; private int x; public int X { get { return this.x; } set { if (this.x != value) { this.x = value; this.OnPropertyChanged(&amp;#34;X&amp;#34;); } } } [MethodImpl(MethodImplOptions.</description></item><item><title>Presenting the SortableBindingList&lt;T></title><link>https://timvw.be/2007/02/22/presenting-the-sortablebindinglistt/</link><pubDate>Thu, 22 Feb 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/02/22/presenting-the-sortablebindinglistt/</guid><description>If you are databinding your custom objects (in a Bindinglist of ) to a DataGridView you will notice that the users can&amp;rsquo;t sort the rows by clicking on the columnheaders&amp;hellip; Unlike an unbound DataGridView, the SortCompare event is not raised. Here is a class that uses IComparer to implement a BindingList that supports Sorting:
Please read the follow up article to find the updated source code.
Using this SortableBindingList is as easy as</description></item><item><title>Don't wait until the DateTimePicker has lost focus to write back the values</title><link>https://timvw.be/2007/02/07/dont-wait-until-the-datetimepicker-has-lost-focus-to-write-back-the-values/</link><pubDate>Wed, 07 Feb 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/02/07/dont-wait-until-the-datetimepicker-has-lost-focus-to-write-back-the-values/</guid><description>Drag a TextBox and a DateTimePicker control on a Form and databind them to a DateTime property, eg
public partial class Form1 : Form { public Form1() { InitializeComponent(); SimpleObject simpleObject = new SimpleObject(); simpleObject.Birthday = DateTime.Now; this.dateTimePicker1.DataBindings.Add(&amp;#34;Value&amp;#34;, simpleObject, &amp;#34;Birthday&amp;#34;); this.textBox1.DataBindings.Add(&amp;#34;Text&amp;#34;, simpleObject, &amp;#34;Birthday&amp;#34;, true, DataSourceUpdateMode.OnPropertyChanged); } } public class SimpleObject : INotifyPropertyChanged { private DateTime birthday; public event PropertyChangedEventHandler PropertyChanged; public DateTime Birthday { get { return this.</description></item><item><title>Control the order of Properties in your Class</title><link>https://timvw.be/2007/02/04/control-the-order-of-properties-in-your-class/</link><pubDate>Sun, 04 Feb 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/02/04/control-the-order-of-properties-in-your-class/</guid><description>Sometimes you want to manipulate the order in which properties are used for databinding. Eg: If you drag and drop an object datasource on a DataGridView you have no control in which order it binds the properties. Offcourse, you can order the columns by moving them around&amp;hellip; Today someone asked the following
I started with the implementation of a PropertyOrderAttribute
[AttributeUsage(AttributeTargets.Property)] public class PropertyOrderAttribute : Attribute { private int order; public PropertyOrderAttribute(int order) { this.</description></item><item><title>Presenting the DataGridViewLargeTextBoxCell</title><link>https://timvw.be/2007/01/27/presenting-the-datagridviewlargetextboxcell/</link><pubDate>Sat, 27 Jan 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/01/27/presenting-the-datagridviewlargetextboxcell/</guid><description>Today i decided to experiment a bit with custom DataGridViewCell implementations. If you insert large text into a DataGridView it will (at best) wrap the text. I wanted my DataGridView to behave like Excel so that the whole text is displayed. Here are a couple of screenshots of the result
Feel free to download CustomDataGridViewCells.zip.</description></item><item><title>About Thread-Safe GUI...</title><link>https://timvw.be/2007/01/21/about-thread-safe-gui.../</link><pubDate>Sun, 21 Jan 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/01/21/about-thread-safe-gui.../</guid><description>If you&amp;rsquo;re writing windows applications you&amp;rsquo;ll most certainly recognize the following piece of code
private delegate void UpdateIntResultDelegate(int result); private void UpdateIntResult(int result) { if (this.labelIntResult.InvokeRequired) this.labelIntResult.Invoke(new UpdateIntResultDelegate(this.UpdateIntResult), result); else this.myDataSource.IntResult = result; } private delegate void UpdateStringResultDelegate(string result); private void UpdateStringResult(string result) { if (this.labelStringResult.InvokeRequired) this.labelStringResult.Invoke(new UpdateStringResultDelegate(this.UpdateStringResult), result); else this.myDataSource.StringResult = result; } Today i was fed up with defining all these Delegates.</description></item><item><title>Exploring DataGridViewComboBoxColumn databinding</title><link>https://timvw.be/2007/01/17/exploring-datagridviewcomboboxcolumn-databinding/</link><pubDate>Wed, 17 Jan 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/01/17/exploring-datagridviewcomboboxcolumn-databinding/</guid><description>Let&amp;rsquo;s start with a simple example: Each Person has a Name (string) and PersonTypeCode (an Enumerated value) property. We drag a DataGridView on the designer form and add two columns (DataGridViewComboBoxColumn for the PersonTypeCode property). And then we hook up the Bindingsource as following
class Form1 : Form { public Form1() { InitializeComponent(); this.dataGridView1.AutoGenerateColumns = false; this.ColumnName.DataPropertyName = &amp;#34;Name&amp;#34;; this.ColumnPersonTypeCode.DataPropertyName = &amp;#34;PersonTypeCode&amp;#34;; BindingSource bindingSource = new BindingSource(); bindingSource.</description></item><item><title>Hide and unhide columns (or rows) in the DataGridView</title><link>https://timvw.be/2007/01/13/hide-and-unhide-columns-or-rows-in-the-datagridview/</link><pubDate>Sat, 13 Jan 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/01/13/hide-and-unhide-columns-or-rows-in-the-datagridview/</guid><description>Once in a while i see the following question
Using the Visibile property of the DataGridViewColumn makes this a no-brainer. Let&amp;rsquo;s take the Databound DataGridView and implement functionality to hide/unhide the quarterly results. All you have to do is add a DataGridViewButtonColumn and handle the DataGridView CellClick event as following
private void dataGridView1_CellClick(object sender, DataGridViewCellEventArgs e) { if (e.ColumnIndex == this.ColumnButton.Index) { bool visible = !</description></item><item><title>Databinding a Nullable&lt;T> property</title><link>https://timvw.be/2007/01/10/databinding-a-nullablet-property/</link><pubDate>Wed, 10 Jan 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/01/10/databinding-a-nullablet-property/</guid><description>I find it frustrating that data binding does not really support Nullable. Anyway, it&amp;rsquo;s relatively easy to workaround this shortcoming
public partial class Form1 : Form { private MyDataSource myDataSource; public Form1() { InitializeComponent(); this.myDataSource = new MyDataSource(); this.textBox1.DataBindings.Add(&amp;#34;Text&amp;#34;, this.myDataSource, &amp;#34;Double&amp;#34;, true); this.textBox1.DataBindings[&amp;#34;Text&amp;#34;].Parse += this.Text_Parse; } void Text_Parse( object sender, ConvertEventArgs e ) { if( e.Value == null || e.</description></item><item><title>The NullableDateAndTimePicker Control</title><link>https://timvw.be/2007/01/07/the-nullabledateandtimepicker-control/</link><pubDate>Sun, 07 Jan 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/01/07/the-nullabledateandtimepicker-control/</guid><description>A while ago i presented the concept of a DateAndTimePicker. Today someone asked if it&amp;rsquo;s possible to give the user an option to &amp;rsquo;not choose a DateTime&amp;rsquo;. I created a UserControl that has both a DateAndTimePicker and a CheckBox with a Value property of Nullable.
Feel free to download the updated DateAndTimePicker.zip.</description></item><item><title>Enable and disable TabPages on a TabControl</title><link>https://timvw.be/2007/01/06/enable-and-disable-tabpages-on-a-tabcontrol/</link><pubDate>Sat, 06 Jan 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/01/06/enable-and-disable-tabpages-on-a-tabcontrol/</guid><description>Apparently Microsoft choose not to implement support for disabled TabPages. The reason seems to be that it&amp;rsquo;s against their Guidelines for Tabs. Let&amp;rsquo;s ignore the guideline and implement the support anyway. First we set the DrawMode property of the TabControl to OwnerDrawFixed. Next we add an eventhandler for the DrawItem Event
private void tabControl1_DrawItem(object sender, DrawItemEventArgs e) { TabControl tabControl = sender as TabControl; TabPage tabPage = tabControl.TabPages[e.Index]; Rectangle tabRectangle = tabControl.</description></item><item><title>Developing a DataSource for your DataGridView</title><link>https://timvw.be/2007/01/04/developing-a-datasource-for-your-datagridview/</link><pubDate>Thu, 04 Jan 2007 00:00:00 +0000</pubDate><guid>https://timvw.be/2007/01/04/developing-a-datasource-for-your-datagridview/</guid><description>Imagine that you want to develop a DataSource that is capable to represent the data displayed in the following excel sheet
For each region the values are given. The YEAR value is defined as the sum of Q1, Q2, Q3 and Q4, eg: for EMEA this is SUM(B2:E2). The GLOBAL values are calculated as the sum of the regions for the quarter, eg: for Q1 this is SUM(B2:B5). We&amp;rsquo;ll start with the easiest task: Add columns to the DGV and define the headers</description></item><item><title>Print a Control</title><link>https://timvw.be/2006/12/31/print-a-control/</link><pubDate>Sun, 31 Dec 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/12/31/print-a-control/</guid><description>A while ago i discovered the DrawToBitmap method on the Control class. The availability of this method makes it relatively easy to implement a PrintPageEventHandler for the PrintDocument class. Here is an example implementation that prints a DataGridView
private void buttonPrint_Click(object sender, EventArgs e) { this.printDocument1.Print(); } void printDocument1_BeginPrint(object sender, PrintEventArgs e) { this.currentPage = 0; } private void printDocument1_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs e) { Size oldSize = this.</description></item><item><title>Drag and Drop Microsoft Office Outlook Contacts on your WinForm</title><link>https://timvw.be/2006/12/19/drag-and-drop-microsoft-office-outlook-contacts-on-your-winform/</link><pubDate>Tue, 19 Dec 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/12/19/drag-and-drop-microsoft-office-outlook-contacts-on-your-winform/</guid><description>Earlier today i saw someone that wanted to know how to drag and drop Microsoft Office Outlook Contacts on his winform (and get the data of the contact). Here are the few lines of code that do what he asked for
// in the constructor of the form (or in the InitializeComponent method if you set it via the Designer) this.AllowDrop = true; // handle the DragOver event private void Form1_DragOver(object sender, DragEventArgs e) { e.</description></item><item><title>A DateAndTimePicker control</title><link>https://timvw.be/2006/12/18/a-dateandtimepicker-control/</link><pubDate>Mon, 18 Dec 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/12/18/a-dateandtimepicker-control/</guid><description>The DateTimePicker control allows the user to input a Date or a Time. The problem is that you can&amp;rsquo;t let the user pick both a date and a time with one instance of the control (unless you set the CustomFormat property and give up the &amp;rsquo;nice&amp;rsquo; ui) so i decided to build my own DateAndTimePicker control
Feel free to download and extended the DateAndTimePicker.zip.</description></item><item><title>Simple OutlookBar Control</title><link>https://timvw.be/2006/12/17/simple-outlookbar-control/</link><pubDate>Sun, 17 Dec 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/12/17/simple-outlookbar-control/</guid><description>Earlier this evening i wanted to experiment with the ToolStrip class so i decided to design a simple OutlookBar Control and a demo application that uses this control. Feel free to download OutlookBar.zip.</description></item><item><title>What goes up must come down...</title><link>https://timvw.be/2006/12/13/what-goes-up-must-come-down.../</link><pubDate>Wed, 13 Dec 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/12/13/what-goes-up-must-come-down.../</guid><description>What goes up must come down&amp;hellip; So you might think that after each CellMouseDown event you recieve a CellMouseUp event&amp;hellip; Well, here is some code that proves that isn&amp;rsquo;t always true
public partial class Form1 : Form { private string lastEvent; public Form1() { InitializeComponent(); this.dataGridView1.ColumnCount = 10; this.dataGridView1.RowCount = 10; } public string LastEvent { get { return this.</description></item><item><title>Master-Slave for databound ComboBoxes</title><link>https://timvw.be/2006/11/25/master-slave-for-databound-comboboxes/</link><pubDate>Sat, 25 Nov 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/11/25/master-slave-for-databound-comboboxes/</guid><description>In most examples on the Internet you&amp;rsquo;ll find that the Master has a property that returns the allowed Slaves. Here&amp;rsquo;s an example that does not require such a property. Let&amp;rsquo;s start with a simple class that represents a Person.
public class Person { private string name; public Person(string name) { this.name = name; } public string Name { get { return this.</description></item><item><title>Screenshot of DataGridViews</title><link>https://timvw.be/2006/10/08/screenshot-of-datagridviews/</link><pubDate>Sun, 08 Oct 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/10/08/screenshot-of-datagridviews/</guid><description>The problem with a regular screenshot is that you only get to see a part of the DataGridViews. Here&amp;rsquo;s an example of a typical form
Here is a snippet that makes a screenshot of the complete DataGridViews
List&amp;lt;bitmap&amp;gt; bitmaps = new List&amp;lt;bitmap&amp;gt;(); Size size = new Size(); for (int i = 1; i &amp;lt; 4; ++i) { // lookup the datagridview DataGridView dataGridView = (DataGridView)this.Controls[&amp;#34;dataGridView&amp;#34; + i]; // maximize the datagridview size (choosing between current and preferred) Size oldSize = dataGridView.</description></item><item><title>DataGridView with EditOnEnter as EditMode</title><link>https://timvw.be/2006/09/16/datagridview-with-editonenter-as-editmode/</link><pubDate>Sat, 16 Sep 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/09/16/datagridview-with-editonenter-as-editmode/</guid><description>Earlier this week i found that when a DataGridView has it&amp;rsquo;s EditMode property set to EditOnEnter the user cannot select an entire row by clicking on the row header. This prevents the user from being able to delete a row. A couple of websearches later i found a bugreport but the proposed workarounds didn&amp;rsquo;t work for me 🙁 Here is a workaround that does work for me
private void dataGridView1_MouseClick( object sender, MouseEventArgs e ) { DataGridView.</description></item><item><title>Drag and Drop on a DataGridView</title><link>https://timvw.be/2006/09/16/drag-and-drop-on-a-datagridview/</link><pubDate>Sat, 16 Sep 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/09/16/drag-and-drop-on-a-datagridview/</guid><description>Here is a bit of sample code that allows you to drag and drop a cellvalue in a DataGridView (don&amp;rsquo;t forget to set the AllowDrop property of the DataGridView to true). Notice that you need to translate the X and Y properties of the DragEventArgs first (unlike the X and Y properties of the MouseEventArgs)
private void dataGridView1_MouseDown( object sender, MouseEventArgs e ) { DataGridView.HitTestInfo info = this.dataGridView1.HitTest( e.X, e.</description></item><item><title>Inconsistent Drag and Drop API</title><link>https://timvw.be/2006/09/16/inconsistent-drag-and-drop-api/</link><pubDate>Sat, 16 Sep 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/09/16/inconsistent-drag-and-drop-api/</guid><description>Every System.Windows.Forms.Control has the following events
public event DragEventHandler DragDrop public event DragEventHandler DragEnter public event EventHandler DragLeave public event DragEventHandler DragOver This means, when the user drags something away of the control, you can&amp;rsquo;t access the data anymore (unless you cached it somewhere when the DragEnter or DragOver events occured). Here is an extract from Microsoft patterns and practives on Event Design</description></item><item><title>Adding DataGridViewColumns (lots of them)</title><link>https://timvw.be/2006/09/14/adding-datagridviewcolumns-lots-of-them/</link><pubDate>Thu, 14 Sep 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/09/14/adding-datagridviewcolumns-lots-of-them/</guid><description>Last couple of days i&amp;rsquo;ve been trying to add a couple (750+) columns into a DataGridView. Initially i tried the following
this.dataGridView1.ColumnCount = 750; The code above results in the following error: Sum of the columns&amp;rsquo; FillWeight values cannot exceed 65535. Then i tried the following
DataGridViewColumn[] columns = new DataGridViewColumn[750]; for ( int i = 0; i &amp;lt; columns.Length; ++i ) { DataGridViewColumn column = new DataGridViewColumn(); column.</description></item><item><title>Implementing Master/Detail for Custom Objects with DataGridViewComboBoxColumns</title><link>https://timvw.be/2006/09/10/implementing-master/detail-for-custom-objects-with-datagridviewcomboboxcolumns/</link><pubDate>Sun, 10 Sep 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/09/10/implementing-master/detail-for-custom-objects-with-datagridviewcomboboxcolumns/</guid><description>Imagine you have the following two classes
public class Parent { private int id; private string name; public Parent( int id, string name ) { this.id = id; this.name = name; } public int Id { get { return this.id; } } public string Name { get { return this.name; } } } public class Child : Parent { private int parentId; public Child( int id, int parentId, string name ) : base( id, name ) { this.</description></item><item><title>Using DataGridViewComboBoxColumn with Custom Objects</title><link>https://timvw.be/2006/09/10/using-datagridviewcomboboxcolumn-with-custom-objects/</link><pubDate>Sun, 10 Sep 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/09/10/using-datagridviewcomboboxcolumn-with-custom-objects/</guid><description>Earlier today i was playing with the DataGridView control. I wanted to have a couple of DataGridViewComboBoxColumns in order to limit the available input options for the user. The documentation clearly mentions the following
Here is sample of a custom object
public class Slot { private int id; private DateTime dateTime; public Slot( int id, DateTime dateTime ) { this.id = id; this.</description></item><item><title>Selecting custom Objects from a ComboBox</title><link>https://timvw.be/2006/09/03/selecting-custom-objects-from-a-combobox/</link><pubDate>Sun, 03 Sep 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/09/03/selecting-custom-objects-from-a-combobox/</guid><description>Earlier this week someone asked me how he could select custom objects from a ComboBox. Here is the code he used
private void FillComboBoxPersons(List&amp;lt;person&amp;gt; persons) { this.comboBoxPersons.Items.Clear(); this.comboBoxPersons.Items.Add( &amp;#34;-- Select Person -------------&amp;#34; ); foreach ( Person person in persons ) { this.comboBoxPersons.Items.Add( person.Name ); } this.comboBoxPersons.SelectedIndex = 0; } In order to get the selected item he then used the SelectedIndex property to lookup the Person in a cache of the persons collection.</description></item><item><title>Selecting custom Objects from a DataGridView</title><link>https://timvw.be/2006/09/03/selecting-custom-objects-from-a-datagridview/</link><pubDate>Sun, 03 Sep 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/09/03/selecting-custom-objects-from-a-datagridview/</guid><description>Here is a way that allows the user to select a row (custom object properties are used as column values) from a DataGridView assuming that the SelectionMode property is set FullRowSelect
private void FillDataGridViewPersons( List&amp;lt;person&amp;gt; persons ) { this.dataGridViewPersons.Rows.Clear(); for ( int i = 0; i &amp;lt; persons.Count; ++i ) { this.dataGridViewPersons.Rows.Add(); this.dataGridViewPersons.Rows[i].Tag = persons[i]; this.dataGridViewPersons.Rows[i].SetValues( new object[] { persons[i].Id, persons[i].Name } ); } } private void buttonDoSomething_Click( object sender, EventArgs e ) { if ( this.</description></item><item><title>Windows Multimedia Video Capture</title><link>https://timvw.be/2006/06/26/windows-multimedia-video-capture/</link><pubDate>Mon, 26 Jun 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/06/26/windows-multimedia-video-capture/</guid><description>On my computer the WIA (Windows Image Acquisition) API is SLOOOOOW. So i decided to give the Windows Multimedia Video Capture API a try. I didn&amp;rsquo;t take long to create the prototypes in Managed Code and call the DLL functions. Everything runs really smooth now&amp;hellip; As always, feel free to download the testavicap32 sources now!</description></item><item><title>Windows Image Acquisition</title><link>https://timvw.be/2006/06/24/windows-image-acquisition/</link><pubDate>Sat, 24 Jun 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/06/24/windows-image-acquisition/</guid><description>Earlier today i decided to toy around with my webcam. A couple of websearches later i ended up at WIA (Windows Image Acquisition). I found a couple of articles (eg: here and here) that showed how to capture images. I wanted to display the caputered image in a PictureBox. Unfortunately everybody seems to save the WIA.ImageFile to a file and then load the imagefile into a PictureBox. It&amp;rsquo;s obvious that i don&amp;rsquo;t want to save the image into a file first.</description></item><item><title>Removing selected items from a ListBox</title><link>https://timvw.be/2006/02/16/removing-selected-items-from-a-listbox/</link><pubDate>Thu, 16 Feb 2006 00:00:00 +0000</pubDate><guid>https://timvw.be/2006/02/16/removing-selected-items-from-a-listbox/</guid><description>Today i was experimenting with a couple of windows controls. For some reason i wasn&amp;rsquo;t able to remove the selected items from a ListBox. Here is the code that didn&amp;rsquo;t work
For Each index As Integer = ListBox1.SelectedIndices ListBox2.Items.Add(ListBox1.Items(index)) ListBox1.Items.Remove(index) End For The problem is that when you remove an item from the collection the indices change. Here is a possible solution
Dim index As Integer = ListBox1.SelectedIndex While index &amp;lt;&amp;gt; -1 ListBox2.</description></item></channel></rss>