<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Silverlight on Tim Van Wassenhove</title>
    <link>https://timvw.be/tags/silverlight/</link>
    <description>Recent content in Silverlight on Tim Van Wassenhove</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jan 2021 22:47:36 +0100</lastBuildDate>
    <atom:link href="https://timvw.be/tags/silverlight/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Calculate EndpointAddress for Silverlight client</title>
      <link>https://timvw.be/2010/02/15/calculate-endpointaddress-for-silverlight-client/</link>
      <pubDate>Mon, 15 Feb 2010 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2010/02/15/calculate-endpointaddress-for-silverlight-client/</guid>
      <description>&lt;p&gt;Because Silverlight checks the origin it considers http://localhost and http://127.0.0.1 as different locations. In case you want your visitors to be able to use both addresses you can recalculate the address as following:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EndpointAddress GetEndpointAddress&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;EndpointAddress endpointAddress&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;var&lt;/span&gt; scheme &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; Application&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Current&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Host&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Source&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;GetComponents&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;UriComponents&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Scheme&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; UriFormat&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Unescaped&lt;span style=&#34;color:#1f2328&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;var&lt;/span&gt; serverAndPort &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; Application&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Current&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Host&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Source&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;GetComponents&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;UriComponents&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;HostAndPort&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; UriFormat&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Unescaped&lt;span style=&#34;color:#1f2328&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;var&lt;/span&gt; pathAndQuery &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; endpointAddress&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Uri&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;GetComponents&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;UriComponents&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;PathAndQuery&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; UriFormat&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Unescaped&lt;span style=&#34;color:#1f2328&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;new&lt;/span&gt; EndpointAddress&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;scheme &lt;span style=&#34;color:#1f2328&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;://&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;+&lt;/span&gt; serverAndPort &lt;span style=&#34;color:#1f2328&#34;&gt;+&lt;/span&gt; pathAndQuery&lt;span style=&#34;color:#1f2328&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And you can use this method as following:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;var&lt;/span&gt; client &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;new&lt;/span&gt; DirectoryServiceClient&lt;span style=&#34;color:#1f2328&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Endpoint&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Address &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; GetEndpointAddress&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;client&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Endpoint&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Address&lt;span style=&#34;color:#1f2328&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;GetMessageCompleted &lt;span style=&#34;color:#1f2328&#34;&gt;+=&lt;/span&gt; ClientGetMessageCompleted&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;GetMessageAsync&lt;span style=&#34;color:#1f2328&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Creating graphs with the Silverlight Toolkit</title>
      <link>https://timvw.be/2010/01/08/creating-graphs-with-the-silverlight-toolkit/</link>
      <pubDate>Fri, 08 Jan 2010 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2010/01/08/creating-graphs-with-the-silverlight-toolkit/</guid>
      <description>&lt;p&gt;As i wrote already: In a chart the elements on the X-axis are usually numbers or dates, and the elements on the Y-axis are usually doubles. We can define such a combination as following&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;Point&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;public&lt;/span&gt; T X &lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;double&lt;/span&gt; Y &lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is a little helper function for creating line series that are used by the &lt;a href=&#34;http://silverlight.codeplex.com/&#34;&gt;Silverlight Toolkit&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;public&lt;/span&gt; LineSeries Create&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;string&lt;/span&gt; title&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; Series&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;&lt;/span&gt; series&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; Func&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;t&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;&lt;/span&gt; f&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;where&lt;/span&gt; T &lt;span style=&#34;color:#1f2328&#34;&gt;:&lt;/span&gt; IComparable&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;var&lt;/span&gt; points &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; series&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Select&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#1f2328&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;new&lt;/span&gt; Point&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt; X &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; Y &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;});&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;var&lt;/span&gt; lineSeries &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;new&lt;/span&gt; LineSeries&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Title &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; title&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;ItemsSource &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; points&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;IndependentValuePath &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;DependentValuePath &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#1f2328&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;return&lt;/span&gt; lineSeries&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given all this infrastructure we can easily draw the graph of a function:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Silverlight and unit testing..</title>
      <link>https://timvw.be/2009/11/19/silverlight-and-unit-testing../</link>
      <pubDate>Thu, 19 Nov 2009 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2009/11/19/silverlight-and-unit-testing../</guid>
      <description>&lt;p&gt;A while ago i was looking for a unittesting framework that can be used with Silverlight. Because i don&amp;rsquo;t want to launch a webbrowser on my buildserver i ruled the &lt;a href=&#34;http://code.msdn.microsoft.com/silverlightut/&#34;&gt;Unit Test Framework for Microsoft Silverlight&lt;/a&gt; out. A couple of websearches later i decided to try a Silverlight port of good ol&amp;rsquo; NUnit, &lt;a href=&#34;http://code.google.com/p/nunitsilverlight/&#34;&gt;nunitsilverlight&lt;/a&gt;, and was pretty pleased with results.&lt;/p&gt;&#xA;&lt;p&gt;A couple of things to keep in mind though:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Make sure your test runner loads the correct System assembly (Possible solution: set Copy Local to true in your test project)&lt;/li&gt;&#xA;&lt;li&gt;In case your test runner has to run tests in both &amp;lsquo;regular&amp;rsquo; and &amp;lsquo;silverlight&amp;rsquo; assemblies, make sure that your runner uses separate AppDomains (For NUnit use the /Domain=Multiple option)&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Couple of methods missing on ObservableCollection</title>
      <link>https://timvw.be/2009/11/06/couple-of-methods-missing-on-observablecollection/</link>
      <pubDate>Fri, 06 Nov 2009 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2009/11/06/couple-of-methods-missing-on-observablecollection/</guid>
      <description>&lt;p&gt;Here are a couple of methods that are missing on &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms668604.aspx&#34;&gt;ObservableCollection&lt;T&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;ObservableCollectionExtensions&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;void&lt;/span&gt; AddRange&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;this&lt;/span&gt; ObservableCollection&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;&lt;/span&gt; observableCollection&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; IEnumerable&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;&lt;/span&gt; elements&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;var&lt;/span&gt; element &lt;span style=&#34;color:#cf222e&#34;&gt;in&lt;/span&gt; elements&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; observableCollection&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Add&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;element&lt;span style=&#34;color:#1f2328&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;static&lt;/span&gt; ObservableCollection&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;&lt;/span&gt; Create&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;(&lt;/span&gt;IEnumerable&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;&lt;/span&gt; elements&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;var&lt;/span&gt; observableCollection &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;new&lt;/span&gt; ObservableCollection&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;observableCollection&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;AddRange&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;elements&lt;span style=&#34;color:#1f2328&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;return&lt;/span&gt; observableCollection&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Separation of concerns: Behavior = Trigger &#43; TriggerAction</title>
      <link>https://timvw.be/2009/10/19/separation-of-concerns-behavior-trigger--triggeraction/</link>
      <pubDate>Mon, 19 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2009/10/19/separation-of-concerns-behavior-trigger--triggeraction/</guid>
      <description>&lt;p&gt;If you look at my &lt;a href=&#34;http://www.timvw.be/true-keybehavior-with-system-windows-interactivity-behavior/&#34;&gt;KeyBehavior&lt;/a&gt; you notice that it is doing two things: register for events so that the behavior can be triggered and handle the actual command invocation. In order to enhance reuse we can refactor this KeyBehavior in a KeyTrigger and an InvokeCommandAction. Well, we&amp;rsquo;re not going to do that, because they exist already in the silverlight sdk.&lt;/p&gt;&#xA;&lt;p&gt;A shortcoming of the InvokeCommandAction is that it can only invoke commands on the FrameworkElement itself, thus we write a custom implementation that finds commands on the DataContext instead&lt;/p&gt;</description>
    </item>
    <item>
      <title>True KeyBehavior with System.Windows.Interactivity.Behavior</title>
      <link>https://timvw.be/2009/10/19/true-keybehavior-with-system.windows.interactivity.behavior/</link>
      <pubDate>Mon, 19 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2009/10/19/true-keybehavior-with-system.windows.interactivity.behavior/</guid>
      <description>&lt;p&gt;Yesterday i demonstrated how attached properties can be used to invoke commands on specific key presses (and releases). With the aid of System.Windows.Interactivity.Behavior we can implement a true behavior and we get an extension point to do the required cleanup.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/BlendKeyBehavior.png&#34; alt=&#34;screenshot of Blend managing a KeyBehavior&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;grid&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;interactivity:Interaction.Behaviors&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;inf:KeyBehavior&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;inf:KeyBehavior.DownKeyCommands&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;inf:KeyCommandName&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;Right&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;PlayerRight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;inf:KeyCommandName&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;Left&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;PlayerLeft&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;inf:KeyCommandName&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;Up&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;PlayerUp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;inf:KeyCommandName&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;Down&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;PlayerDown&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;/inf:KeyBehavior.DownKeyCommands&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;/inf:KeyBehavior&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;/interactivity:Interaction.Behaviors&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;/grid&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The behavior implementation is the same as yesterday, only this time we thankfully override the OnAttached and OnDetaching methods&lt;/p&gt;</description>
    </item>
    <item>
      <title>Silverlight: leveraging attached properties to handle key events</title>
      <link>https://timvw.be/2009/10/17/silverlight-leveraging-attached-properties-to-handle-key-events/</link>
      <pubDate>Sat, 17 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2009/10/17/silverlight-leveraging-attached-properties-to-handle-key-events/</guid>
      <description>&lt;p&gt;I strongly believe that input handling is a responsability that belongs to the View. At first i simply added the following in the code-behind of my GameView&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;void&lt;/span&gt; OnKeyDown&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;KeyEventArgs e&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;base&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;OnKeyDown&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#1f2328&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Key &lt;span style=&#34;color:#1f2328&#34;&gt;==&lt;/span&gt; Key&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Left&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; Model&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;MovePlayerLeft&lt;span style=&#34;color:#1f2328&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#1f2328&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But i wanted to play with the cool kids so i exposed ICommand properties on my ViewModel instead and rewrote the code like this&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;void&lt;/span&gt; OnKeyDown&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;KeyEventArgs e&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;base&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;OnKeyDown&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#1f2328&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Key &lt;span style=&#34;color:#1f2328&#34;&gt;==&lt;/span&gt; Key&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Left&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; Model&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;PlayerLeft&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Execute&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#1f2328&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Offcourse, designers should not have to write code at all, thus i searched for a different solution. Because there isn&amp;rsquo;t a behavior that allows me to differentiate the command based on the actual key being pressed i wrote my own KeyEvents class which allows the designer to map a key to a command. Here is an example&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploring graphical programming with Blend, Visual State Manager and Behaviors</title>
      <link>https://timvw.be/2009/10/16/exploring-graphical-programming-with-blend-visual-state-manager-and-behaviors/</link>
      <pubDate>Fri, 16 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2009/10/16/exploring-graphical-programming-with-blend-visual-state-manager-and-behaviors/</guid>
      <description>&lt;p&gt;A while ago i presented the &lt;a href=&#34;http://www.timvw.be/experimenting-with-controlstatemachine-and-fluent-interfaces/&#34;&gt;ControlStateMachine&lt;/a&gt; and in Silverlight this concept is implemented as the &lt;a href=&#34;http://windowsclient.net/wpf/wpf35/wpf-35sp1-toolkit-visual-state-manager-overview.aspx&#34;&gt;Visual State Manager&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In my sokoban implementation i have a cellview which exists out of 6 canvasses but only two of them (one for the cell type and one for the piece type) are visible at any given point in time. I have implemented this with 6 properties CanvasXVisible (with X being Player, Box, Wall, Goal, Floor and Cell) in my ViewModel but a State Machine / Manager may help clarify how the visibility of the canvasses are related. Here are the 2 visual state groups and their states that i would need for the CellView&lt;/p&gt;</description>
    </item>
    <item>
      <title>About databinding and composite views</title>
      <link>https://timvw.be/2009/10/13/about-databinding-and-composite-views/</link>
      <pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2009/10/13/about-databinding-and-composite-views/</guid>
      <description>&lt;p&gt;A couple of days ago i had a databound ItemsControl (collection of Model.Cell) which instantiated sub views (with their own viewmodel).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;grid&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;grid.Resources&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;dataTemplate&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;x:Key=&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;CellTemplate&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;views:CellView&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;/dataTemplate&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;/grid.Resources&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;itemsControl&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;ItemTemplate=&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;{StaticResource CellTemplate}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;ItemsSource=&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;{Binding Cells}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;/grid&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because each CellViewModel needs to know which cell they manage i used the following dirty hack&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;public&lt;/span&gt; CellView&lt;span style=&#34;color:#1f2328&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;Loaded &lt;span style=&#34;color:#1f2328&#34;&gt;+=&lt;/span&gt; CellView_Loaded&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;void&lt;/span&gt; CellView_Loaded&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;object&lt;/span&gt; sender&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; RoutedEventArgs e&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;DataContext &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;new&lt;/span&gt; CellViewModel&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;DataContext&lt;span style=&#34;color:#1f2328&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Later on that day i realised there was a much cleaner solution: Let the BoardViewModel expose a collection of ViewModels.CellViewModel instead of Model.Cell. What a relief that i don&amp;rsquo;t have to use the Loaded event hack.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploring M-V-VM</title>
      <link>https://timvw.be/2009/10/13/exploring-m-v-vm/</link>
      <pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2009/10/13/exploring-m-v-vm/</guid>
      <description>&lt;p&gt;A couple of years ago a collegue recommended &lt;a href=&#34;http://www.amazon.com/Data-Binding-Windows-Forms-2-0/dp/032126892X&#34;&gt;Data Binding with Windows Forms 2.0: Programming Smart Client Data Applications with .NET&lt;/a&gt; and i noticed that my code started to gravitate towards an &lt;a href=&#34;http://en.wikipedia.org/wiki/Model_View_ViewModel&#34;&gt;Model-View-ViewModel&lt;/a&gt; architecture. Due to shortcomings and painful experiences i gave up on databinding and began to use &lt;a href=&#34;http://martinfowler.com/eaaDev/PassiveScreen.html&#34;&gt;Passieve View&lt;/a&gt; instead.&lt;/p&gt;&#xA;&lt;p&gt;Passive View doesn&amp;rsquo;t work (well) with smart views so i decided to give M-V-VM another because i really wanted to leverage WPF&amp;rsquo;s rich support for databinding.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ViewModel to translate domain messages to view events</title>
      <link>https://timvw.be/2009/10/13/viewmodel-to-translate-domain-messages-to-view-events/</link>
      <pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2009/10/13/viewmodel-to-translate-domain-messages-to-view-events/</guid>
      <description>&lt;p&gt;Here is an example of a ViewModel that translates domain messages to view events:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;GameViewModel&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;:&lt;/span&gt; INotifyPropertyChanged&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; IListener&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;boardChanged&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;public&lt;/span&gt; GameViewModel&lt;span style=&#34;color:#1f2328&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;var&lt;/span&gt; messageBus &lt;span style=&#34;color:#1f2328&#34;&gt;=&lt;/span&gt; ServiceLocator&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;MessageBus&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;messageBus&lt;span style=&#34;color:#1f2328&#34;&gt;.&lt;/span&gt;Subscribe&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;boardChanged&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#cf222e&#34;&gt;void&lt;/span&gt; IListener&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;lt;&lt;/span&gt;boardChanged&lt;span style=&#34;color:#1f2328&#34;&gt;&amp;gt;.&lt;/span&gt;Handle&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;BoardChanged message&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#1f2328&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;PropertyChanged&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;Board&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Sokoban: Creating graphics with Expression Design</title>
      <link>https://timvw.be/2009/10/12/sokoban-creating-graphics-with-expression-design/</link>
      <pubDate>Mon, 12 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2009/10/12/sokoban-creating-graphics-with-expression-design/</guid>
      <description>&lt;p&gt;Earlier this morning i decided to improve the graphics the little. I launched Expression Design, created a new image, and drew each possible cell and piece in a seperate layer. With this technique i can easily preview how a &amp;ldquo;Box&amp;rdquo; on &amp;ldquo;Goal&amp;rdquo; looks like.&lt;/p&gt;&#xA;&lt;p&gt;For each layer i simply copied the XAML from Expression Design into my Cell.xaml file. Apparently all the layers are interpreted as a Canvas and the layer name determines their x:Name which makes it pretty easy to make the correct canvasses visible. With a simple ScaleTransform i can ensure that the canvasses are sized correctly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Presenting Sokoban with Silverlight</title>
      <link>https://timvw.be/2009/10/10/presenting-sokoban-with-silverlight/</link>
      <pubDate>Sat, 10 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2009/10/10/presenting-sokoban-with-silverlight/</guid>
      <description>&lt;p&gt;Despite the blablah postings, i have been able to code a little, so here is the boomboom: Sokoban.&lt;/p&gt;&#xA;&lt;div id=&#34;silverlightControlHost&#34;&gt;&#xA;  &lt;br /&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Silverlight wishlist</title>
      <link>https://timvw.be/2009/10/10/silverlight-wishlist/</link>
      <pubDate>Sat, 10 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://timvw.be/2009/10/10/silverlight-wishlist/</guid>
      <description>&lt;p&gt;Here are the features that i would love to see in Silverlight:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Allow users to copy text from the UI (Or was the UX argument an excuse for playing with new toys?)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;MSTEST (I know that [Here are the features that i would love to see in Silverlight:&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Allow users to copy text from the UI (Or was the UX argument an excuse for playing with new toys?)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;MSTEST (I know that](&lt;a href=&#34;http://code.msdn.microsoft.com/silverlightut/&#34;&gt;http://code.msdn.microsoft.com/silverlightut/&lt;/a&gt;) exists.)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
