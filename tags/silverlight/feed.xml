<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Silverlight on Tim Van Wassenhove</title><link>https://timvw.be/tags/silverlight/</link><description>Recent content in Silverlight on Tim Van Wassenhove</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 15 Feb 2010 00:00:00 +0000</lastBuildDate><atom:link href="https://timvw.be/tags/silverlight/feed.xml" rel="self" type="application/rss+xml"/><item><title>Calculate EndpointAddress for Silverlight client</title><link>https://timvw.be/2010/02/15/calculate-endpointaddress-for-silverlight-client/</link><pubDate>Mon, 15 Feb 2010 00:00:00 +0000</pubDate><guid>https://timvw.be/2010/02/15/calculate-endpointaddress-for-silverlight-client/</guid><description>Because Silverlight checks the origin it considers http://localhost and http://127.0.0.1 as different locations. In case you want your visitors to be able to use both addresses you can recalculate the address as following:
EndpointAddress GetEndpointAddress(EndpointAddress endpointAddress) { var scheme = Application.Current.Host.Source.GetComponents(UriComponents.Scheme, UriFormat.Unescaped); var serverAndPort = Application.Current.Host.Source.GetComponents(UriComponents.HostAndPort, UriFormat.Unescaped); var pathAndQuery = endpointAddress.Uri.GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped); return new EndpointAddress(scheme + &amp;#34;://&amp;#34; + serverAndPort + pathAndQuery); } And you can use this method as following:</description></item><item><title>Creating graphs with the Silverlight Toolkit</title><link>https://timvw.be/2010/01/08/creating-graphs-with-the-silverlight-toolkit/</link><pubDate>Fri, 08 Jan 2010 00:00:00 +0000</pubDate><guid>https://timvw.be/2010/01/08/creating-graphs-with-the-silverlight-toolkit/</guid><description>As i wrote already: In a chart the elements on the X-axis are usually numbers or dates, and the elements on the Y-axis are usually doubles. We can define such a combination as following
public class Point&amp;lt;T&amp;gt; { public T X { get; set; } public double Y { get; set; } } Here is a little helper function for creating line series that are used by the Silverlight Toolkit:</description></item><item><title>Silverlight and unit testing..</title><link>https://timvw.be/2009/11/19/silverlight-and-unit-testing../</link><pubDate>Thu, 19 Nov 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/11/19/silverlight-and-unit-testing../</guid><description>A while ago i was looking for a unittesting framework that can be used with Silverlight. Because i don&amp;rsquo;t want to launch a webbrowser on my buildserver i ruled the Unit Test Framework for Microsoft Silverlight out. A couple of websearches later i decided to try a Silverlight port of good ol&amp;rsquo; NUnit, nunitsilverlight, and was pretty pleased with results.
A couple of things to keep in mind though:
Make sure your test runner loads the correct System assembly (Possible solution: set Copy Local to true in your test project) In case your test runner has to run tests in both &amp;lsquo;regular&amp;rsquo; and &amp;lsquo;silverlight&amp;rsquo; assemblies, make sure that your runner uses separate AppDomains (For NUnit use the /Domain=Multiple option)</description></item><item><title>Couple of methods missing on ObservableCollection</title><link>https://timvw.be/2009/11/06/couple-of-methods-missing-on-observablecollection/</link><pubDate>Fri, 06 Nov 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/11/06/couple-of-methods-missing-on-observablecollection/</guid><description>Here are a couple of methods that are missing on ObservableCollection
public static class ObservableCollectionExtensions { public static void AddRange&amp;lt;T&amp;gt;(this ObservableCollection&amp;lt;T&amp;gt; observableCollection, IEnumerable&amp;lt;T&amp;gt; elements) { foreach (var element in elements) observableCollection.Add(element); } public static ObservableCollection&amp;lt;T&amp;gt; Create&amp;lt;T&amp;gt;(IEnumerable&amp;lt;T&amp;gt; elements) { var observableCollection = new ObservableCollection&amp;lt;T&amp;gt;(); observableCollection.AddRange(elements); return observableCollection; } }</description></item><item><title>Separation of concerns: Behavior = Trigger + TriggerAction</title><link>https://timvw.be/2009/10/19/separation-of-concerns-behavior-trigger--triggeraction/</link><pubDate>Mon, 19 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/19/separation-of-concerns-behavior-trigger--triggeraction/</guid><description>If you look at my KeyBehavior you notice that it is doing two things: register for events so that the behavior can be triggered and handle the actual command invocation. In order to enhance reuse we can refactor this KeyBehavior in a KeyTrigger and an InvokeCommandAction. Well, we&amp;rsquo;re not going to do that, because they exist already in the silverlight sdk.
A shortcoming of the InvokeCommandAction is that it can only invoke commands on the FrameworkElement itself, thus we write a custom implementation that finds commands on the DataContext instead</description></item><item><title>True KeyBehavior with System.Windows.Interactivity.Behavior</title><link>https://timvw.be/2009/10/19/true-keybehavior-with-system.windows.interactivity.behavior/</link><pubDate>Mon, 19 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/19/true-keybehavior-with-system.windows.interactivity.behavior/</guid><description>Yesterday i demonstrated how attached properties can be used to invoke commands on specific key presses (and releases). With the aid of System.Windows.Interactivity.Behavior we can implement a true behavior and we get an extension point to do the required cleanup.
&amp;lt;grid&amp;gt; &amp;lt;interactivity:Interaction.Behaviors&amp;gt; &amp;lt;inf:KeyBehavior&amp;gt; &amp;lt;inf:KeyBehavior.DownKeyCommands&amp;gt; &amp;lt;inf:KeyCommandName Key=&amp;#34;Right&amp;#34; CommandName=&amp;#34;PlayerRight&amp;#34; /&amp;gt; &amp;lt;inf:KeyCommandName Key=&amp;#34;Left&amp;#34; CommandName=&amp;#34;PlayerLeft&amp;#34; /&amp;gt; &amp;lt;inf:KeyCommandName Key=&amp;#34;Up&amp;#34; CommandName=&amp;#34;PlayerUp&amp;#34; /&amp;gt; &amp;lt;inf:KeyCommandName Key=&amp;#34;Down&amp;#34; CommandName=&amp;#34;PlayerDown&amp;#34; /&amp;gt; &amp;lt;/inf:KeyBehavior.DownKeyCommands&amp;gt; &amp;lt;/inf:KeyBehavior&amp;gt; &amp;lt;/interactivity:Interaction.</description></item><item><title>Silverlight: leveraging attached properties to handle key events</title><link>https://timvw.be/2009/10/17/silverlight-leveraging-attached-properties-to-handle-key-events/</link><pubDate>Sat, 17 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/17/silverlight-leveraging-attached-properties-to-handle-key-events/</guid><description>I strongly believe that input handling is a responsability that belongs to the View. At first i simply added the following in the code-behind of my GameView
protected override void OnKeyDown(KeyEventArgs e) { base.OnKeyDown(e); if (e.Key == Key.Left) Model.MovePlayerLeft(); ... } But i wanted to play with the cool kids so i exposed ICommand properties on my ViewModel instead and rewrote the code like this
protected override void OnKeyDown(KeyEventArgs e) { base.</description></item><item><title>Exploring graphical programming with Blend, Visual State Manager and Behaviors</title><link>https://timvw.be/2009/10/16/exploring-graphical-programming-with-blend-visual-state-manager-and-behaviors/</link><pubDate>Fri, 16 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/16/exploring-graphical-programming-with-blend-visual-state-manager-and-behaviors/</guid><description>A while ago i presented the ControlStateMachine and in Silverlight this concept is implemented as the Visual State Manager.
In my sokoban implementation i have a cellview which exists out of 6 canvasses but only two of them (one for the cell type and one for the piece type) are visible at any given point in time. I have implemented this with 6 properties CanvasXVisible (with X being Player, Box, Wall, Goal, Floor and Cell) in my ViewModel but a State Machine / Manager may help clarify how the visibility of the canvasses are related.</description></item><item><title>About databinding and composite views</title><link>https://timvw.be/2009/10/13/about-databinding-and-composite-views/</link><pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/13/about-databinding-and-composite-views/</guid><description>A couple of days ago i had a databound ItemsControl (collection of Model.Cell) which instantiated sub views (with their own viewmodel).
&amp;lt;grid&amp;gt; &amp;lt;grid.Resources&amp;gt; &amp;lt;dataTemplate x:Key=&amp;#34;CellTemplate&amp;#34;&amp;gt; &amp;lt;views:CellView /&amp;gt; &amp;lt;/dataTemplate&amp;gt; &amp;lt;/grid.Resources&amp;gt; &amp;lt;itemsControl ItemTemplate=&amp;#34;{StaticResource CellTemplate}&amp;#34; ItemsSource=&amp;#34;{Binding Cells}&amp;#34; /&amp;gt; &amp;lt;/grid&amp;gt; Because each CellViewModel needs to know which cell they manage i used the following dirty hack
public CellView() { Loaded += CellView_Loaded; } void CellView_Loaded(object sender, RoutedEventArgs e) { DataContext = new CellViewModel(DataContext); } Later on that day i realised there was a much cleaner solution: Let the BoardViewModel expose a collection of ViewModels.</description></item><item><title>Exploring M-V-VM</title><link>https://timvw.be/2009/10/13/exploring-m-v-vm/</link><pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/13/exploring-m-v-vm/</guid><description>A couple of years ago a collegue recommended Data Binding with Windows Forms 2.0: Programming Smart Client Data Applications with .NET and i noticed that my code started to gravitate towards an Model-View-ViewModel architecture. Due to shortcomings and painful experiences i gave up on databinding and began to use Passieve View instead.
Passive View doesn&amp;rsquo;t work (well) with smart views so i decided to give M-V-VM another because i really wanted to leverage WPF&amp;rsquo;s rich support for databinding.</description></item><item><title>ViewModel to translate domain messages to view events</title><link>https://timvw.be/2009/10/13/viewmodel-to-translate-domain-messages-to-view-events/</link><pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/13/viewmodel-to-translate-domain-messages-to-view-events/</guid><description>Here is an example of a ViewModel that translates domain messages to view events:
class GameViewModel : INotifyPropertyChanged, IListener&amp;lt;boardChanged&amp;gt; { public event PropertyChangedEventHandler PropertyChanged = delegate { }; public GameViewModel() { var messageBus = ServiceLocator.MessageBus; messageBus.Subscribe&amp;lt;boardChanged&amp;gt;(this); } void IListener&amp;lt;boardChanged&amp;gt;.Handle(BoardChanged message) { PropertyChanged(&amp;#34;Board&amp;#34;); } }</description></item><item><title>Sokoban: Creating graphics with Expression Design</title><link>https://timvw.be/2009/10/12/sokoban-creating-graphics-with-expression-design/</link><pubDate>Mon, 12 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/12/sokoban-creating-graphics-with-expression-design/</guid><description>Earlier this morning i decided to improve the graphics the little. I launched Expression Design, created a new image, and drew each possible cell and piece in a seperate layer. With this technique i can easily preview how a &amp;ldquo;Box&amp;rdquo; on &amp;ldquo;Goal&amp;rdquo; looks like.
For each layer i simply copied the XAML from Expression Design into my Cell.xaml file. Apparently all the layers are interpreted as a Canvas and the layer name determines their x:Name which makes it pretty easy to make the correct canvasses visible.</description></item><item><title>Presenting Sokoban with Silverlight</title><link>https://timvw.be/2009/10/10/presenting-sokoban-with-silverlight/</link><pubDate>Sat, 10 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/10/presenting-sokoban-with-silverlight/</guid><description>Despite the blablah postings, i have been able to code a little, so here is the boomboom: Sokoban.</description></item><item><title>Silverlight wishlist</title><link>https://timvw.be/2009/10/10/silverlight-wishlist/</link><pubDate>Sat, 10 Oct 2009 00:00:00 +0000</pubDate><guid>https://timvw.be/2009/10/10/silverlight-wishlist/</guid><description>Here are the features that i would love to see in Silverlight:
Allow users to copy text from the UI (Or was the UX argument an excuse for playing with new toys?)
MSTEST (I know that [Here are the features that i would love to see in Silverlight:
Allow users to copy text from the UI (Or was the UX argument an excuse for playing with new toys?</description></item></channel></rss>