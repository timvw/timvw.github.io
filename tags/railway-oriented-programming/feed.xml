<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>railway oriented programming on Tim Van Wassenhove</title>
    <link>https://timvw.be/tags/railway-oriented-programming/</link>
    <description>Recent content in railway oriented programming on Tim Van Wassenhove</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://timvw.be/tags/railway-oriented-programming/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Composing functions and leveraging scala.util.Try</title>
      <link>https://timvw.be/2016/01/29/composing-functions-and-leveraging-scala.util.try/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://timvw.be/2016/01/29/composing-functions-and-leveraging-scala.util.try/</guid>
      <description>Last couple of days I have been hacking around trying to find a cute way to express the intent of my code. Typically it involves parsing some input, validating whatever rules that are in charge and persisting some values. In scala one can compose such a function by using the andThen method. Here is a concrete example:
def id(x: String) = x def parseInput = id _ def validate = id _ def persist = id _ def usecase1 = parseInput andThen validate andThen persist Inspired by the excellent series on Railway Oriented Programming series by Scott Wlaschin I wanted to take advange of scala.</description>
    </item>
    
  </channel>
</rss>
