<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tim Van Wassenhove&#39;s blog</title>
    <link>/</link>
    <description>Recent content on Tim Van Wassenhove&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leverage Terraform to create virtual machine scaleset with spot instances</title>
      <link>/post/2020-12-09-terraform-azure-k8s-spot/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-12-09-terraform-azure-k8s-spot/</guid>
      <description>
        
          &lt;p&gt;In a &lt;a href=&#34;https://timvw.be/2020/02/10/terraform-azure-k8s-nginx-letsencrypt.html&#34;&gt;previous&lt;/a&gt; post I demonstrated how easy it has become to deploy a webapplications with an HTTPS backend on Kubernetes and Azure. Let&amp;rsquo;s expand this cluster with a node pool that is backed by &lt;a href=&#34;https://azure.microsoft.com/en-us/pricing/spot/&#34;&gt;spot&lt;/a&gt; instances:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;resource &amp;#34;azurerm_kubernetes_cluster_node_pool&amp;#34; &amp;#34;spot&amp;#34; {&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;name                  = &amp;#34;spot&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;kubernetes_cluster_id = azurerm_kubernetes_cluster.k8s.id&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;vm_size         = &amp;#34;standard_D2s_v4&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#ae81ff&#34;&gt;node_count      = 0&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;enable_auto_scaling = true&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;min_count = 0&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;max_count = 5&lt;/span&gt;

    &lt;span style=&#34;color:#ae81ff&#34;&gt;priority = &amp;#34;Spot&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;eviction_policy = &amp;#34;Delete&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;spot_max_price = 0.02&lt;/span&gt;

    &lt;span style=&#34;color:#ae81ff&#34;&gt;tags       = var.tags&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The nodes in this pool will be &lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/&#34;&gt;tainted&lt;/a&gt; with kubernetes.azure.com/scalesetpriority=spot:NoSchedule.&lt;/p&gt;
&lt;p&gt;For a pod to land on a node in this pool you will have to specify a toleration. Here is how you would do this in &lt;a href=&#34;https://spark.apache.org/&#34;&gt;Apache Spark&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;First create a pod.yml file in which you specify the toleration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;cluster-autoscaler.kubernetes.io/safe-to-evict&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;tolerations&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kubernetes.azure.com/scalesetpriority&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;operator&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Equal&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spot&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;effect&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NoSchedule&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now you can submit the app&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./bin/spark-submit &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --master k8s://$KUBERNETES_MASTER_API &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --deploy-mode cluster &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name spark-pi &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --class org.apache.spark.examples.SparkPi &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --conf spark.executor.instances&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --conf spark.kubernetes.container.image&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;timvw/spark:3.0.1-hadoop2.7 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --conf spark.kubernetes.driver.podTemplateFile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pod.yml &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --conf spark.kubernetes.executor.podTemplateFile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pod.yml &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --conf spark.kubernetes.node.selector.agentpool&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;spot &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  local:///opt/spark/examples/jars/spark-examples_2.12-3.0.1.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Leverage Terraform, NGINX Ingress Controller, cert-manager and Let&#39;s Encrypt to quickly create a Kubernetes cluster on AWS.</title>
      <link>/post/2020-02-25-terraform-aws-k8s-nginx-letsencrypt/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-02-25-terraform-aws-k8s-nginx-letsencrypt/</guid>
      <description>
        
          &lt;p&gt;In my &lt;a href=&#34;https://timvw.be/2020/02/10/terraform-azure-k8s-nginx-letsencrypt.html&#34;&gt;previous&lt;/a&gt; post I demonstrated how easy it has become to deploy a webapplications with an HTTPS backend on Kubernetes and Azure. In this post I demonstrate the same but on AWS.&lt;/p&gt;
&lt;p&gt;In order to follow along you should clone the sample code from this &lt;a href=&#34;https://github.com/timvw/sample-terraform-aws-k8s-nginx-letsencrypt&#34;&gt;repository&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/timvw/sample-terraform-aws-k8s-nginx-letsencrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First &lt;a href=&#34;hhttps://www.terraform.io/docs/providers/aws/index.html&#34;&gt;configure the aws access_key and secret_key for Terraform&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export AWS_ACCESS_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XXXXXXXXXXXXXXXXXX&amp;#34;&lt;/span&gt;
export AWS_SECRET_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XXXXXXXXXXXXXXXXXX&amp;#34;&lt;/span&gt;
export AWS_DEFAULT_REGION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eu-west-1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With all this configuration in place we can instruct Terraform to create the kubernetes cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;terraform init
terraform apply -auto-approve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After a couple (~15) of minutes your cluster will be ready. Importing the credentials into your ~/.kube/config can be done as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are some differences with AKS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On AKS a client and key certificate are added to your kubeconfig. On EKS an entry is added which invokes aws eks get-token&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On EKS the Kubernetes master runs in a different network and you need to provision such that the &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html&#34;&gt;nodegroups&lt;/a&gt; can connect to this master. In my example this is achieved by installing an &lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html&#34;&gt;internet gateway&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another remark: In case you try to create a &lt;a href=&#34;https://www.terraform.io/docs/providers/aws/r/eks_fargate_profile.html&#34;&gt;Fargate profile&lt;/a&gt; and it fails you should verify that you are doing it in a &lt;a href=&#34;https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/&#34;&gt;supported region&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now it is time to &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/deploy/&#34;&gt;deploy the NGINX Ingress Controller&lt;/a&gt;. We also need to apply the &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/deploy/#aws&#34;&gt;aws specific&lt;/a&gt; additions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/mandatory.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/provider/aws/service-l4.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/provider/aws/patch-configmap-l4.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Deploying the NGINX Ingress Controller results in the creation of a loadbalancer and a public ip. Here is how you can fetch that address:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws elb describe-load-balancers | jq -r &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.LoadBalancerDescriptions[].DNSName&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example we want to access our applications as &lt;a href=&#34;https://XXX.aws.icteam.be&#34;&gt;https://XXX.aws.icteam.be&lt;/a&gt;.
We achieve this by adding an A-record (the azure public ip address) pointing to *.aws.icteam.be&lt;/p&gt;
&lt;p&gt;For the HTTPS part we &lt;a href=&#34;https://cert-manager.io/docs/installation/kubernetes/&#34;&gt;install cert-manager&lt;/a&gt; and use &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; to provide certificates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply --validate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false -f https://github.com/jetstack/cert-manager/releases/download/v0.13.0/cert-manager.yaml
kubectl apply -f letsencrypt.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With all this infrastructure in place we can deploy a sample application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl create deployment hello-node --image&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gcr.io/hello-minikube-zero-install/hello-node
kubectl expose deployment hello-node --port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
kubectl apply -f hello-node-ingress.yaml 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or we can &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/dashboard-tutorial.html&#34;&gt;deploy&lt;/a&gt; and expose the kubernetes dashboard:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml
kubectl apply -f dashboard-sa.yaml
kubectl apply -f dashboard-ingress.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can fetch the token as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl -n kube-system describe secret &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;kubectl -n kube-system get secret | grep eks-admin | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Leverage Terraform, NGINX Ingress Controller, cert-manager and Let&#39;s Encrypt to quickly create a Kubernetes cluster which can serve webapps over HTTPS.</title>
      <link>/post/2020-02-10-terraform-azure-k8s-nginx-letsencrypt/</link>
      <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-02-10-terraform-azure-k8s-nginx-letsencrypt/</guid>
      <description>
        
          &lt;p&gt;In this post I demonstrate how easy it has become to create a kubernetes cluster which serves webapplications over HTTPS.&lt;/p&gt;
&lt;p&gt;In order to follow along you should clone the sample code from this &lt;a href=&#34;https://github.com/timvw/sample-terraform-azure-k8s-nginx-letsencrypt&#34;&gt;repository&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/timvw/sample-terraform-azure-k8s-nginx-letsencrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First &lt;a href=&#34;https://www.terraform.io/docs/providers/azurerm/guides/service_principal_client_secret.html&#34;&gt;configure the azure service principal for Terraform&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export ARM_CLIENT_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XXXXX-XXXXX-XXXXX-XXXXX-XXXXX&amp;#34;&lt;/span&gt;
export ARM_CLIENT_SECRET&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XXXXX-XXXXX-XXXXX-XXXXX-XXXXX&amp;#34;&lt;/span&gt;
export ARM_SUBSCRIPTION_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XXXXX-XXXXX-XXXXX-XXXXX-XXXXX&amp;#34;&lt;/span&gt;
export ARM_TENANT_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XXXXX-XXXXX-XXXXX-XXXXX-XXXXX&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The resources in this example depend on the following variables: client_id, client_secret, aks_service_principal_app_id and aks_service_principal_client_secret. One way to configure them is by exporting their values as a TF_VAR_xxx:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export TF_VAR_client_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$ARM_CLIENT_ID
export TF_VAR_client_secret&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$ARM_CLIENT_SECRET
export TF_VAR_aks_service_principal_app_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$ARM_CLIENT_ID
export TF_VAR_aks_service_principal_client_secret&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$ARM_CLIENT_SECRET
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With all this configuration in place we can instruct Terraform to create the kubernetes cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;terraform init
terraform apply -auto-approve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After a couple (~10) of minutes your cluster will be ready. Importing the credentials into your ~/.kube/config can be done as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;az aks get-credentials --resource-group k8s-test --name kaz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ahmetb/kubectx&#34;&gt;kubectx&lt;/a&gt; is an awesome tool that allows you to easily switch between contexts.&lt;/p&gt;
&lt;p&gt;Now it is time to &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/deploy/&#34;&gt;deploy the NGINX Ingress Controller&lt;/a&gt;. We also need to apply the &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/deploy/#azure&#34;&gt;azure specific&lt;/a&gt; additions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.28.0/deploy/static/mandatory.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.28.0/deploy/static/provider/cloud-generic.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Deploying the NGINX Ingress Controller results in the creation of a loadbalancer and a public ip. Here is how you can fetch that address:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;az network public-ip list | grep -Po &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(?&amp;lt;=&amp;#34;ipAddress&amp;#34;: &amp;#34;)([^&amp;#34;]*)&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example we want to access our applications as &lt;a href=&#34;https://XXX.apps.icteam.be&#34;&gt;https://XXX.apps.icteam.be&lt;/a&gt;.
We achieve this by adding an A-record (the azure public ip address) pointing to *.apps.icteam.be&lt;/p&gt;
&lt;p&gt;For the HTTPS part we &lt;a href=&#34;https://cert-manager.io/docs/installation/kubernetes/&#34;&gt;install cert-manager&lt;/a&gt; and use &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; to provide certificates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.13.0/cert-manager.yaml
kubectl apply -f letsencrypt.yaml 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With all this infrastructure in place we can deploy a sample application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl create deployment hello-node --image&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gcr.io/hello-minikube-zero-install/hello-node
kubectl expose deployment hello-node --port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
kubectl apply -f ingress.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can access our application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -v https://hello-node.apps.icteam.be
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are some useful commands to help with debugging:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# get some cluster info&lt;/span&gt;
kubectl cluster-info
kubectl proxy

&lt;span style=&#34;color:#75715e&#34;&gt;# follow logs of the ingress controller&lt;/span&gt;
kubectl logs -n ingress-nginx deployment/nginx-ingress-controller -f

&lt;span style=&#34;color:#75715e&#34;&gt;# restart the ingress controller&lt;/span&gt;
kubectl scale deployment -n ingress-nginx --replicas&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; nginx-ingress-controller
kubectl scale deployment -n ingress-nginx --replicas&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; nginx-ingress-controller
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remove the hello-node application (pods/deployment/service/ingress):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl delete all -l app&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hello-node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally you want to remove everything:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;terraform destroy -auto-approve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Looking back at 2016</title>
      <link>/post/2016-12-31-Looking-back-at-2016/</link>
      <pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-12-31-Looking-back-at-2016/</guid>
      <description>
        
          &lt;p&gt;Starting 2016 at Emergency Care was a game changer for me.&lt;/p&gt;
&lt;p&gt;On a personal level I have successfully changed my diet and lost 45kg (BMI went from 50 to 35), completed Start2Run (0-5km/30min) and Continue2Run (5-10km/60min). Looking forward to loosing more weight and getting a BMI &amp;lt; 30 again. Finishing a 1/2 marathon would be awesome too. Had plenty of quality family time as well!&lt;/p&gt;
&lt;p&gt;On a professional level I have changed focus from Enterprise Apps/.NET to Data intensive (Big Data, Augmented/Business Intelligence and a bit of Machine learning) mainly using Scala. Had some serious fun bringing a Kafka cluster in place as the central messaging interface in an industrial setting (24/7) continuously pushing &amp;gt; 1 million messages/sec. Became familiar with Docker and looking forward to see it replace Java Application Servers.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Parsing lines from Spark RDD</title>
      <link>/post/2016-11-20-parsing-lines-from-spark-rdd/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-11-20-parsing-lines-from-spark-rdd/</guid>
      <description>
        
          &lt;p&gt;A typical &lt;a href=&#34;http://spark.apache.org/&#34;&gt;Apache Spark&lt;/a&gt; application using RDD api starts as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; lines &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; sc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;textFile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/data&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; records &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;parseLineToRecord&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Record&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(...)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; parseLineToRecord&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;line&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Record&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; parts &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;Record&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(..)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case of bad records you very often want to discard the unparseable lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; parseLineToRecordOption&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;line&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Record&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Record&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(..))&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;None&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; records &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;parseLineToRecordOption&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;filter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isDefined&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then you discover that you there is an &lt;a href=&#34;https://github.com/scala/scala/blob/2.12.x/src/library/scala/Option.scala&#34;&gt;implicit conversion from Option[T] to Iterable[T]&lt;/a&gt;.
The nice thing is that you now can use flatMap instead of filter + map:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; records &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatMap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;parseLineToRecordOption&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Strangely enough there is no such implicit conversion for a Try[T] so we convert to Option first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; tryParseLineToRecordOption&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;line&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Try&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Record&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;Try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Record&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(..))&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; records &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tryParseLineToRecordOption&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;flatMap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toOption&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Blog migrated to Jekyll</title>
      <link>/post/2016-10-04-blog-migrated-to-jekyll/</link>
      <pubDate>Tue, 04 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-10-04-blog-migrated-to-jekyll/</guid>
      <description>
        
          &lt;p&gt;As many other people I have decided to leave Wordpress behind and move to Jekyll instead.&lt;/p&gt;
&lt;p&gt;Most posts have been migrated pretty well but I do not feel like bothering with them anymore.
In fact, some of them have become irrelevant, some of them are just wrong and others only attract spammers. In summary: they are not worth my time anymore. In case you really loved them, you can still send a pull-request :P&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Docker toolbox to the rescue</title>
      <link>/post/2016-10-01-docker-toolbox-to-the-rescue/</link>
      <pubDate>Sat, 01 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-10-01-docker-toolbox-to-the-rescue/</guid>
      <description>
        
          &lt;p&gt;With the help of &lt;a href=&#34;https://www.docker.com/products/docker-toolbox&#34;&gt;Docker Toolbox&lt;/a&gt; a lot of apps become easily available&amp;hellip;&lt;/p&gt;
&lt;p&gt;By default volumes can only be mapped on folders under the user home directory.&lt;/p&gt;
&lt;p&gt;Here is how to enable mapping of the entire c-drive&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# script to expose c-drive to docker vm and docker containers&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# stop the docker vm&lt;/span&gt;
docker-machine stop default
&lt;span style=&#34;color:#75715e&#34;&gt;# share your windows c-drive with the docker (host) vm&lt;/span&gt;
/c/Program&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;Files/Oracle/VirtualBox/VBoxManage.exe sharedfolder add default --name C_DRIVE --hostpath c:/
&lt;span style=&#34;color:#75715e&#34;&gt;# start the docker (host) vm&lt;/span&gt;
docker-machine start default
&lt;span style=&#34;color:#75715e&#34;&gt;# mount the c-drive in the docker (host) vm&lt;/span&gt;
docker-machine ssh default &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sudo chown docker /var/lib/boot2docker/profile &amp;amp;&amp;amp; echo mount -t vboxsf C_DRIVE /c &amp;gt;&amp;gt; /var/lib/boot2docker/profile&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples&lt;/p&gt;
&lt;p&gt;Amazon ECS (EC2 Container Service) cli tools&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -i -t -v &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//c/Users/timvw/.aws:/root/.aws&amp;#34;&lt;/span&gt; timvw/docker-aws
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jekyll (Yes, you can make it &lt;a href=&#34;https://jekyllrb.com/docs/windows/&#34;&gt;work on windows&lt;/a&gt; but why bother?)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -i -t -v &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//c/src/timvw.github.io:/opt/webiste&amp;#34;&lt;/span&gt; timvw/docker-jekyll
jekyll server --incremental --watch --force_polling
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>About maven dependency type &#39;bundle&#39;</title>
      <link>/post/2016-01-29-about-maven-dependency-type-bundle/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-01-29-about-maven-dependency-type-bundle/</guid>
      <description>
        
          &lt;p&gt;Earlier this week my build failed because maven was not able to resolve an (indirect) dependency on some package. It took me a while to notice that the dependency node in the pom file had an extra attribute: type = bundle. It only took a couple of minutes to find a good explanation &lt;a href=&#34;http://stackoverflow.com/questions/14913615/osgi-bundle-vs-jar-dependency&#34;&gt;here&lt;/a&gt;. Build fixed 😉&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Composing functions and leveraging scala.util.Try</title>
      <link>/post/2016-01-29-composing-functions-and-leveraging-scala-util-try/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-01-29-composing-functions-and-leveraging-scala-util-try/</guid>
      <description>
        
          &lt;p&gt;Last couple of days I have been hacking around trying to find a cute way to express the intent of my code. Typically it involves parsing some input, validating whatever rules that are in charge and persisting some values. In scala one can compose such a function by using the &lt;a href=&#34;http://www.scala-lang.org/api/2.11.x/index.html#scala.Function1&#34;&gt;andThen&lt;/a&gt; method. Here is a concrete example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; x  
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; parseInput &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; id &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; validate &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; id &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; persist &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; id &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; usecase1 &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; parseInput andThen validate andThen persist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inspired by the excellent series on &lt;a href=&#34;http://fsharpforfunandprofit.com/posts/recipe-part2/&#34;&gt;Railway Oriented Programming&lt;/a&gt; series by &lt;a href=&#34;@ScottWlaschin&#34;&gt;Scott Wlaschin&lt;/a&gt; I wanted to take advange of &lt;a href=&#34;http://www.scala-lang.org/files/archive/api/current/index.html#scala.util.Try&#34;&gt;scala.util.Try&lt;/a&gt; to remove try/catch clutter from my code. With a little helper function I can now compose my usecase as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; makeTry&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TIn&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;TOut&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;](&lt;/span&gt;fn&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TIn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TOut&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TIn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Try&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; usecase &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt;
	makeTry&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;parseInput andThen validate andThen persist&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; andThen
	processErrors andThen
	proceedOrRetry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of composing functions I could have also written code as a chain of values that are transformed by subsequent functions as following (Very much fsharp like):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pipe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;](&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;](&lt;/span&gt;f&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; U&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;implicit&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; toPipe&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;](&lt;/span&gt;x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pipe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; usecase&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; 
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Try&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; parseInput &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; validate &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; persist&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
	processErrors &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt;
	proceedOrRetry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, with scala there is more than one way to express something in an elegant way!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Using Gson to serialize Scala objects</title>
      <link>/post/2016-01-14-using-gson-to-serialize-scala-objects/</link>
      <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-01-14-using-gson-to-serialize-scala-objects/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;https://github.com/google/gson&#34;&gt;gson&lt;/a&gt; is a pretty nice library that converts Java objects into JSON and back. When using this library from Scala things become a bit harder (eg: Plenty of people have difficulties when their scala object has an (im)mutable Map or List).&lt;/p&gt;
&lt;p&gt;Here is an example to convert a JSON object to a Map[String,String]:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; com.google.gson.Gson
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; scala.collection.JavaConversions._

&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; mapJson &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ &amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39; }&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; map &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gson&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;fromJson&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mapJson&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; classOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;java.util.Map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we know that this works, we hide the java types in the constructor and expose a nicer scala type via a method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dummy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; settings&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;java.util.Map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; getSettings &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; settings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toMap
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; dummyJson &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ &amp;#39;settings&amp;#39; : { &amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39; } }&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; dummy &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gson&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;fromJson&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dummyJson&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; classOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Dummy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dummy2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; options&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;java.util.List&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; getOptions &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toList
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; dummy2Json &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ &amp;#39;options&amp;#39; : [ &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39; ] }&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; dummy2 &lt;span style=&#34;color:#66d9ef&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gson&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;fromJson&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dummy2Json&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; classOf&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Dummy2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; One could simply use &lt;a href=&#34;https://github.com/lift/lift/tree/master/framework/lift-base/lift-json&#34;&gt;lift-json&lt;/a&gt; instead and get pretty good scala support for free.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Notes on running spark-notebook</title>
      <link>/post/2015-08-27-notes-on-running-spark-notebook/</link>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-08-27-notes-on-running-spark-notebook/</guid>
      <description>
        
          &lt;p&gt;These days &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; makes it extremely easy to get started with virtually any application you like. At first I was a bit skeptical but over the last couple of months I have changed my mind. Now I strongly believe this is a game changer. Even more when it comes to Windows. Anyway, these days kitematic (GUI to manage docker images) allows you to simply pick the &lt;a href=&#34;https://github.com/andypetrella/spark-notebook&#34;&gt;spark-notebook&lt;/a&gt; by Andy Petrella.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2015/08/docker_pick_image.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When running your docker host in VirtualBox, you still need to set up port forwarding for port 9000 (the notebook) and ports 4040 to 4050 (spark-ui) Assuming your docker host vm is named default:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;VBoxManage modifyvm &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; --natpf1 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp-port9000,tcp,,9000,,9000&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These days &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; makes it extremely easy to get started with virtually any application you like. At first I was a bit skeptical but over the last couple of months I have changed my mind. Now I strongly believe this is a game changer. Even more when it comes to Windows. Anyway, these days kitematic (GUI to manage docker images) allows you to simply pick the &lt;a href=&#34;https://github.com/andypetrella/spark-notebook&#34;&gt;spark-notebook&lt;/a&gt; by Andy Petrella.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2015/08/docker_pick_image.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When running your docker host in VirtualBox, you still need to set up port forwarding for port 9000 (the notebook) and ports 4040 to 4050 (spark-ui) Assuming your docker host vm is named default:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;VBoxManage modifyvm &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; --natpf1 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp-port9000,tcp,,9000,,9000&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can browse to http://localhost:9000 and start using your new notebook:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2015/08/spark_notebook_home.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may want to copy the default set of notebooks to a local directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker cp $containerName:/opt/docker/notebooks /Users/timvw/notebooks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using that local copy is just a few clicks away with Kitematic:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2015/08/docker_notebook_settings.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Offcourse you want to use additional packages such as &lt;a href=&#34;https://github.com/databricks/spark-csv&#34;&gt;spark-csv&lt;/a&gt;. This can be achieved by editting the your notebook metadata:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2015/08/spark_notebook_metadata.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You simply need to add an entry to customDeps:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2015/08/spark_notebook_customdeps.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When your container did not shutdown correctly, you may end up in the awkward situation that your container believes that it is still running(). The following commands fix that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker start $containerName &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker exec -t -i $containerName /bin/rm /opt/docker/RUNNING_PID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Scaffolding scala projects</title>
      <link>/post/2015-08-19-scaffolding-scala-projects/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-08-19-scaffolding-scala-projects/</guid>
      <description>
        
          &lt;p&gt;These days the cool kids scaffold their projects with &lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt;. Obviously I could not stay behind, so here is my first &lt;a href=&#34;https://github.com/timvw/generator-scala&#34;&gt;generator for scala&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/2d553cce06333627904d8e33b61c91dfa7ae7bc4/687474703a2f2f692e696d6775722e636f6d2f4a4861416c424a2e706e67&#34; alt=&#34;&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>ConcurrencyCheck with EF/Devart on Oracle</title>
      <link>/post/2015-02-20-concurrencycheck-with-efdevart-on-oracle/</link>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-02-20-concurrencycheck-with-efdevart-on-oracle/</guid>
      <description>
        
          &lt;p&gt;Earlier this week I was wondering how I could easily achieve optimistic concurrency in a system using EF/Devart targetting an Oracle database (Not really my preferred technologies, but whatever:P). Here is a potential solution:&lt;/p&gt;
&lt;p&gt;Using a column for optimistic concurrency is documented on the devart website:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Table(&amp;#34;TEST&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt; : IRequireConcurrencyCheck  
{
	...
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[Required]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[Column(&amp;#34;VERSION&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[ConcurrencyCheck]&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// TELL EF to use this column as our &amp;#34;timestamp/logical version&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Version { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; } &lt;span style=&#34;color:#75715e&#34;&gt;// protected, so users of this type can not touch this (easily)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By introducing an interface that exposes a version number like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IRequireConcurrencyCheck
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Version { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; } 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With some custom behaviour on SaveChanges we can now take away the burden of having to update the Version property correctly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DataContext&lt;/span&gt; : DbContext
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DataContext(DbConnection existingConnection)  
		: &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(existingConnection, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)    
	{ 
		Database.SetInitializer&amp;lt;DataContext&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; SaveChanges()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; = ChangeTracker        
			.Entries&amp;lt;IRequireConcurrencyCheck&amp;gt;()
			.Where(x =&amp;gt; x.State == EntityState.Modified)	
			.ToArray();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; entity &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; entitiesWhichHaveConcurrencyCheck)
		{
			entity.Property&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(x =&amp;gt; x.Version).CurrentValue++;  
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.SaveChanges();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IDbSet&amp;lt;Test&amp;gt; Tests { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Failure to load mono-supplied .dylib (libgdiplus.dylib) when running from console</title>
      <link>/post/2014-09-27-failure-to-load-mono-supplied-dylib-libgdiplus-dylib-when-running-from-console/</link>
      <pubDate>Sat, 27 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-09-27-failure-to-load-mono-supplied-dylib-libgdiplus-dylib-when-running-from-console/</guid>
      <description>
        
          &lt;p&gt;So earlier this week I was bit by the following bug: &lt;a href=&#34;https://bugzilla.xamarin.com/show_bug.cgi?id=22140&#34;&gt;Bug 22140 &amp;ndash; Failure to load mono-supplied .dylib when running from console.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The workaround that works for me is the following: Edit /Library/Frameworks/Mono.framework/Versions/3.8.0/etc/mono/config and&lt;/p&gt;
&lt;p&gt;replace the entries for libgdiplus:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dllmap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dll=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gdiplus&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Library/Frameworks/Mono.framework/Versions/3.8.0/lib/libgdiplus.dylib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!windows&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dllmap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dll=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gdiplus.dll&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Library/Frameworks/Mono.framework/Versions/3.8.0/lib/libgdiplus.dylib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!windows&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dllmap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dll=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gdi32&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Library/Frameworks/Mono.framework/Versions/3.8.0/lib/libgdiplus.dylib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!windows&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dllmap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dll=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gdi32.dll&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Library/Frameworks/Mono.framework/Versions/3.8.0/lib/libgdiplus.dylib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!windows&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Deploying a Cloud Service to Azure with Octopus</title>
      <link>/post/2014-08-15-deploying-a-cloud-service-to-azure-with-octopus/</link>
      <pubDate>Fri, 15 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-08-15-deploying-a-cloud-service-to-azure-with-octopus/</guid>
      <description>
        
          &lt;p&gt;Currently Octopus has limited support to deploy a Cloud Service on Azure. A typical use-case is that you need a different Web.Config file per environment. Simply add the Web.Environment.Config files to your NuGet package and use the following &lt;a href=&#34;https://gist.github.com/timvw/4e32226dd1ff149b5eab.js&#34;&gt;PreDeploy.ps1&lt;/a&gt; script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Load unzip support&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[Reflection.Assembly]&lt;/span&gt;::LoadWithPartialName(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System.IO.Compression.FileSystem&amp;#34;&lt;/span&gt;) | Out-Null
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Unzip($zipFile, $destination)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;If&lt;/span&gt; (Test-Path $destination){	  
		Remove-Item $destination -Recurse | Out-Null
	}
	  
	New-Item -ItemType directory -Force -Path $destination | Out-Null  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;[System.IO.Compression.ZipFile]&lt;/span&gt;::ExtractToDirectory($zipFile, $destination) | Out-Null
}

&lt;span style=&#34;color:#75715e&#34;&gt;# Unzip deployment package  &lt;/span&gt;
$CsPkg = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Customer.Project.Api.Azure.cspkg&amp;#34;&lt;/span&gt;
Unzip $CsPkg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurePackage&amp;#34;&lt;/span&gt;
Unzip (Get-Item (join-path -path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azurePackage&amp;#34;&lt;/span&gt; -childPath &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.cssx&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Perform replacements, eg: replace Web.Config  &lt;/span&gt;
$ConfigFileToUse = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Web.&amp;#34;&lt;/span&gt; + $OctopusParameters[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Octopus.Environment.Name&amp;#34;&lt;/span&gt;] + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.config&amp;#34;&lt;/span&gt;
Copy-Item -Path $ConfigFileToUse -Destination &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website/sitesroot/0/Web.Config&amp;#34;&lt;/span&gt; -Force

&lt;span style=&#34;color:#75715e&#34;&gt;# Repackage  &lt;/span&gt;
$role = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Customer.Project.Api&amp;#34;&lt;/span&gt;
$contentPath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website\approot&amp;#34;&lt;/span&gt;
$rolePath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website/approot&amp;#34;&lt;/span&gt;
$webPath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;website/sitesroot/0&amp;#34;&lt;/span&gt;
$cspackPath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Program Files\Microsoft SDKs\Windows Azure\.NET SDK\v2.2\bin\cspack.exe&amp;#34;&lt;/span&gt;
&amp;amp; $cspackPath &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ServiceDefinition.csdef&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/out:$CsPkg&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/role:$role;$rolePath;Customer.Project.Api.dll&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/sites:$role;Web;$webPath&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/sitePhysicalDirectories:$role;Web;$webPath&amp;#34;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Cute sort implementation</title>
      <link>/post/2014-07-28-cute-sort-implementation/</link>
      <pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-07-28-cute-sort-implementation/</guid>
      <description>
        
          &lt;p&gt;For years I had been implementing my &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/tfakywbh(v=vs.110).aspx&#34;&gt;sort functions&lt;/a&gt; as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;(x,y) =&amp;gt; {  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x.PartName == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; y.PartName == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x.PartName == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y.PartName == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x.PartName.CompareTo(y.PartName);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Earlier today I found the following cute variant while browsing through the &lt;a href=&#34;https://github.com/ServiceStack/ServiceStack/blob/v3/src/ServiceStack/WebHost.Endpoints/Utils/FilterAttributeCache.cs&#34;&gt;ServiceStack&lt;/a&gt; codebase:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;(x,y) =&amp;gt; x.Priority - y.Priority  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Clone all your repositories on another machine</title>
      <link>/post/2014-04-23-clone-all-your-repositories-on-another-machine/</link>
      <pubDate>Wed, 23 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-04-23-clone-all-your-repositories-on-another-machine/</guid>
      <description>
        
          &lt;p&gt;Recently I was configuring a new machine (God, i love &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;) and I wanted to take all the repositories I have under c:/src and clone them on my new machine. Here is how i did that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# write all remote fetch locations into repositories.txt  &lt;/span&gt;
find /c/src -type d -mindepth &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -maxdepth &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -exec git -work-tree&lt;span style=&#34;color:#f92672&#34;&gt;={}&lt;/span&gt; -git-dir&lt;span style=&#34;color:#f92672&#34;&gt;={}&lt;/span&gt;/.git remote -v &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt; | grep fetch | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; &amp;gt; repositories.txt

&lt;span style=&#34;color:#75715e&#34;&gt;# clone each repository  &lt;/span&gt;
cat repositories.txt | xargs -l1 git clone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or as a gist: &lt;a href=&#34;https://gist.github.com/timvw/11208834&#34;&gt;https://gist.github.com/timvw/11208834&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>A parameterized active pattern to match the first elements of an array</title>
      <link>/post/2014-01-30-a-parameterized-active-pattern-to-match-the-first-elements-of-an-array/</link>
      <pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-01-30-a-parameterized-active-pattern-to-match-the-first-elements-of-an-array/</guid>
      <description>
        
          &lt;p&gt;Been writing code in F# for almost a year and never blogged about it. Time to change that. Earlier today someone asked the following on twitter:&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Is it possible to pattern match the first part of an array in #FSharp? Something like | 1::2::3::tail but for arrays? #lazyweb&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;I accepted the challenge :)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(|&lt;/span&gt;Array&lt;span style=&#34;color:#f92672&#34;&gt;|_|)&lt;/span&gt; pattern toMatch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;      
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; patternLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Array.length pattern
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; toMatchLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Array.length toMatch
	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tailLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; toMatchLength &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; patternLength

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; patternLength &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; toMatchLength &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
		None
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; firstElementsAreEqual &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; 0 &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;patternLength &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.forall &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; pattern&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; toMatch&lt;span style=&#34;color:#f92672&#34;&gt;.[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;
          
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; firstElementsAreEqual &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
			Some&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Array.sub toMatch patternLength tailLength&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; 
			None
		
&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[|&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;|]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Array &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[|&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;|]&lt;/span&gt; tail &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; sprintf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bingo %i&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tail &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Array.sum&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// the tail is [|2;3|\]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or as a gist: &lt;a href=&#34;https://gist.github.com/timvw/8717796&#34;&gt;https://gist.github.com/timvw/8717796&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Comments are disabled on this blog</title>
      <link>/post/2014-01-23-comments-are-disabled-on-this-blog/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-01-23-comments-are-disabled-on-this-blog/</guid>
      <description>
        
          &lt;p&gt;As of now comments are disabled on this blog. Want to reply? Write your own post and pingback or engage a conversation on twitter with &lt;a href=&#34;https://twitter.com/timvw&#34;&gt;@timvw&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>The curious case of trailing spaces in SQL</title>
      <link>/post/2013-04-27-the-curious-case-of-trailing-spaces-in-sql/</link>
      <pubDate>Sat, 27 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-04-27-the-curious-case-of-trailing-spaces-in-sql/</guid>
      <description>
        
          &lt;p&gt;A while ago I was quite surprised to see that the following query returns 1 instead of 0:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; N&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Tim&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Tim &amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;-- notice the trailing space
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apparently this is just standard behaviour. Here is an extract from &lt;a href=&#34;http://www.andrew.cmu.edu/user/shadow/sql/sql1992.txt&#34;&gt;sql1992.txt&lt;/a&gt; (Section 8.2 Paragraph 3):&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;

        
      </description>
    </item>
    
    <item>
      <title>Sample query to demonstrate influence of collation in Sql Server</title>
      <link>/post/2012-10-18-sample-query-to-demonstrate-influence-of-collation-in-sql-server/</link>
      <pubDate>Thu, 18 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-10-18-sample-query-to-demonstrate-influence-of-collation-in-sql-server/</guid>
      <description>
        
          &lt;p&gt;Lately I had the pleasure to investigate &lt;a href=&#34;http://technet.microsoft.com/en-us/library/aa174903(v=sql.80).aspx&#34;&gt;collations&lt;/a&gt; and here is a sample query that demonstrates how a collation impacts the behaviour of a query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; [Words] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; N&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Een&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [word]  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ALL&lt;/span&gt;  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; N&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Eèn&amp;#39;&lt;/span&gt;	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ALL&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; N&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EEN&amp;#39;&lt;/span&gt;
)
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [word]	  
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Words]  
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [word]	  
&lt;span style=&#34;color:#75715e&#34;&gt;--COLLATE Latin1_General_CS_AS -- returns Een
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--COLLATE Latin1_General_CI_AI -- returns Een, Eèn and EEN
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--COLLATE LAtin1_General_CI_AS -- returns Een and EEN
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COLLATE&lt;/span&gt; Latin1_General_CS_AI &lt;span style=&#34;color:#75715e&#34;&gt;-- returns Een and Eèn
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Een&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Copy all mp3 files in Music folder to USB dribe</title>
      <link>/post/2012-09-22-copy-all-mp3-files-in-music-folder-to-usb-dribe/</link>
      <pubDate>Sat, 22 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-09-22-copy-all-mp3-files-in-music-folder-to-usb-dribe/</guid>
      <description>
        
          &lt;p&gt;Copying all mp3 files from my Music folder to a USB drive is pretty easy on my Macbook:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find Music -name *.mp3 -exec cp &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; /Volumes/SANDISK &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Using eID on OS X Mountain Lion</title>
      <link>/post/2012-08-06-using-eid-on-os-x-mountain-lion/</link>
      <pubDate>Mon, 06 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-08-06-using-eid-on-os-x-mountain-lion/</guid>
      <description>
        
          &lt;p&gt;Last week or so I got myself a MacBook Air and I am really loving it so far. Today I needed to use my &lt;a href=&#34;http://eid.belgium.be/en/&#34;&gt;eID&lt;/a&gt; so I installed the middleware application without any hassle but had a hard time configuring Safari. Apparently Apply removed support for &lt;a href=&#34;http://en.wikipedia.org/wiki/PKCS_?11&#34;&gt;PKCS #11&lt;/a&gt; in &lt;a href=&#34;http://www.apple.com/osx/&#34;&gt;OS X Mountain Lion&lt;/a&gt;. After installing &lt;a href=&#34;http://smartcardservices.macosforge.org&#34;&gt;SmartCard Services&lt;/a&gt; the certificates appeared in the Keychain and I became able to authenticate on websites using my certificate&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Add missing books to iTunes</title>
      <link>/post/2012-05-20-add-missing-books-to-itunes/</link>
      <pubDate>Sun, 20 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-05-20-add-missing-books-to-itunes/</guid>
      <description>
        
          &lt;p&gt;These days i read most books on my ipad. The problem is that iTunes does not seem to add pdf files when i choose &amp;lsquo;Add Folder&amp;rsquo; to the library. So here is a small application that adds them one by one (way too lazy/unmotivated to do this by hand).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/2759128&#34;&gt;https://gist.github.com/2759128&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Multiclean solution</title>
      <link>/post/2012-04-26-multiclean-solution/</link>
      <pubDate>Thu, 26 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-04-26-multiclean-solution/</guid>
      <description>
        
          &lt;p&gt;One of my favorite powershell commands when cleaning up:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$RootFolder = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\tfs&amp;#39;&lt;/span&gt;
Get-ChildItem $RootFolder bin -Recurse | Remove-Item -Recurse
Get-ChildItem $RootFolder obj -Recurse | Remove-Item -Recurse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>An example of Common Table Expression and Window function usage...</title>
      <link>/post/2012-03-27-an-example-of-common-table-expression-and-window-function-usage/</link>
      <pubDate>Tue, 27 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-03-27-an-example-of-common-table-expression-and-window-function-usage/</guid>
      <description>
        
          &lt;p&gt;Earlier this week some colleague had been assigned a maintenance task and asked me how I would solve it. Every customer is permitted to have an amount of publications. All excess publications should be removed from the system (only the n most recent ones are permitted to remain on the system).&lt;/p&gt;
&lt;p&gt;Here is an example of the Customer table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; [dbo].[Customer](  
	[CustomerId] [int] &lt;span style=&#34;color:#66d9ef&#34;&gt;IDENTITY&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;, 
	[CustomerName] [nvarchar](&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,  
	[PermittedPublications] [int] &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; [dbo].[Customer]		  
	([CustomerName], [PermittedPublications])
&lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt;
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timvw&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),		  
	(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mike&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An example of the customer publications table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; [dbo].[Publication](	  
	[PublicationId] [int] &lt;span style=&#34;color:#66d9ef&#34;&gt;IDENTITY&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,	  
	[CustomerId] [int] &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,	  
	[PublicationName] [nvarchar](&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,	  
	[PublicationTime] [datetime2] &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; [dbo].[Publication]
  	([CustomerId], [PublicationName],[PublicationTime])
&lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt;
	((&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [CustomerName] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timvw&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tim pub1&amp;#39;&lt;/span&gt;, SYSUTCDATETIME()),		  
	((&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [CustomerName] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timvw&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tim pub2&amp;#39;&lt;/span&gt;, SYSUTCDATETIME()),		  
	((&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [CustomerName] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timvw&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tim pub&amp;#39;&lt;/span&gt;, SYSUTCDATETIME()),
	((&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [CustomerName] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timvw&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tim pub4&amp;#39;&lt;/span&gt;, SYSUTCDATETIME()),
	((&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [CustomerName] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mike&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mike pub1&amp;#39;&lt;/span&gt;, SYSUTCDATETIME()),
	((&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [CustomerName] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mike&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mike pub2&amp;#39;&lt;/span&gt;, SYSUTCDATETIME()); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My colleague was keen on using some cursor logic, but I demonstrated him how a set-based alternative:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; [RankedPublication] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [CustomerId]
		,[PublicationId]
		,[PublicationName]
		,[PublicationTime]
		,ROW_NUMBER() OVER(PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [CustomerId] &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [PublicationTime]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [PublicationRank]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Publication]
), [ExcessPublication] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [PublicationId]	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [RankedPublication]	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; [dbo].[Customer] &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; [Customer].[CustomerId] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [RankedPublication].[CustomerId]	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [PublicationRank] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; [Customer].[PermittedPublications]
)
&lt;span style=&#34;color:#66d9ef&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [dbo].[Publication]	  
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [PublicationId] &lt;span style=&#34;color:#66d9ef&#34;&gt;IN&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [PublicationId] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [ExcessPublication]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Say no to primitives in your API.. and make your software more explicit</title>
      <link>/post/2011-10-28-say-no-to-primitives-in-your-api-and-make-your-software-more-explicit/</link>
      <pubDate>Fri, 28 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-10-28-say-no-to-primitives-in-your-api-and-make-your-software-more-explicit/</guid>
      <description>
        
          &lt;p&gt;A while ago I wrote some code like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; ICanBroadcast
{ 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Broadcast(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; message) { ... }  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Broadcast(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; message, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; author) { ... }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A bit later the requirements changed and from now on it was required to specify the topic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; ICanBroadcast  
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Broadcast(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; message, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; topic) { ... }  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Broadcast(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; message, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; author, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; topic) { ... } 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case you were using Broadcast(string message) the compiler would rightfully inform you that no such method exists. In case you were using Broadcast(string message, string author) the compiler does not catch the error and incorrectly uses the author as topic. I can only hope that you have a suite of tests that makes you notice that something is wrong when you upgrade to my latest release.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make the difference between an Author and a Topic more explicit (to our API consumers and the compiler) by creating explicit types to represent the concepts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; ICanBroadcast 
{  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Broadcast(Message message, Topic topic) { ... } 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Broadcast(Message message, Author author, Topic topic) { ... }  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The joy of using a typed language 😉&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Force the removal of a file with PowerShell</title>
      <link>/post/2011-10-18-force-the-removal-of-a-file-with-powershell/</link>
      <pubDate>Tue, 18 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-10-18-force-the-removal-of-a-file-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Last couple of weeks I have been generating a lot of files (and restricting their ACLs) and today I decided to remove all those files. The problem is that my user account did not have permissions on those files. Here is a small script that will first take ownership of the file, then grants FullControl permissions, and finally removes the file 🙂&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; RemoveFile 
{	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($FileName)
	
	&amp;amp;takeown /F $FileName
	$User = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Security.Principal.WindowsIdentity]&lt;/span&gt;::GetCurrent().User
	$Acl = Get-Acl $FileName	  
	$Acl.SetOwner($User)	  
	$AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($User, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FullControl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;)	  
	$Acl.SetAccessRule($AccessRule)	  
	Set-Acl $FileName $Acl
	Remove-Item $FileName 
}

Get-ChildItem *.txt -R | % { RemoveFile $_.FullName; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Edit on 2011-10-19&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Resetting the permissions with icacls c:\output /reset /t and then calling Remove-Item c:\output -R does the trick.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; RemoveFiles 
{  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($Directory)

	icacls $Directory /reset /t 
	Remove-Item $Directory -R 
}

RemoveFiles c:\output;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Remove all access rules from a directory</title>
      <link>/post/2011-09-22-remove-all-access-rules-from-a-directory/</link>
      <pubDate>Thu, 22 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-09-22-remove-all-access-rules-from-a-directory/</guid>
      <description>
        
          &lt;p&gt;A while ago i needed to write some code that removes all (existing/inherited) access rules from a given directory. It was pretty frustrating to notice that all my attempts seemed to fail (&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.security.accesscontrol.commonobjectsecurity.removeaccessrule.aspx&#34;&gt;RemoveAccessRule&lt;/a&gt;, &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.security.accesscontrol.objectsecurity.purgeaccessrules.aspx&#34;&gt;PurgeAccessRule&lt;/a&gt;, &amp;hellip;)&lt;/p&gt;
&lt;p&gt;Finally i found that &lt;a href=&#34;&#34;&gt;SetAccessRuleProtection&lt;/a&gt; was the method that i needed to invoke.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Folder = &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;c:\temp\secured&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; directory = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryInfo(Folder);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; directorySecurity = directory.GetAccessControl();
directorySecurity.SetAccessRuleProtection(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
directory.SetAccessControl(directorySecurity);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;There you go 😉&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Use SQL Server Profiler to see if a connection is pooled</title>
      <link>/post/2011-08-19-use-sql-server-profiler-to-see-if-a-connection-is-pooled/</link>
      <pubDate>Fri, 19 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-08-19-use-sql-server-profiler-to-see-if-a-connection-is-pooled/</guid>
      <description>
        
          &lt;p&gt;It took me a couple of websearches to discover how i can see in SQL Server Profiler whether or not a connection is pooled. Apparently you have to check &amp;lsquo;Show all columns&amp;rsquo; and then you can check the &amp;lsquo;EventSubClass&amp;rsquo; column:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2011/08/sql_server_profiler_eventsubclass.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is how it looks like in your trace window:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2011/08/sql_server_profiler_eventsubclass_trace.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>SqlConnectionStringBuilder sets the Pooling property to true by default</title>
      <link>/post/2011-08-18-sqlconnectionstringbuilder-sets-the-pooling-property-to-true-by-default/</link>
      <pubDate>Thu, 18 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-08-18-sqlconnectionstringbuilder-sets-the-pooling-property-to-true-by-default/</guid>
      <description>
        
          &lt;p&gt;Here is something that surprised me: SqlConnectionStringBuilder sets the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlconnectionstringbuilder.pooling.aspx&#34;&gt;Pooling&lt;/a&gt; property to true by default.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Specialized solution for aggregate string concatenation</title>
      <link>/post/2011-08-01-specialized-solution-for-aggregate-string-concatenation/</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-08-01-specialized-solution-for-aggregate-string-concatenation/</guid>
      <description>
        
          &lt;p&gt;I have noticed that most people come up with the following solution to build a string in T-SQL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) [n]	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums] 
)	  
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; COALESCE(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;([n] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; nvarchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))	  
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers];

&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; STUFF(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Important! Microsoft has no official documentation describing this aggregate concatenation
technique that is based on the assignment SELECT syntax. The behavior described here is
based on observation alone. The current implementation of the ConcatOrders function doesn’t
incorporate
an ORDER BY clause and does not guarantee the order of concatenation. According
to a blog entry by Microsoft’s Conor Cunningham, it seems that SQL Server will respect an
ORDER BY clause if specified (&lt;a href=&#34;http://blogs.msdn.com/sqltips/archive/2005/07/20/441053.aspx)&#34;&gt;http://blogs.msdn.com/sqltips/archive/2005/07/20/441053.aspx)&lt;/a&gt;.
Conor is a very credible source, but I should stress that besides
this blog entry I haven’t found
any official documentation describing how a multi-row assignment
SELECT should behave—with
or without an ORDER BY clause.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the aid of FOR XML PATH (as mentionned in &lt;a href=&#34;http://www.sql.co.il/books/insidetsql2008/&#34;&gt;Inside Microsoft SQL Server 2008: T-SQL Programming&lt;/a&gt; we can solve this problem using a documented approach:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) [n]	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums] 
)	  
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;([n] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; nvarchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [text()]  
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers]	  
&lt;span style=&#34;color:#66d9ef&#34;&gt;FOR&lt;/span&gt; XML PATH(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;));

&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; STUFF(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;message;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>TryGetResult</title>
      <link>/post/2011-08-01-trygetresult/</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-08-01-trygetresult/</guid>
      <description>
        
          &lt;p&gt;I think this entry has been in the pipeline for a couple of years now and today i have decided to finally post it 😉 I got frustrated with the annoying out parameter in TryGet methods so i decided to use a different signature using TryGetResult:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TryGetResult&lt;/span&gt;&amp;lt;T&amp;gt; 
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TryGetResult()   
  {   
    Success = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;  
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TryGetResult(T result)  
  {   
    Success = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; 
    Result = result;  
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Success { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; T Result { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now your TryGet methods can have the following signature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TryGetResult&amp;lt;Person&amp;gt; TryGetPersonByName(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name) 
{   
  &lt;span style=&#34;color:#75715e&#34;&gt;// person is not available  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(name.IsInvalidPersonName()) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TryGetResult();

  &lt;span style=&#34;color:#75715e&#34;&gt;// return the person
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TryGetResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(name));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Launch DtExec from PowerShell</title>
      <link>/post/2011-07-15-launch-dtexec-from-powershell/</link>
      <pubDate>Fri, 15 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-07-15-launch-dtexec-from-powershell/</guid>
      <description>
        
          &lt;p&gt;Running an SSIS package from PowerShell (using DTExec) can be as simple as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;RunPackage &lt;span style=&#34;color:#f92672&#34;&gt;-File&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\test.dtsx&amp;#39;&lt;/span&gt; -DatabaseHost &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; -DatabaseName &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TEST&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are the functions that make it this simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetDtExecPath {    
  $DtsPath = (Get-ItemProperty &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\100\DTS\Setup&amp;#39;&lt;/span&gt;).SQLPath;    
  $DtExecPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtsPath\Binn\DTExec.exe&amp;#34;&lt;/span&gt;);    
  $DtExecPath;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetDtExecPropertyPathValue() {      
  &lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;(
    $PropertyPath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
    $Value = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
  );

  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$PropertyPath;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$Value\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; RunPackage {
      
  &lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;(        
  $DtExecPath = (GetDtExecPath),       
  $File = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test.dtsx&amp;#39;&lt;/span&gt;  
  );

  $Params = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/FILE $File&amp;#34;&lt;/span&gt;;
   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;($i = 0; $i &lt;span style=&#34;color:#f92672&#34;&gt;-lt&lt;/span&gt; $Args.Length; $i += 2) {       
    $PropertyPath = $Args[$i].SubString(1);       
    $Value = $Args[$i+1];       
    $PropertyPathValue = GetDtExecPropertyPathValue -PropertyPath $PropertyPath -Value $Value;       
    $Params += &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; /SET $PropertyPathValue&amp;#34;&lt;/span&gt;;    
  } 

  &amp;amp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtExecPath&amp;#34;&lt;/span&gt; $Params;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Building a Nums table (quickly)</title>
      <link>/post/2011-07-13-building-a-nums-table-quickly/</link>
      <pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-07-13-building-a-nums-table-quickly/</guid>
      <description>
        
          &lt;p&gt;A while ago i presented my approach to generate a nums table &lt;a href=&#34;http://www.timvw.be/2010/12/11/techniques-learned-in-sqltopia-look-ma-no-loops/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt; INT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;    
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] ) 
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )
, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )
  
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because we only use this code once to fill the table we don&amp;rsquo;t really care that it is not very fast. Today i discovered there is a way to speed it up in this wonderful book: &lt;a href=&#34;http://oreilly.com/catalog/9780735626034/&#34;&gt;Inside Microsoft® SQL Server® 2008: T-SQL Querying&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;
      
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )  
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )
, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )
  
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yay for features like ORDER BY (SELECT &lt;!-- raw HTML omitted --&gt;).&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Using User-Defined Table Type with Identity column in ADO.NET</title>
      <link>/post/2011-07-13-using-user-defined-table-type-with-identity-column-in-ado-net/</link>
      <pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-07-13-using-user-defined-table-type-with-identity-column-in-ado-net/</guid>
      <description>
        
          &lt;p&gt;A while ago i wanted to use a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb522526.aspx&#34;&gt;User-Defined Table Type&lt;/a&gt; to pass in a set of records. Nothing special about this except that the first column of the UDTT was an Identity column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TYPE&lt;/span&gt; [Star].[example] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt;(  
  [Ordinal] [int] &lt;span style=&#34;color:#66d9ef&#34;&gt;IDENTITY&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,  
  [Name] [nvarchar](&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After finding a lot of posts saying that this is not supported a colleague of mine, &lt;a href=&#34;http://stevehorsfield.wordpress.com/&#34;&gt;Stephen Horsfield&lt;/a&gt;, found a way to do it as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; sqlMetaData = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;[] 
{  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlMetaData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ordinal&amp;#34;&lt;/span&gt;, SqlDbType.Int, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, SortOrder.Unspecified, -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlMetaData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;, SqlDbType.NVarChar, &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;)
};

sqlRecords = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashSet&amp;lt;SqlDataRecord&amp;gt;(usersToInclude.Select(user =&amp;gt;
{   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; record = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlDataRecord(sqlMetaData);   
  record.SetString(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, user.Name);   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; record; 
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Set variables in SSIS package at runtime</title>
      <link>/post/2011-05-19-set-variables-in-ssis-package-at-runtime/</link>
      <pubDate>Thu, 19 May 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-05-19-set-variables-in-ssis-package-at-runtime/</guid>
      <description>
        
          &lt;p&gt;The documentation on &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms162810.aspx&#34;&gt;dtexec Utility (SSIS Tool)&lt;/a&gt; says the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/Set propertyPath;value&lt;/p&gt;
&lt;p&gt;(Optional). Overrides the configuration of a variable, property, container, log provider, Foreach enumerator, or connection within a package. When this option is used, /Set changes the propertyPath argument to the value specified. Multiple /Set options can be specified.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At first sight this works like a charm but as soon as your value has a space dtexec seems to get confused 🙁 It took me a couple of websearches to find a &lt;a href=&#34;http://www.sqldev.org/sql-server-integration-services/escape-character-for-set-option-of-dtexec-34546.shtml&#34;&gt;post that suggests the following&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dtexec /SET \Package.Variables[User::TheVariable].Properties[Value];&#39;&#39;; space&#39;&#39;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It seems that this works like a charm 🙂 Because i am lazy i wrapped this in a powershell function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; PackageOption()
{	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($name, $value);
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$name;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$value\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now you can use it as following in your deployment script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$TheVariableOption = PackageOption -Name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\Package.Variables[User::TheVariable].Properties[Value]&amp;#34;&lt;/span&gt; -Value &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some thing&amp;#34;&lt;/span&gt;;
&amp;amp;dtexec /File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$package&amp;#34;&lt;/span&gt; /Set $TheVariableOption;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>How to handle (short) bursts of work</title>
      <link>/post/2011-05-09-how-to-handle-short-bursts-of-work/</link>
      <pubDate>Mon, 09 May 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-05-09-how-to-handle-short-bursts-of-work/</guid>
      <description>
        
          &lt;p&gt;Here is a summary of how businesses around me handle short bursts of work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When i go to the doctor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find an empty seat in the waiting room&lt;/li&gt;
&lt;li&gt;observe who&amp;rsquo;s before me&lt;/li&gt;
&lt;li&gt;wait untill all those people have been seen by the doctor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When i go to the supermarket:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;join the queue at the end&lt;/li&gt;
&lt;li&gt;wait untill al before me have been helped&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When i go the the bakery:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get a number from a ticketing machine at the entrance&lt;/li&gt;
&lt;li&gt;wait untill a seller indicates he&amp;rsquo;s willing to process my requests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When i go to my car dealer:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hand over car keys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;give my mobile phone number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;relax in the loung untill they come find me (or send me an sms)&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Invoke parameterized stored procedure with PowerShell</title>
      <link>/post/2011-03-21-invoke-parameterized-stored-procedure-with-powershell/</link>
      <pubDate>Mon, 21 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-21-invoke-parameterized-stored-procedure-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Here is a quick snippet that demonstrates how you can invoke a parametrized stored procedure with PowerShell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$CreateTraceCommand = $SqlConnection.CreateCommand();
$CreateTraceCommand.CommandType = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.CommandType]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StoredProcedure&amp;#34;&lt;/span&gt;;
$CreateTraceCommand.CommandText = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sp_trace_create&amp;#34;&lt;/span&gt;;
$TraceIdParameter = $CreateTraceCommand.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@traceid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.SqlDbType]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Int&amp;#34;&lt;/span&gt;);
$TraceIdParameter.Direction = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.ParameterDirection]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Output&amp;#34;&lt;/span&gt;;
$OptionParameter = $CreateTraceCommand.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@options&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.SqlDbType]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Int&amp;#34;&lt;/span&gt;);
$OptionParameter.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;[int]&lt;/span&gt; 2;
$TraceFileParameter = $CreateTraceCommand.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@tracefile&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Data.SqlDbType]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NVarChar&amp;#34;&lt;/span&gt;);
$TraceFileParameter.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c:\temp\test&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[void]&lt;/span&gt; $CreateTraceCommand.ExecuteNonQuery();

$TraceId = $TraceIdParameter.Value;
Write-Host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You created a trace with &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;``&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Global hotkeys for iTunes on windows</title>
      <link>/post/2011-03-16-global-hotkeys-for-itunes-on-windows/</link>
      <pubDate>Wed, 16 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-16-global-hotkeys-for-itunes-on-windows/</guid>
      <description>
        
          &lt;p&gt;These days i use iTunes as media player. Unlike winamp this program does not seem to support system-wide hotkeys to control playback. This is the place where a productivity tool like &lt;a href=&#34;http://www.autohotkey.com/&#34;&gt;AutoHotkey&lt;/a&gt; comes into the rescue ;).&lt;/p&gt;
&lt;p&gt;I have configured the following keys:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Move to next song: [Ctrl] + [Alt] + [Right]&lt;/li&gt;
&lt;li&gt;Move to previous song: [Ctrl] + [Alt] + [Left]&lt;/li&gt;
&lt;li&gt;Toggle play/pause: [Ctrl] + [Alt] + p&lt;/li&gt;
&lt;li&gt;Turn volume up: [Ctrl] + [Alt] + [Up]&lt;/li&gt;
&lt;li&gt;Turn volume down: [Ctrl] + [Alt] + [Down]&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;^!right::
DetectHiddenWindows , On
ControlSend , ahk_parent, ^&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, iTunes ahk_class iTunes 
DetectHiddenWindows , Off
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

^!left:: 
DetectHiddenWindows , On
ControlSend , ahk_parent, ^&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, iTunes ahk_class iTunes
DetectHiddenWindows , Off
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

^!p:: 
DetectHiddenWindows , On 
ControlSend , ahk_parent, &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;space&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, iTunes ahk_class iTunes
DetectHiddenWindows , Off
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

^!up::
DetectHiddenWindows , On
ControlSend, ahk_parent, ^&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;UP&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, iTunes ahk_class iTunes
DetectHiddenWindows , Off
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

^!down::
DetectHiddenWindows , On
ControlSend, ahk_parent, ^&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;DOWN&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, iTunes ahk_class iTunes
DetectHiddenWindows , Off 
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Navigation to the webpage was canceled</title>
      <link>/post/2011-03-16-navigation-to-the-webpage-was-canceled/</link>
      <pubDate>Wed, 16 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-16-navigation-to-the-webpage-was-canceled/</guid>
      <description>
        
          &lt;p&gt;Earlier today i ran into the &amp;lsquo;Navigation to the webpage was canceled&amp;rsquo; when i tried to open a CHM file:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2011/03/chm_navigation_to_page_was_canceled.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Navigating to the file properties allows me to unblock the file:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2011/03/chm_unblock.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And now i can happily use the CHM file:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/uploads/2011/03/chm_working.png&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Consume locally build software without overloading your $PATH</title>
      <link>/post/2011-03-12-consume-locally-build-software-without-overloading-your-path/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-12-consume-locally-build-software-without-overloading-your-path/</guid>
      <description>
        
          &lt;p&gt;How do you consume locally build software? For a while now i have used the following approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a ~/bin folder&lt;/li&gt;
&lt;li&gt;Add that ~/bin folder to my $PATH&lt;/li&gt;
&lt;li&gt;Add symlinks from binary to ~/bin (ln -s ~/src/git-tfs/GitTfs.Vs2010/bin/debug/git-tfs.exe git-tfs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please let me know about your strategy..&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Dynamic scriptblock with PowerShell</title>
      <link>/post/2011-03-12-dynamic-scriptblock-with-powershell/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-12-dynamic-scriptblock-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Earlier this week i tried to run a command on a remote computer but it did not seem to work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tim&amp;#39;&lt;/span&gt;
$computer = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;
Invoke-Command -ComputerName $computer -ScriptBlock { Write-Host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello $name&amp;#34;&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because powershell serialises the { Write-Host &amp;ldquo;Hello $name&amp;rdquo; } as a string this ends up at the remote computer as { Write-Host &amp;ldquo;Hello $null&amp;rdquo; }. In order to send our &amp;ldquo;dynamic&amp;quot;command string over the wire we have to make sure it is serialised correctly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$scriptBlock = $executioncontext.InvokeCommand.NewScriptBlock(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Write-Host \&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Hello $name\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
Invoke-Command -ComputerName $computer -ScriptBlock $scriptBlock;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Some PowerShell functions to work with SSIS packages</title>
      <link>/post/2011-03-12-some-powershell-functions-to-work-with-ssis-packages/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-12-some-powershell-functions-to-work-with-ssis-packages/</guid>
      <description>
        
          &lt;p&gt;Here are some powershell functions (using XPath) that come in handy when working with SSIS packages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; FindConnectionManagerNames {	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($fileName)

	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $fileName);	  
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;	  
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);	  
	$xml.SelectNodes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:ConnectionManager/DTS:Property[@DTS:Name=&amp;#39;ObjectName&amp;#39;]&amp;#34;&lt;/span&gt;, $ns) | &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt; { $_.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#text&amp;#34;&lt;/span&gt;; }

}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetConnectionManagerConnectionString {  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($fileName, $connectionManagerName)

	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $fileName);
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);
	$path = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:ConnectionManager[DTS:Property=&amp;#39;$connectionManagerName&amp;#39;]/DTS:ObjectData/DTS:ConnectionManager/DTS:Property[@DTS:Name=&amp;#39;ConnectionString&amp;#39;]&amp;#34;&lt;/span&gt;
	$xml.SelectSingleNode($path, $ns).&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#text&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; FindVariables {	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($fileName)

	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $fileName);
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);
	$xml.SelectNodes(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:Variable/DTS:Property[@DTS:Name=&amp;#39;ObjectName&amp;#39;]&amp;#34;&lt;/span&gt;, $ns) | &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt; { $_.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#text&amp;#34;&lt;/span&gt;; }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetVariable {	  
	&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($fileName, $variableName)

	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $fileName);
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);
	$xml.SelectSingleNode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:Variable[DTS:Property=&amp;#39;$variableName&amp;#39;]/DTS:VariableValue&amp;#34;&lt;/span&gt;, $ns).&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#text&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Some tips for .Net developers using git on cygwin</title>
      <link>/post/2011-03-12-some-tips-for-net-developers-using-git-on-cygwin/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-12-some-tips-for-net-developers-using-git-on-cygwin/</guid>
      <description>
        
          &lt;p&gt;Here are some tips that i want to share with fellow .Net developers that use git on cygwin.&lt;/p&gt;
&lt;p&gt;First of all i defined some aliases in my ~/.bashrc:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# open explorer in the current working directory &lt;/span&gt;
alias explorer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;explorer.exe &amp;#34;\`cygpath -aw \&amp;#34;$PWD\&amp;#34;\`&amp;#34;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# invoke MSBuild&lt;/span&gt;
alias msbuild&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/cygdrive/c/Windows/Microsoft.NET/Framework/v4.0.30319/MSBuild.exe&amp;amp;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because i do not like the TFS source control story i use &lt;a href=&#34;https://github.com/spraints/git-tfs&#34;&gt;git-tfs&lt;/a&gt;. As a .Net developer you want to add the following to your .git/info/exclude file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#OS junk files&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Tt&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;humbs.db
*.DS_Store
&lt;span style=&#34;color:#75715e&#34;&gt;#Visual Studio files  &lt;/span&gt;
*.&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Oo&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;bj 
*.exe 
*.pdb
*.user
*.aps 
*.pch 
*.vspscc 
*.vssscc 
*_i.c 
*_p.c 
*.ncb 
*.suo 
*.tlb
*.tlh
*.bak
*.&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Cc&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;ache
*.ilk 
*.log 
*.lib 
*.sbr 
*.sdf 
ipch/ 
obj/ 
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Bb&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;in
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Dd&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;ebug*/
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Rr&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;elease*/
Ankh.NoLoad
&lt;span style=&#34;color:#75715e&#34;&gt;#Tooling &lt;/span&gt;
_ReSharper*/ 
*.resharper
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Tt&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;est&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Rr&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;esult*
&lt;span style=&#34;color:#75715e&#34;&gt;#Subversion files &lt;/span&gt;
.svn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Whenever i work online i usually run these two commands consecutively: git -a -m &amp;lsquo;commit message&amp;rsquo; and git-tfs checkin -m &amp;lsquo;commit message&amp;rsquo;. Here is a small ~/bin/commit script that combines these:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;git commit -a -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
git-tfs checkin -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Using WinMerge as difftool on cygwin/git</title>
      <link>/post/2011-03-12-using-winmerge-as-difftool-on-cygwingit/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-12-using-winmerge-as-difftool-on-cygwingit/</guid>
      <description>
        
          &lt;p&gt;Last couple of weeks i have been using &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; on &lt;a href=&#34;http://www.cygwin.com&#34;&gt;cygwin&lt;/a&gt; and i got very satisfying results out of it. One thing that i wanted to tweak was the ability to use &lt;a href=&#34;http://winmerge.org/&#34;&gt;WinMerge&lt;/a&gt; to compare files. Here is how i do it:&lt;/p&gt;
&lt;p&gt;Here is my ~/.gitconfig:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;	  
name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tim Van Wassenhove	  
email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; git@timvw.be
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;diff&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
external &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/bin/git-diff-wrapper.sh&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is my ~/bin/git-diff-wrapper.sh (it uses &lt;a href=&#34;http://www.cygwin.com/cygwin-ug-net/using-utils.html&#34;&gt;cygpath&lt;/a&gt; to translate the paths):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/cygdrive/c/Program Files/WinMerge/WinMergeU.EXE&amp;#34;&lt;/span&gt; /e /ub /dl other /dr local &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\`cygpath -aw &lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;\`&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\`cygpath -aw &lt;/span&gt;$2&lt;span style=&#34;color:#e6db74&#34;&gt;\`&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\`cygpath -aw &lt;/span&gt;$5&lt;span style=&#34;color:#e6db74&#34;&gt;\`&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we are good to go 😉&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Get/SetVariable value from SSIS VariableDispenser</title>
      <link>/post/2011-03-08-getsetvariable-value-from-ssis-variabledispenser/</link>
      <pubDate>Tue, 08 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-08-getsetvariable-value-from-ssis-variabledispenser/</guid>
      <description>
        
          &lt;p&gt;Here is some code that allows you to Get/Set a variable (object) value from/on the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/microsoft.sqlserver.dts.runtime.variabledispenser.aspx&#34;&gt;VariableDispenser&lt;/a&gt; in an SSIS package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; T GetVariable&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; VariableDispenser variableDispenser, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; scopedVariableName)
{
  Variables variables = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
  {
    variableDispenser.LockForRead(scopedVariableName);
    variableDispenser.GetVariables(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; variables);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (T)variables[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].Value;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (variables != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) variables.Unlock();
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetVariable&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; VariableDispenser variableDispenser, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; scopedVariableName, T &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
{
  Variables variables = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;   
  {  
    variableDispenser.LockForWrite(scopedVariableName);  
    variableDispenser.GetVariables(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; variables);  
    variables[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;  
  }  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;  
  {   
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (variables != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) variables.Unlock();  
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Consume custom SSIS tasks without GAC installation</title>
      <link>/post/2011-03-05-consume-custom-ssis-tasks-without-gac-installation/</link>
      <pubDate>Sat, 05 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-05-consume-custom-ssis-tasks-without-gac-installation/</guid>
      <description>
        
          &lt;p&gt;For a while i thought that in order to consume a custom SSIS task you had to install the assembly in the GAC. Now i know better 😉&lt;/p&gt;
&lt;p&gt;For the designer (BIDS) you have to copy the files to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\Program Files\Microsoft SQL Server\100\DTS\Tasks&lt;/li&gt;
&lt;li&gt;C:\Program Files\Microsoft SQL Server\100\DTS\PipelineComponents&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the runtime (BIDS) you have to copy the files to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE\PrivateAssemblies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And for dtexec you have to copy the files to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\Program Files\Microsoft SQL Server\100\DTS\Binn&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a small powershell script that gives you the paths where you want to copy your assembly to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Lookup Tasks, PipelineComponents and DtExec paths  &lt;/span&gt;
$DtsPath = (Get-ItemProperty &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\100\DTS\Setup&amp;#39;&lt;/span&gt;).SQLPath;
$DtsTasksPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtsPath\Tasks&amp;#34;&lt;/span&gt;);

$DtsPipelineComponentsPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtsPath\Pipelinecomponents&amp;#34;&lt;/span&gt;);
$DtExecPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$DtsPath\Binn&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Lookup VS2008/Bids path&lt;/span&gt;
$Vs2008Path = (Get-ItemProperty &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HKLM:\Software\Microsoft\VisualStudio\9.0&amp;#39;&lt;/span&gt;).InstallDir;
$Vs2008PrivateAssembliesPath = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$Vs2008Path\PrivateAssemblies&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Exploring messaging at lower levels...</title>
      <link>/post/2011-02-26-exploring-messaging-at-lower-levels/</link>
      <pubDate>Sat, 26 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-02-26-exploring-messaging-at-lower-levels/</guid>
      <description>
        
          &lt;p&gt;Yesterday a colleague of mine, &lt;a href=&#34;http://neildoesdotnet.blogspot.com/&#34;&gt;Neil Robbins&lt;/a&gt;, asked me how a piece of code would look like if I apply the Hollywood principle on it (Don&amp;rsquo;t call us, we&amp;rsquo;ll cal you).&lt;/p&gt;
&lt;p&gt;Let me start with setting the scene: The purpose of the code is to provide items via provider and to consume those items via a consumer.&lt;/p&gt;
&lt;p&gt;Here is how my oldskool function signatures would look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemProviderFactory&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ItemProvider Create() { .. } 
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemProvider&lt;/span&gt; {   
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IEnumerable&amp;lt;Item&amp;gt; Provide() { .. } 
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemConsumerFactory&lt;/span&gt; { 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ItemConsumer Create() { .. }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemConsumer&lt;/span&gt; { 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Consume(IEnumerable&amp;lt;Item&amp;gt; items) { .. }
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My Hollywood style function signatures look like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemProviderFactory&lt;/span&gt; { 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; WithItemProvider(Action&amp;lt;ItemProvider&amp;gt; action) { .. } 
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemProvider&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Provide(Action&amp;lt;IEnumerable&amp;lt;Item&amp;gt;&amp;gt; action) { .. }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemConsumerFactory&lt;/span&gt; { 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; WithItemConsumer(Action&amp;lt;ItemConsumer&amp;gt; action) { .. }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemConsumer&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Consume(IEnumerable&amp;lt;Item&amp;gt; items) { .. }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now I am able compare the code that glues everything together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OldStyle(OldStyle.ItemProviderFactory itemProviderFactory, OldStyle.ItemConsumerFactory itemConsumerFactory) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; provider = itemProviderFactory.Create();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; items = provider.Provide();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; consumer = itemConsumerFactory.Create(); 
  consumer.Consume(items); 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;  
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; HollywoodStyle(HollywoodStyle.ItemProviderFactory itemProviderFactory, HollywoodStyle.ItemConsumerFactory itemConsumerFactory) {  
  itemProviderFactory.With(provider =&amp;gt; 
    provider.Provide(items =&amp;gt; itemConsumerFactory.With(consumer =&amp;gt; 
      consumer.Consume(items))));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let me refactor this Hollywood code a bit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// An itemconsumer consumes items as following:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Action&amp;lt;HollywoodStyle.ItemConsumer, IEnumerable&amp;lt;Item&amp;gt;&amp;gt; consumerAction = (consumer, items) =&amp;gt; consumer.Consume(items);

&lt;span style=&#34;color:#75715e&#34;&gt;// As soon as I have items, I want a consumer to consume them:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Action&amp;lt;IEnumerable&amp;lt;Item&amp;gt;&amp;gt; itemsAction = (items) =&amp;gt; itemConsumerFactory.With(consumer =&amp;gt; consumerAction(consumer, items));

&lt;span style=&#34;color:#75715e&#34;&gt;// I can get items as following:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Action&amp;lt;HollywoodStyle.ItemProvider&amp;gt; providerAction = (provider) =&amp;gt; provider.Provide(itemsAction);

&lt;span style=&#34;color:#75715e&#34;&gt;// I can get an ItemProvider as following:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;itemProviderFactory.With(providerAction);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I think that most colleagues are quite thankful that i am not a Hollywood star 😉&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Get current file in PowerShell</title>
      <link>/post/2011-01-24-get-current-file-in-powershell/</link>
      <pubDate>Mon, 24 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-01-24-get-current-file-in-powershell/</guid>
      <description>
        
          &lt;p&gt;A while ago i wrote a small script to take care of deployment. Configuring the source folders went as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;(  
  $BaseDir = (Get-Location).Path,  
  $WebDir = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$BaseDir\web&amp;#34;&lt;/span&gt;),  
  $DatabaseDir = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$BaseDir\database&amp;#34;&lt;/span&gt;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem with this code is that it only works when your current working directory is set to the location of this script. An administrator (or build system) invokes the script as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;PS C:\Users\Admin&amp;gt;&amp;amp; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D:\Deployments\20110124\Deploy.ps1&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because we don&amp;rsquo;t want to annoy the consumer of our script with the burden of making sure he is in the correct directory we modified our code as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;(  
  $BaseDir = (Split-Path $MyInvocation.MyCommand.Definition),  
  $WebDir = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$BaseDir\web&amp;#34;&lt;/span&gt;),	  
  $DatabaseDir = (Resolve-Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$BaseDir\database&amp;#34;&lt;/span&gt;)  
)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A quick win 🙂&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Polling the existence of a file with PowerShell</title>
      <link>/post/2011-01-24-polling-the-existence-of-a-file-with-powershell/</link>
      <pubDate>Mon, 24 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-01-24-polling-the-existence-of-a-file-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Sometimes you run into a situations where a given task spawns a separate thread and completes it&amp;rsquo;s work on that separate thread. Eg: sending a bit XMLA to SQL Server Analysis Services with Microsoft.AnalysisServices.Deployment.exe and then waiting for the processing to be completed. Anyway, here is a simple function that will wait untill a given file exists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; WaitForFile($File) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(!(Test-Path $File)) {    
    Start-Sleep -s 10;   
  }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Get entire message body from an Intent</title>
      <link>/post/2011-01-06-get-entire-message-body-from-an-intent/</link>
      <pubDate>Thu, 06 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-01-06-get-entire-message-body-from-an-intent/</guid>
      <description>
        
          &lt;p&gt;I recently started programming the &lt;a href=&#34;http://www.android.com/&#34;&gt;Android&lt;/a&gt; and noticed that most examples for processing an incoming SMS are not entirely correct.&lt;/p&gt;
&lt;p&gt;An SMS message is &lt;a href=&#34;http://en.wikipedia.org/wiki/SMS#Message_size&#34;&gt;limited&lt;/a&gt; to 160 characters. Current mobile phones break up a larger message in multiple messages transparently for the user. When Android notifies you about an incoming SMS it has all parts (of that large message) available. So here is how you reconstruct the entire message body from an Intent&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Bundle bundle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; intent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getExtras&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;bundle &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

StringBuilder message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuilder&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;  
Object&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; pdus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Object&lt;span style=&#34;color:#f92672&#34;&gt;[])&lt;/span&gt; bundle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdus&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Rebuild this entire message from the multi part smses/pdus  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Object pdu &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; pdus&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;// Notice that i use the deprecated android.telephony.gsm.SmsMessage
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// android.telephony.SmsMessage throws when i call createFromPdu
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  SmsMessage msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SmsMessage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createFromPdu&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[])&lt;/span&gt;pdu&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  message&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessageBody&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;  
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Techniques learned in SQLtopia: Look Ma, no loops!</title>
      <link>/post/2010-12-11-techniques-learned-in-sqltopia-look-ma-no-loops/</link>
      <pubDate>Sat, 11 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-12-11-techniques-learned-in-sqltopia-look-ma-no-loops/</guid>
      <description>
        
          &lt;p&gt;I have been programming in c-based languages for more than 10 years now. Lately i have spent quite a bit of time in SQLtopia and learned a couple of techniques that are quite different from what i was used to.&lt;/p&gt;
&lt;p&gt;Let me explain with an example: The boss comes in and asks for a report that contains all the days on which i have worked this year. As a typical c# programmer i come up with the following solution: Iterate over all the days in the year and skip the days i was out on holidays:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;IEnumerable&amp;lt;DateTime&amp;gt; FindWorkingDays()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; begin = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; end = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; holidays = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;[]   
  {    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Holiday { Begin = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;), End = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;) },    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Holiday { Begin = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;), End = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2010&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) }   
  };

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; date = begin; date &amp;lt;= end; date = date.AddDays(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))   
  {    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(holidays.Any(holiday =&amp;gt; holiday.Begin &amp;lt;= date &amp;amp;&amp;amp; date &amp;lt;= holiday.End)) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; date;   
  }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In SQLtopia it is recommended to use set-based solutions instead of loops so we need a radically different solution.&lt;/p&gt;
&lt;p&gt;Here is how we generate rows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;    
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )  
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums4];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With rows we can generate numbers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt; INT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;    
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )  
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )
, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And with numbers we can generate dates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; DATETIME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-01-01&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; DATETIME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-12-31&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt; INT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DATEDIFF(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;    
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )  
, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )  
, [Dates] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; DATEADD(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, [Value], &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers] )
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Dates];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With dates we can build the dates on which we were out on holidays:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; DATETIME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-01-01&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; DATETIME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-12-31&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt; INT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DATEDIFF(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;    
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )  
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)    
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )    
, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )    
, [Dates] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; DATEADD(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, [Value], &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers] )    
, [Holidays] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-07-01&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Begin&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-07-31&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;]                      
&lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;                    
  &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-09-01&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Begin&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-09-15&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;]                  
)
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Holidays],[Dates] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;BETWEEN&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Begin&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Date];  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can easily select the dates that are not holiday dates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; DATETIME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-01-01&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; DATETIME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-12-31&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt; INT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DATEDIFF(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;  
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )    
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)    
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )    
, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )    
, [Dates] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; DATEADD(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, [Value], &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; DATEDIFF(&lt;span style=&#34;color:#66d9ef&#34;&gt;DAY&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;))    
, [Holidays] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-07-01&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Begin&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-07-31&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;]                      
&lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;                      
  &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-09-01&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Begin&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2010-09-15&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;]                  
)
, [HolidayDates] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Holidays],[Dates] &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;BETWEEN&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Begin&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt;] )
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; [Dates].[Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Dates]					  
&lt;span style=&#34;color:#66d9ef&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OUTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; [HolidayDates] &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; [Dates].[Date] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [HolidayDates].[Date]				    
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; [HolidayDates].[Date] &lt;span style=&#34;color:#66d9ef&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Look Ma, no loops!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring window functions</title>
      <link>/post/2010-12-10-exploring-window-functions/</link>
      <pubDate>Fri, 10 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-12-10-exploring-window-functions/</guid>
      <description>
        
          &lt;p&gt;Here is a sample query that allows you to explore the behavior of various &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms189461.aspx&#34;&gt;aggregate window functions&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt;    
  [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] )  
, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums1] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)  
, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B, [Nums2] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;)
, [Nums4] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; A.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; A, [Nums3] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; B )
&lt;span style=&#34;color:#75715e&#34;&gt;-- Build numbers from 1 to 1000
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;, [Numbers] &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; TOP(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;) ROW_NUMBER() OVER(&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value]) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Value] &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;[Nums4] )

&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;    
  [Value]  
, ROW_NUMBER() OVER(PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [RowNumber]
, RANK() OVER(PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Rank]
, DENSE_RANK() OVER (PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [DenseRank]    
, NTILE(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) OVER (PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; [Value] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; [Tile100]  
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;    
  [Numbers]
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt;    
  [Value];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Convert AAC/M4A files to MP3 with VLC and PowerShell</title>
      <link>/post/2010-11-20-convert-aacm4a-files-to-mp3-with-vlc-and-powershell/</link>
      <pubDate>Sat, 20 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-20-convert-aacm4a-files-to-mp3-with-vlc-and-powershell/</guid>
      <description>
        
          &lt;p&gt;Here is a way to convert your AAC/M4A files to MP3 using &lt;a href=&#34;http://www.videolan.org/vlc&#34;&gt;VLC&lt;/a&gt; media player:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;vlc.exe -I dummy old.m4a :sout=#transcode{acodec=$codec,vcodec=dummy}:standard{access=file,mux=raw,dst=new.mp3} vlc://quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s wrap this command in a bit of PowerShell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ConvertToMp3(&lt;span style=&#34;color:#66d9ef&#34;&gt;[switch]&lt;/span&gt; $inputObject, &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt; $vlc = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\Program Files\VideoLAN\VLC\vlc.exe&amp;#39;&lt;/span&gt;) {      
  &lt;span style=&#34;color:#66d9ef&#34;&gt;PROCESS&lt;/span&gt; {            
    $codec = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mp3&amp;#39;&lt;/span&gt;;        
    $oldFile = $_;

    $newFile = $oldFile.FullName.Replace($oldFile.Extension, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.$codec&amp;#34;&lt;/span&gt;);

    &amp;amp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$vlc&amp;#34;&lt;/span&gt; -I dummy &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$oldFile&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:sout=#transcode{acodec=$codec,vcodec=dummy}:standard{access=file,mux=raw,dst=\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$newFile\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#34;&lt;/span&gt; vlc&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//quit | out-null;

    &lt;span style=&#34;color:#75715e&#34;&gt;#Only remove source files when you are sure that the conversion works as you want          &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#Remove-Item $oldFile;&lt;/span&gt;
  }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can use this function for *all* m4a files in a given folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ConvertAllToMp3(&lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt; $sourcePath) {
  Get-ChildItem &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$sourcePath\*&amp;#34;&lt;/span&gt; -recurse -include *.m4a | ConvertToMp3;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the function is as easy as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;ConvertAllToMp3 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\Users\timvw\Music&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Configure Visual Studio 2010 environment in PowerShell</title>
      <link>/post/2010-11-17-configure-visual-studio-2010-environment-in-powershell/</link>
      <pubDate>Wed, 17 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-17-configure-visual-studio-2010-environment-in-powershell/</guid>
      <description>
        
          &lt;p&gt;Instead of using the &amp;ldquo;Visual Studo Command Prompt (2010)&amp;rdquo; i wanted to use PowerShell instead. I found &lt;a href=&#34;http://blogs.msdn.com/b/ploeh/archive/2008/04/09/visualstudio2008powershell.aspx&#34;&gt;this&lt;/a&gt; post which does it for VS2008. Extending it for VS2010 was pretty easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; SetVS2008()
{
	$vs90comntools = (Get-ChildItem env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;VS90COMNTOOLS).Value
	$batchFile = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.IO.Path]&lt;/span&gt;::Combine($vs90comntools, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vsvars32.bat&amp;#34;&lt;/span&gt;)
	Get-Batchfile $BatchFile
	&lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Console]&lt;/span&gt;::Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visual Studio 2008 Windows PowerShell&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; SetVS2010()
{
	$vs100comntools = (Get-ChildItem env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;VS100COMNTOOLS).Value
	$batchFile = &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.IO.Path]&lt;/span&gt;::Combine($vs100comntools, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vsvars32.bat&amp;#34;&lt;/span&gt;)
	Get-Batchfile $BatchFile
	&lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Console]&lt;/span&gt;::Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visual Studio 2010 Windows PowerShell&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Get-Batchfile($file)
{
	$cmd = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$file\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;amp; set&amp;#34;&lt;/span&gt;
	cmd /c $cmd | &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt;-Object {
		$p, $v = $_.split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;)
		Set-Item -path env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;$p -value $v
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Load all script files at PowerShell startup</title>
      <link>/post/2010-11-17-load-all-script-files-at-powershell-startup/</link>
      <pubDate>Wed, 17 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-17-load-all-script-files-at-powershell-startup/</guid>
      <description>
        
          &lt;p&gt;These days i have quite some scripts files that i want to be loaded each time i launch PowerShell. &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb613488%28VS.85%29.aspx&#34;&gt;Windows PowerShell Profiles&lt;/a&gt; teaches me where i should store my $profile. Here is what it looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Lookup powershell scripts location&lt;/span&gt;
$UserProfile = (Get-ChildItem Env&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;UserProfile).Value;
$ScriptFolder = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$UserProfile\My documents\WindowsPowerShell&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# Source all .ps1 files in PowerShell profile folder  &lt;/span&gt;
Get-ChildItem $ScriptFolder -name -include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*.ps1&amp;#39;&lt;/span&gt; -exclude &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;profile.ps1&amp;#39;&lt;/span&gt;   
| &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; { (. &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$ScriptFolder\$_&amp;#34;&lt;/span&gt;) };

&lt;span style=&#34;color:#75715e&#34;&gt;# Configure environment for VS2010  &lt;/span&gt;
SetVS2010;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Get variable value from variable with PowerShell</title>
      <link>/post/2010-11-11-get-variable-value-from-variable-with-powershell/</link>
      <pubDate>Thu, 11 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-11-get-variable-value-from-variable-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Sometimes you only know at runtime in which variable a certain value is stored. Let me clarify with an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$tim = 30;
$evy = 24;
$name = Read-Host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter your name&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In essence, if $name equals tim we want to use $tim and if $name equals evy we want to use $evy. This can be achieved with Get-Variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$age = Get-Variable $name -valueOnly;
Write-Host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your age is $age&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Update ConfigurationStrings in SSIS package with PowerShell</title>
      <link>/post/2010-11-11-update-configurationstrings-in-ssis-package-with-powershell/</link>
      <pubDate>Thu, 11 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-11-update-configurationstrings-in-ssis-package-with-powershell/</guid>
      <description>
        
          &lt;p&gt;Here are some functions that allow you to update ConfigurationStrings in a SSIS package (dtsx) using PowerShell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; UpdateConfigurationStrings($file)
{
	$xml = &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt; (Get-Content $file);
	$ns = New-Object Xml.XmlNamespaceManager $xml.NameTable;
	$ns.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DTS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;www.microsoft.com/SqlServer/Dts&amp;#34;&lt;/span&gt;);
	UpdateConfigurationNodes $xml $ns;
	Set-Content $file $xml.OuterXml;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; UpdateConfigurationNodes($xml, $ns)
{
	$selectConfigurationNodes = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//DTS:Configuration&amp;#34;&lt;/span&gt;;
	$xml.SelectNodes($selectConfigurationNodes, $ns) | &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; { UpdateConfigurationNode $_ $ns; };
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; UpdateConfigurationNode($configurationNode, $ns)
{
	$selectConfigurationString = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./DTS:Property[@DTS:Name=&amp;#39;ConfigurationString&amp;#39;]&amp;#34;&lt;/span&gt;;
	$configurationStringNode = $configurationNode.SelectSingleNode($selectConfigurationString, $ns);

	$oldConfigurationStringValue = $configurationStringNode.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#text&amp;#39;&lt;/span&gt;;
	$newConfigurationStringValue = GetNewConfigurationStringValue $oldConfigurationStringValue;
	$configurationStringNode.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#text&amp;#39;&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$newConfigurationStringValue&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; GetNewConfigurationStringValue($oldConfigurationStringValue)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;# implement some logic to determine new value&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new value&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Build your solution with Visual Studio from MSBuild</title>
      <link>/post/2010-11-07-build-your-solution-with-visual-studio-from-msbuild/</link>
      <pubDate>Sun, 07 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-07-build-your-solution-with-visual-studio-from-msbuild/</guid>
      <description>
        
          &lt;p&gt;Unfortunately MSBuild and &lt;a href=&#34;http://bidshelper.codeplex.com/&#34;&gt;BIDS Helper&lt;/a&gt; are not able to build an .asdatabase from our Analysis Services project (.dwproj). Here is a task which invokes Visual Studio to build such a solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DevEnvBuild&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Error&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;$(SolutionFile)&amp;#39;==&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Missing SolutionFile&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;DevEnvTool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;$(DevEnvTool)&amp;#39;==&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;C:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE\devenv.exe&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/DevEnvTool&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;DevEnvSwitch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;$(DevEnvSwitch)&amp;#39;==&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Build&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/DevEnvSwitch&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;DevEnvBuildCommand&amp;gt;&lt;/span&gt;&amp;#34;$(DevEnvTool)&amp;#34; &amp;#34;$(SolutionFile)&amp;#34; /$(DevEnvSwitch)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/DevEnvBuildCommand&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Exec&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Command=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(DevEnvBuildCommand)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Invoke PowerShell script from MSBuild</title>
      <link>/post/2010-11-07-invoke-powershell-script-from-msbuild/</link>
      <pubDate>Sun, 07 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-07-invoke-powershell-script-from-msbuild/</guid>
      <description>
        
          &lt;p&gt;Here is a small MSBuild target that allows you to invoke a PowerShell script, eg: powershell.exe &amp;amp; &amp;lsquo;script.ps1&amp;rsquo; -SomeParam &amp;lsquo;x&amp;rsquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;InvokePowerShell&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PowerShellCommand&amp;gt;&lt;/span&gt;&amp;#34;$(PowerShellTool)&amp;#34; &amp;#34;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&lt;/span&gt; &amp;#39;$(ScriptFile)&amp;#39; -SomeParam &amp;#39;$(SomeParam)&amp;#39; &amp;#34;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PowerShellCommand&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Exec&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Command=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(PowerShellCommand)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Modify a text file with PowerShell</title>
      <link>/post/2010-11-07-modify-a-text-file-with-powershell/</link>
      <pubDate>Sun, 07 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-07-modify-a-text-file-with-powershell/</guid>
      <description>
        
          &lt;p&gt;A while ago i wanted to update a connection string in a configuration file. My first attempt was the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Get-Content $File
| &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt; { $_ &lt;span style=&#34;color:#f92672&#34;&gt;-Replace&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Source&amp;gt;(.*?)&amp;lt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Source&amp;gt;$New&amp;lt;&amp;#34;&lt;/span&gt; }
| Set-Content $File;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running this scripts leads to the following error: &amp;ldquo;Set-Content : The process cannot access the file because it is being used by another process.&amp;rdquo; In order to avoid this you can complete the read operation before you start writing as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;(Get-Content $File)
| &lt;span style=&#34;color:#66d9ef&#34;&gt;Foreach&lt;/span&gt; { $_ &lt;span style=&#34;color:#f92672&#34;&gt;-Replace&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Source&amp;gt;(.*?)&amp;lt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Source&amp;gt;$New&amp;lt;&amp;#34;&lt;/span&gt; }
| Set-Content $File;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Deploying a Database Project does not create artefacts for custom schemas</title>
      <link>/post/2010-11-01-deploying-a-database-project-does-not-create-artefacts-for-custom-schemas/</link>
      <pubDate>Mon, 01 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-11-01-deploying-a-database-project-does-not-create-artefacts-for-custom-schemas/</guid>
      <description>
        
          &lt;p&gt;Last week we noticed that the artefacts for a custom schema in our Database Project were not created (or updated). It took us a while to figure out what was wrong. When you add a script via the &amp;lsquo;Add Existing item&amp;rsquo; menu in VS2010 the file&amp;rsquo;s &lt;strong&gt;Build Action&lt;/strong&gt; is set to &lt;strong&gt;Not in Build&lt;/strong&gt; for some unknown reason. As soon as we changed the value to &lt;strong&gt;Build&lt;/strong&gt; and Deployed again our artefacts were created.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Update all repositories with Powershell</title>
      <link>/post/2010-10-25-update-all-repositories-with-powershell/</link>
      <pubDate>Mon, 25 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-10-25-update-all-repositories-with-powershell/</guid>
      <description>
        
          &lt;p&gt;I typically store the repositories i am working on under D:\Code. Each morning i had to right click on each of those folders and select &amp;lsquo;SVN Update&amp;rsquo; using &lt;a href=&#34;http://tortoisesvn.tigris.org/&#34;&gt;Tortoise SVN&lt;/a&gt;. Today i decided there had to be a better way to accomplish this tedious task:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;dir d:\code | &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; { svn update $_.FullName }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And in case you really like tortoise, you can do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;dir c:\code | &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; { tortoiseproc /command&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;update /closeonend&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;1 /path&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;$($_.FullName) }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>T-SQL: Remove all rows from all tables in your schema</title>
      <link>/post/2010-09-07-t-sql-remove-all-rows-from-all-tables-in-your-schema/</link>
      <pubDate>Tue, 07 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-09-07-t-sql-remove-all-rows-from-all-tables-in-your-schema/</guid>
      <description>
        
          &lt;p&gt;Sometimes i want to quickly clean up a database and start from fresh. Here is a small script that does exactly that.. (I just run the script a couple of times, untill no affected rows remain&amp;hellip; Far more efficient than figuring out which constraints exist, building up a dependency tree, and cleanly deleting all rows):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- Remove all rows from all tables
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;tableName VARCHAR(&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt; tableNames &lt;span style=&#34;color:#66d9ef&#34;&gt;CURSOR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FOR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; name &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; sys.Tables;

&lt;span style=&#34;color:#66d9ef&#34;&gt;OPEN&lt;/span&gt; tableNames
&lt;span style=&#34;color:#66d9ef&#34;&gt;FETCH&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NEXT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; tableNames &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;tableName
WHILE &lt;span style=&#34;color:#f92672&#34;&gt;@@&lt;/span&gt;FETCH_STATUS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;EXEC&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DELETE FROM [&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;tableName &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;FETCH&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NEXT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; tableNames &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;tableName
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;CLOSE&lt;/span&gt; tableNames
&lt;span style=&#34;color:#66d9ef&#34;&gt;DEALLOCATE&lt;/span&gt; tableNames
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>WIF: whr parameter is a hint for user Home Realm</title>
      <link>/post/2010-09-07-wif-whr-parameter-is-a-hint-for-user-home-realm/</link>
      <pubDate>Tue, 07 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-09-07-wif-whr-parameter-is-a-hint-for-user-home-realm/</guid>
      <description>
        
          &lt;p&gt;Yesterday i was reading the &lt;a href=&#34;http://claimsid.codeplex.com/&#34;&gt;Claims Based Identity &amp;amp; Access Control Guide&lt;/a&gt; and learned that the whr parameter is a hint from the application to the STS about the user&amp;rsquo;s STS. So if i look back at the code in &lt;a href=&#34;http://www.timvw.be/wif-change-sts-per-request/&#34;&gt;WIF: Change STS per request&lt;/a&gt; i should not hardcode the HomeRealm parameter to timvw but use the company name instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetRedirectUrl(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; company, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; companySts, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; realm, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; returnUrl)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; signInRequestMessage = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SignInRequestMessage(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(companySts), realm)
	{
	Context = returnUrl,
	HomeRealm = company
	};

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; signInRequestMessage.WriteQueryString();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>WIF: Change STS per request</title>
      <link>/post/2010-09-05-wif-change-sts-per-request/</link>
      <pubDate>Sun, 05 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-09-05-wif-change-sts-per-request/</guid>
      <description>
        
          &lt;p&gt;Here is some code that will redirect unauthenticated users to their respective STS (Eg: A user visiting ~/CompanyA/Default.aspx will be asked to authenticate at the STS linked to CompanyA.&lt;/p&gt;
&lt;p&gt;Notice that in the enterprise you typically have multiple applications that require this kind of behavior, so you would solve this by establishing trust between your app(s) and your STS + establish trust between your STS and the client STSes.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Global&lt;/span&gt; : HttpApplication
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; wSFederationAuthenticationModule_RedirectingToIdentityProvider(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, RedirectingToIdentityProviderEventArgs e)
	{
		e.Cancel = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
		RedirectToCompanySts();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RedirectToCompanySts()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; httpContext = HttpContext.Current;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; rawUrl = httpContext.Request.RawUrl;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; returnUrl = rawUrl;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; companyName = ExtractCompanyName(rawUrl);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; companySts = GetCompanySts(companyName);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; realm = GetRealm(companyName);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; redirectUrl = GetRedirectUrl(companySts, realm, returnUrl);

		httpContext.Response.Redirect(redirectUrl, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
		httpContext.ApplicationInstance.CompleteRequest();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; ExtractCompanyName(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; rawUrl)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; regex = &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;~/(.\*?)/.\*&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; relativeUrl = VirtualPathUtility.ToAppRelative(rawUrl);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; match = Regex.Match(relativeUrl, regex);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; match.Success ? match.Groups[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].Value : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetCompanySts(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; companyName)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (companyName == &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CompanyA&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;http://localhost/STS2Site&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;http://localhost/STSSite&amp;#34;&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetRealm(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; companyName)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; realm = &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;http://localhost/RPSite/&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.IsNullOrEmpty(companyName)) realm += companyName +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; realm;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetRedirectUrl(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; companySts, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; realm, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; returnUrl)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; signInRequestMessage = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SignInRequestMessage(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(companySts), realm)
		{
			Context = returnUrl,
			HomeRealm = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timvw&amp;#34;&lt;/span&gt;
		};

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; signInRequestMessage.WriteQueryString();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Making the TemplateFileTask easier to use...</title>
      <link>/post/2010-08-25-making-the-templatefiletask-easier-to-use/</link>
      <pubDate>Wed, 25 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-08-25-making-the-templatefiletask-easier-to-use/</guid>
      <description>
        
          &lt;p&gt;One of the disadvantages of the TemplateFile task (&lt;a href=&#34;http://msbuildtasks.tigris.org/&#34;&gt;msbuildtasks&lt;/a&gt;) is the fact that it requires a lot of typing to define template values&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ItemGroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#39;$(ConfigurationEnvironment)&amp;#39;==&amp;#39;build&amp;#39; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Tokens&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ReplacementValue&amp;gt;&lt;/span&gt;localhost&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ReplacementValue&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Tokens&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Tokens&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ReplacementValue&amp;gt;&amp;lt;mynode/&amp;gt;&amp;lt;/ReplacementValue&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Tokens&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is a format proposition to make this a lot more finger friendly&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;variables&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;env=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;x&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;localhost&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/x&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;x&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;mynode/&amp;gt;&amp;lt;/x&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/variables&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the msbuild script we need to achieve that&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ConfigurationFile&amp;gt;&lt;/span&gt;configuration.xml&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ConfigurationFile&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ConfigurationEnvironment&amp;gt;&lt;/span&gt;build&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ConfigurationEnvironment&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Retreive all template values for the specific environment --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;XmlQuery&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;XmlFileName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(ConfigurationFile)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;XPath =&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//variables[@env=&amp;#39;$(ConfigurationEnvironment)&amp;#39;]/*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Output&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TaskParameter=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Values&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/XmlQuery&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;--&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Construct&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@Tokens&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Tokens&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%(Values.name)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ReplacementValue&amp;gt;&lt;/span&gt;%(Values._innerxml)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ReplacementValue&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Tokens&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Generate the configuration files --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Available variables:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;====================&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%(Tokens.Identity): %(Tokens.ReplacementValue)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Happy coding!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>What i dislike about the Web.config Transformation in VS2010</title>
      <link>/post/2010-08-25-what-i-dislike-about-the-web-config-transformation-in-vs2010/</link>
      <pubDate>Wed, 25 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-08-25-what-i-dislike-about-the-web-config-transformation-in-vs2010/</guid>
      <description>
        
          &lt;p&gt;There are a couple of things that i strongly dislike about the &lt;a href=&#34;http://blogs.msdn.com/b/webdevtools/archive/2009/05/04/web-deployment-web-config-transformation.aspx&#34;&gt;Web.config transformation in VS2010&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only works with XML files (eg: Can&amp;rsquo;t be used to generate a release notes.txt file)&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;Does not seem to support externalized sections, eg: log4net.config in a separate file&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;No support to copy/paste transform files&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Only works when Visual Studio 2010 is installed (And i am still not convinced a build server should have this).&lt;/li&gt;
&lt;li&gt;Ties environment to build configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lesson learned: Don&amp;rsquo;t trust your co-workers, always double-check!&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Having multiple transformations is easy-peasy, just invoke the TransformXml task for all your config files and make sure your transformation files are correct. For log4net this would look like&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;log4net&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:xdt=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.microsoft.com/XML-Document-Transform&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;root&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;level&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xdt:Transform=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Replace&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/log4net&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The support for copy/paste can be achieved by removing the DependentUpon tag in your proj file (At the cost that you do not have the + sign in solution explorer which &amp;lsquo;hides&amp;rsquo; the transforms files)&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Clean TemplateFile hack</title>
      <link>/post/2010-08-17-clean-templatefile-hack/</link>
      <pubDate>Tue, 17 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-08-17-clean-templatefile-hack/</guid>
      <description>
        
          &lt;p&gt;A while ago i wrote about a &lt;a href=&#34;http://www.timvw.be/clever-templatefile-hack/&#34;&gt;Clever TemplateFile hack&lt;/a&gt; to use some xml block as ReplacementValue. Today i realized there is a clean way to achieve this by defining the value as &lt;a href=&#34;http://www.w3schools.com/xml/xml_cdata.asp&#34;&gt;CDATA&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TemplateTokens&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mex&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ReplacementValue&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;![CDATA[&amp;lt;endpoint address=&amp;#34;mex&amp;#34; binding=&amp;#34;mexHttpBinding&amp;#34; contract=&amp;#34;IMetadataExchange&amp;#34; /&amp;gt;]]&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ReplacementValue&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/TemplateTokens&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Behind Closed Doors: Secrets of Great Management</title>
      <link>/post/2010-07-29-behind-closed-doors-secrets-of-great-management/</link>
      <pubDate>Thu, 29 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-07-29-behind-closed-doors-secrets-of-great-management/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://www.pragprog.com/titles/rdbcd/behind-closed-doors&#34;&gt;Behind Closed Doors: Secrets of Great Management&lt;/a&gt; first let&amp;rsquo;s you look behind the closed doors of all those private meetings and then provides you a set of techniques that allow you to be(come) a better manager. All 160 pages were worth reading!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Ship It!: A Practical Guide to Successful Software Projects</title>
      <link>/post/2010-07-29-ship-it-a-practical-guide-to-successful-software-projects/</link>
      <pubDate>Thu, 29 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-07-29-ship-it-a-practical-guide-to-successful-software-projects/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://www.pragprog.com/titles/prj/ship-it&#34;&gt;Ship It!: A Practical Guide to Successful Software Projects&lt;/a&gt; is focussed on one core idea: &amp;ldquo;The List&amp;rdquo;. The place in which you track your (and your teams) to-do and done work. I do not agree with everything written in the book but would still want to recommend it.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Brownfield Application Development in .NET</title>
      <link>/post/2010-07-22-brownfield-application-development-in-net/</link>
      <pubDate>Thu, 22 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-07-22-brownfield-application-development-in-net/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://www.manning.com/baley/&#34;&gt;Brownfield Application Development in .NET&lt;/a&gt; is one of the better books i have read recently. The first part is about the ecosystem (version control, automated build, continuous integration, testing, defect management, &amp;hellip; ), the second part is about the code (OO-principles, layering, dependencies, ui patterns, &amp;hellip;) and the last chapter talks about ways to maintain the momentum. Very much recommended!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Quick reminder about the workings of Type.IsAssignableFrom</title>
      <link>/post/2010-07-21-quick-reminder-about-the-workings-of-type-isassignablefrom/</link>
      <pubDate>Wed, 21 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-07-21-quick-reminder-about-the-workings-of-type-isassignablefrom/</guid>
      <description>
        
          &lt;p&gt;Here is a quick reminder about the workings of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.type.isassignablefrom.aspx&#34;&gt;Type.IsAssignableFrom&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fruit&lt;/span&gt; {}
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Banana&lt;/span&gt; : Fruit {}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Test]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; CanAssignBananaToFruit()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; fruit = &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt; (Fruit);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; banana = &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt; (Banana);
	Assert.IsTrue(fruit.IsAssignableFrom(banana));
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Test]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; CanNotAssignFruitToBanana()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; fruit = &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(Fruit);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; banana = &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(Banana);
	Assert.IsFalse(banana.IsAssignableFrom(fruit));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I really hate this API because it always seems backward to me. Here is how i really want to use it&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;Assert.IsTrue(banana.CanBeAssignedTo(fruit));
Assert.IsFalse(fruit.CanBeAssignedTo(banana));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the aid of an extension method we can easily achieve this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; CanBeAssignedTo(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; Type sourceType, Type destinationType)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; destinationType.IsAssignableFrom(sourceType);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>97 Things Every Programmer Should Know</title>
      <link>/post/2010-07-20-97-things-every-programmer-should-know/</link>
      <pubDate>Tue, 20 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-07-20-97-things-every-programmer-should-know/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://oreilly.com/catalog/9780596809492&#34;&gt;97 Things Every Programmer Should Know&lt;/a&gt; was the last book that i wanted to read at the pool during summer holidays. As with all 97 things books you get a lot of valuable tips but i found this book not as exciting as the previous ones&amp;hellip;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Debug It!: Find, Repair, and Prevent Bugs in Your Code</title>
      <link>/post/2010-07-20-debug-it-find-repair-and-prevent-bugs-in-your-code/</link>
      <pubDate>Tue, 20 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-07-20-debug-it-find-repair-and-prevent-bugs-in-your-code/</guid>
      <description>
        
          &lt;p&gt;A while ago i noticed that &lt;a href=&#34;http://davybrion.com/blog/2010/01/highly-recommended-book-debug-it/&#34;&gt;Davy Brion&lt;/a&gt; recommended &lt;a href=&#34;http://pragprog.com/titles/pbdp/debug-it&#34;&gt;Debug It!: Find, Repair, and Prevent Bugs in Your Code&lt;/a&gt; so i decided to give it a read. Although i really liked the suggested process for investigating bugs where you have absolutely no clue of what is going on, i am not convinced that this is a must read book.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Implementing Lean Software Development: From Concept to Cash</title>
      <link>/post/2010-07-20-implementing-lean-software-development-from-concept-to-cash/</link>
      <pubDate>Tue, 20 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-07-20-implementing-lean-software-development-from-concept-to-cash/</guid>
      <description>
        
          &lt;p&gt;Not going to waste time re-iterating what&amp;rsquo;s in the book because you can find that here: &lt;a href=&#34;http://www.poppendieck.com/ilsd.htm&#34;&gt;Implementing Lean Software Development: From Concept to Cash&lt;/a&gt;. Just make sure that you get your copy and read it from beginning to end. Afterwards you may want to hand it over to your manager 😉&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Manage It!: Your Guide to Modern Pragmatic Project Management</title>
      <link>/post/2010-07-20-manage-it-your-guide-to-modern-pragmatic-project-management/</link>
      <pubDate>Tue, 20 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-07-20-manage-it-your-guide-to-modern-pragmatic-project-management/</guid>
      <description>
        
          &lt;p&gt;A while ago i noticed that more and more of my work is related to coaching and managing other developers. In order to become better at that i ordered my copy of &lt;a href=&#34;http://pragprog.com/titles/jrpm/manage-it&#34;&gt;Manage It!: Your Guide to Modern Pragmatic Project Management&lt;/a&gt;. A book with plenty of useful (practical) tips. Definitely worth reading!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Removing Dead Tracks (Duplicates that don&#39;t exist) from iTunes using C#</title>
      <link>/post/2010-07-20-removing-dead-tracks-duplicates-that-dont-exist-from-itunes-using-c/</link>
      <pubDate>Tue, 20 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-07-20-removing-dead-tracks-duplicates-that-dont-exist-from-itunes-using-c/</guid>
      <description>
        
          &lt;p&gt;Last week i noticed the following post from Scott Hanselman: &lt;a href=&#34;http://www.hanselman.com/blog/RemovingDeadTracksDuplicatesThatDontExistFromITunesUsingC.aspx&#34;&gt;Removing Dead Tracks (Duplicates that don&amp;rsquo;t exist) from iTunes using C#&lt;/a&gt;. As a good boy scout i noticed that these days iTunesLib.IITTrackCollection inherits from IEnumerable so i rewrote the code a little&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Program&lt;/span&gt;
{
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[STAThread]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; itunes = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; iTunesApp();
		itunes.DeleteTracksThatDoNotExist();
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ITunesExtensions&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DeleteTracksThatDoNotExist(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; IiTunes itunes)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; tracksThatDoNotExist = FindTracksThatDoNotExist(itunes);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; track &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; tracksThatDoNotExist) track.Delete();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;iitfileOrCDTrack&amp;gt; FindTracksThatDoNotExist(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; IiTunes iTunes)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; iTunes.LibraryPlaylist.Tracks
			.OfType&amp;lt;iitfileOrCDTrack&amp;gt;()
			.Where(track =&amp;gt; !File.Exists(track.Location));
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>The Productive Programmer</title>
      <link>/post/2010-07-20-the-productive-programmer/</link>
      <pubDate>Tue, 20 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-07-20-the-productive-programmer/</guid>
      <description>
        
          &lt;p&gt;The first part of the book covers some tools that may improve your productivity (but nothing that i did not use already). The second part covers development techniques (again, nothing new under the sun). Despite the author&amp;rsquo;s intentions i found reading &lt;a href=&#34;http://oreilly.com/catalog/9780596519544&#34;&gt;The Productive Programmer&lt;/a&gt; a disappointment.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Sometimes you can write it better than Resharper</title>
      <link>/post/2010-07-03-sometimes-you-can-write-it-better-than-resharper/</link>
      <pubDate>Sat, 03 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-07-03-sometimes-you-can-write-it-better-than-resharper/</guid>
      <description>
        
          &lt;p&gt;Here is a real-life example of when people are much better expressing intent than a tool: Consider the following code from a typical Silverlight Navigation application&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (UIElement child &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; LinksStackPanel.Children)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; hb = child &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; HyperlinkButton;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hb != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; hb.NavigateUri != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
	{ .. }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Resharper proposed to write this as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; hb &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; LinksStackPanel.Children
	.Select(child =&amp;gt; child &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; HyperlinkButton)
	.Where(hb =&amp;gt; hb != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; hb.NavigateUri != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;))
	{ .. }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is what i wrote instead&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; hb &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; LinksStackPanel.Children
	.OfType&amp;lt;hyperlinkButton&amp;gt;()
	.Where(hb =&amp;gt; hb.NavigateUri != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;))
	{ .. }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Convention over configuration with MSBuild</title>
      <link>/post/2010-06-26-convention-over-configuration-with-msbuild/</link>
      <pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-06-26-convention-over-configuration-with-msbuild/</guid>
      <description>
        
          &lt;p&gt;A while ago i blogged that i was using the TemplateFile task from the &amp;lt;a hrefhttp://msbuildtasks.tigris.org/&amp;quot;&amp;gt;MSBuild Community Tasks Project&lt;!-- raw HTML omitted --&gt; to generate configuration files. Each project that required templating would have modified it&amp;rsquo;s csproj file as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- To modify your build process, add your task inside one of the targets below and uncomment it.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Other similar extension points exist, see Microsoft.Common.targets. --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Project=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(MSBuildProjectDirectory)\config.msbuild&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BeforeBuild&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;callTarget&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Targets=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GenerateConfigurationFiles&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And each of these config.msbuild files looked as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;templateFile&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Template=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;web.template.config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OutputFileName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;web.config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Tokens=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@(TemplateTokens)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;templateFile&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Template=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Config\WcfClients.config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OutputFileName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Config\WcfClients.config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Tokens=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@(TemplateTokens)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can notice the convention here is that each template file has &amp;lsquo;.template.&amp;rsquo; in it&amp;rsquo;s name, and the name of an output file is the template file name without &amp;lsquo;.template.&amp;rsquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- validate input --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;error&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;$(SourceFile)&amp;#39;==&amp;#39;&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Missing SourceFile&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- calculate destination file --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;regexReplace&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Input=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(SourceFile)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Expression=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(\.template)\.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Replacement=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Count=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;output&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TaskParameter=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Output&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PropertyName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DestinationFile&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/regexReplace&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- generate file --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;templateFile&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Template=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(SourceFile)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OutputFileName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(DestinationFile)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Tokens=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@(TemplateTokens)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we can do it for one file, we can do it for many files too&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- valide input --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;error&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;$(SourceDir)&amp;#39;==&amp;#39;&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Missing SourceDir&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- find all template files --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;itemGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;templateFiles&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(SourceDir)\*\*\\*.template.\*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exlude=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(SourceDir)\\*\*\\*.svn*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/itemGroup&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- process each template file --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;msbuild&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Projects=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(MSBuildProjectFile)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Targets=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ProcessTemplate&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Properties=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SourceFile=%(TemplateFiles.FullPath)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After these core improvements we wrote a common.proj.targets file as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- import global variables --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Project=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(MSBuildThisFileDirectory)\configuration.proj&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;propertyGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;buildDependsOn&amp;gt;&lt;/span&gt;CommonBeforeBuild;$(BuildDependsOn);CommonAfterBuild&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/buildDependsOn&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/propertyGroup&amp;gt;&lt;/span&gt; 

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CommonBeforeBuild&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;msbuild&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Projects=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(CommonTargetsPath)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Targets=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ProcessTemplates&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Properties=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SourceDir=$(MSBuildProjectDirectory)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CommonAfterBuild&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&amp;lt;msbuild Projects=&amp;#34;$(CommonBuildTargetsPath)&amp;#34; Targets=&amp;#34;PEVerify&amp;#34; Properties=&amp;#34;SourceFile=$(TargetPath)&amp;#34; /&amp;gt;--&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we only need to import our common.proj.targets file in projects that have template files and focus on real business problems ;)&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Setting up a self-contained build</title>
      <link>/post/2010-06-26-setting-up-a-self-contained-build/</link>
      <pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-06-26-setting-up-a-self-contained-build/</guid>
      <description>
        
          &lt;p&gt;Here is something you may have experienced already: As a newcomer on an existing project, you check out the code from source-control and discover that the build is broken. When you ask around no-one else seems to have that problem but a helpful collegue is kind enough to tell you that you can find the installers for the missing dependencies at location X (Let&amp;rsquo;s not even mention the places where those installers are not available *sigh*).&lt;/p&gt;
&lt;p&gt;Anway, in order to avoid such a situation you could organize your solution in such a way that all the dependencies (libraries and tools) are part of it. A typical folder structure would look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/solution_tools.png&#34; alt=&#34;screenshot of typical solution folder organization&#34;&gt;&lt;/p&gt;
&lt;p&gt;In order to get those files out of the installer and in your solution (instead of installed under %Program Files%) you could do an administrative install of the msi (eg: msiexec /a Blah.msi) but i find it easier to use &lt;a href=&#34;http://www.qwerty-msi.com/&#34;&gt;Qwerty.Msi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are a couple of settings you may want to add to your build configuration in order to make your self-contained build work&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Configure solution directories --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;basePath&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;$(BasePath)&amp;#39;==&amp;#39;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;$(MSBuildThisFileDirectory)..&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/basePath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;buildPath&amp;gt;&lt;/span&gt;$(BasePath)\build&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/buildPath&amp;gt;&amp;lt;sourcePath&amp;gt;&lt;/span&gt;$(BasePath)\src&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/sourcePath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;toolsPath&amp;gt;&lt;/span&gt;$(BasePath)\tools&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/toolsPath&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Configure tool directories --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- the ending \ is required for the extension pack --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extensionTasksPath&amp;gt;&lt;/span&gt;$(ToolsPath)\MSBuild.ExtensionPack\&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/extensionTasksPath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;msbuildCommunityTasksPath&amp;gt;&lt;/span&gt;$(ToolsPath)\MSBuildCommunityTasks&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/msbuildCommunityTasksPath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ilmergeToolPath&amp;gt;&lt;/span&gt;$(ToolsPath)\ILMerge&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ilmergeToolPath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;svnToolPath&amp;gt;&lt;/span&gt;$(ToolsPath)\Subversion\bin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/svnToolPath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- wix will use this property to determine the location of other files --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;wixToolPath&amp;gt;&lt;/span&gt;$(ToolsPath)\Wix&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/wixToolPath&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Configure target file paths --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;commonTargetsPath&amp;gt;&lt;/span&gt;$(BuildPath)\common.targets&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/commonTargetsPath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;msbuildCommunityTasksTargetsPath&amp;gt;&lt;/span&gt;$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/msbuildCommunityTasksTargetsPath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extensionPackTargetsPath&amp;gt;&lt;/span&gt;$(ExtensionTasksPath)MSBuild.ExtensionPack.tasks&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/extensionPackTargetsPath&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Configure WIX --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;wixTargetsPath&amp;gt;&lt;/span&gt;$(WixToolPath)\Wix.targets&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/wixTargetsPath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;wixTasksPath&amp;gt;&lt;/span&gt;$(WixToolPath)\WixTasks.dll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/wixTasksPath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;wixTargetsPath&amp;gt;&lt;/span&gt;$(WixToolPath)\Wix.targets&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/wixTargetsPath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;wixTasksPath&amp;gt;&lt;/span&gt;$(WixToolPath)\WixTasks.dll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/wixTasksPath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;luxTargetsPath&amp;gt;&lt;/span&gt;$(WixToolPath)\Lux.targets&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/luxTargetsPath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;luxTasksPath&amp;gt;&lt;/span&gt;$(WixToolPath)\LuxTasks.dll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/luxTasksPath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;luxTargetsPath&amp;gt;&lt;/span&gt;$(WixToolPath)\Lux.targets&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/luxTargetsPath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;luxTasksPath&amp;gt;&lt;/span&gt;$(WixToolPath)\LuxTasks.dll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/luxTasksPath&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this solution in place the next &amp;lsquo;new guy&amp;rsquo; does not have to waste time trying to figure out where those dependencies are ;)&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>97 Things Every Project Manager Should Know: Collective Wisdom from the Experts</title>
      <link>/post/2010-05-28-97-things-every-project-manager-should-know-collective-wisdom-from-the-experts/</link>
      <pubDate>Fri, 28 May 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-05-28-97-things-every-project-manager-should-know-collective-wisdom-from-the-experts/</guid>
      <description>
        
          &lt;p&gt;Lately i felt the need to work on my management skills so apart from practicing each day i decided to search for some inspiration in &lt;a href=&#34;http://www.amazon.com/Things-Every-Project-Manager-Should/dp/0596804164&#34;&gt;97 Things Every Project Manager Should Know: Collective Wisdom from the Experts&lt;/a&gt;. All i can say is that it&amp;rsquo;s yet another book in the series that is worth reading.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Microsoft SQL Server 2008 Internals</title>
      <link>/post/2010-05-28-microsoft-sql-server-2008-internals/</link>
      <pubDate>Fri, 28 May 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-05-28-microsoft-sql-server-2008-internals/</guid>
      <description>
        
          &lt;p&gt;Around new year i found out that i would be working with SQL Server 2008 so i needed a crash course. &lt;a href=&#34;http://www.amazon.com/Microsoft-SQL-Server-2008-Internals/dp/0735626243&#34;&gt;Microsoft SQL Server 2008 Internals&lt;/a&gt; is really not intended to be that, but it does cover the basics and then dives (way too) deep in detail. Although i stopped reading halfway the dives i found the book very interesting!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Support both GET and HEAD requests on the same method with WCF REST</title>
      <link>/post/2010-05-28-support-both-get-and-head-requests-on-the-same-method-with-wcf-rest/</link>
      <pubDate>Fri, 28 May 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-05-28-support-both-get-and-head-requests-on-the-same-method-with-wcf-rest/</guid>
      <description>
        
          &lt;p&gt;A while ago i had to modify an existing &lt;a href=&#34;http://msdn.microsoft.com/en-us/netframework/cc950529.aspx&#34;&gt;WCF REST&lt;/a&gt; service which was being consumed by &lt;a href=&#34;http://en.wikipedia.org/wiki/Background_Intelligent_Transfer_Service&#34;&gt;BITS&lt;/a&gt;. Apparently the implementation has changed in Windows7 in such a way that the BITS client first makes a HEAD request to discover the file size.&lt;/p&gt;
&lt;p&gt;The following attempts did not work&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// A method can not have both WebGet and WebInvoke attributes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[OperationContract]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;[WebGet]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;[WebInvoke(Method=&amp;#34;HEAD&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Stream Download(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; token) { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// A method can not have multiple WebInvoke attributes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[OperationContract]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;[WebInvoke(Method=&amp;#34;GET&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;[WebInvoke(&amp;#34;HEAD&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Stream Download(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; token) { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The trick is to use * as Method and handle the method related logic in your code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[OperationContract]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;[WebInvoke(Method=&amp;#34;*&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Stream Download(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; token)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; method = WebOperationContext.Current.IncomingRequest.Method;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (method == &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HEAD&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ProcessHead();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (method == &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ProcessGet();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArgumentException(method + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; is not supported.&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>WCF REST: generate correct Content-Length header for HEAD request</title>
      <link>/post/2010-05-28-wcf-rest-generate-correct-content-length-header-for-head-request/</link>
      <pubDate>Fri, 28 May 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-05-28-wcf-rest-generate-correct-content-length-header-for-head-request/</guid>
      <description>
        
          &lt;p&gt;The point of a HEAD request is to return a Content-Length header, but with an empty body.
The WCF transport stack has the annoying &amp;lsquo;feature&amp;rsquo; that it &amp;lsquo;corrects&amp;rsquo; the Content-Length header based on the stream that is returned.
With the aid of Carlos Figueira&amp;rsquo;s &lt;a href=&#34;http://social.msdn.microsoft.com/Forums/en/wcf/thread/c2672206-f255-4b14-b45e-7e3d057f4ffc&#34;&gt;MyLengthOnlyStream&lt;/a&gt; i was able to workaround that &amp;lsquo;feature&amp;rsquo; :)
(I know, i know, a good old HttpHandler is so much easier to implement!)&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Windows Internals: Including Windows Server 2008 and Windows Vista, Fifth Edition</title>
      <link>/post/2010-05-28-windows-internals-including-windows-server-2008-and-windows-vista-fifth-edition/</link>
      <pubDate>Fri, 28 May 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-05-28-windows-internals-including-windows-server-2008-and-windows-vista-fifth-edition/</guid>
      <description>
        
          &lt;p&gt;Given the fact that i have been developing software for MS-Windows the last couple of years i found it important to learn a bit more about the internals of the operating systems on which my applications run so i ordered a copy of &lt;a href=&#34;http://www.amazon.com/Windows%C2%AE-Internals-Including-Windows-PRO-Developer/dp/0735625301&#34;&gt;Windows Internals: Including Windows Server 2008 and Windows Vista, Fifth Edition&lt;/a&gt; back in september and learned quite a bit from the chapters that i found interesting: security, authorization, networking and analyzing crashes. I skimmed through the chapters on memory management, scheduling and file systems because they reminded me too much of Tanenbaum&amp;rsquo;s excellent &lt;a href=&#34;http://www.amazon.com/Modern-Operating-Systems-Andrew-Tanenbaum/dp/0136006639/ref=dp_ob_title_bk&#34;&gt;Modern Operating Systems&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Enumerating SpecialFolders</title>
      <link>/post/2010-05-02-enumerating-specialfolders/</link>
      <pubDate>Sun, 02 May 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-05-02-enumerating-specialfolders/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.environment.specialfolder.aspx&#34;&gt;Environment.SpecialFolder&lt;/a&gt; is a value-type that i always seem to forget about. Let&amp;rsquo;s try to do something about that by posting about it here :)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; name &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; Enum.GetNames(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(Environment.SpecialFolder)))
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; specialFolder = (Environment.SpecialFolder)Enum.Parse(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(Environment.SpecialFolder), name);
	Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0,25} =&amp;gt; {1}&amp;#34;&lt;/span&gt;, name, Environment.GetFolderPath(specialFolder));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\AppData\Roaming\Microsoft\Windows\Start Menu\Programs
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\Documents
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\Documents
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\Favorites
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\AppData\Roaming\Microsoft\Windows\Recent
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\AppData\Roaming\Microsoft\Windows\SendTo
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\AppData\Roaming\Microsoft\Windows\Start Menu
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\Music
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\Desktop
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\AppData\Roaming\Microsoft\Windows\Templates
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\AppData\Roaming
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\AppData\Local
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\AppData\Local\Microsoft\Windows\Temporary Internet Files
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\AppData\Roaming\Microsoft\Windows\Cookies
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\AppData\Local\Microsoft\Windows\History
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\ProgramData
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Windows\system32
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Program Files
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Users\timvw\Pictures
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  C:\Program Files\Common Files
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;

        
      </description>
    </item>
    
    <item>
      <title>Get root directory for IsolatedStorageFiles</title>
      <link>/post/2010-05-01-get-root-directory-for-isolatedstoragefiles/</link>
      <pubDate>Sat, 01 May 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-05-01-get-root-directory-for-isolatedstoragefiles/</guid>
      <description>
        
          &lt;p&gt;Sometimes you want to know the absolute path of a file that is persisted with &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.io.isolatedstorage.isolatedstoragefile(VS.95).aspx&#34;&gt;IsolatedStorageFile&lt;/a&gt;. Apparently there is an internal property RootDirectory which contains this information&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IsolatedStorageFileExtensions&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetRootDirectory(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; IsolatedStorageFile isf)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; property = isf.GetType().GetProperty(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RootDirectory&amp;#34;&lt;/span&gt;, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.GetProperty);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)property.GetValue(isf, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is a real world example of using &lt;a href=&#34;http://sharpbits.codeplex.com/&#34;&gt;SharpBITS.NET&lt;/a&gt; to download a file to IsolatedStorage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Program&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; mgr = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BitsManager();
		mgr.OnJobError += mgr_OnJobError;
		mgr.OnJobTransferred += mgr_OnJobTransferred;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; job = mgr.CreateJob(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;job@&amp;#34;&lt;/span&gt; + DateTime.Now, JobType.Download);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; src = &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;http://localhost/&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; dst = Path.Combine(GetIsfRoot(), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test.html&amp;#34;&lt;/span&gt;);
		job.AddFile(src,dst);
		job.Resume();

		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;running...&amp;#34;&lt;/span&gt;);
		Console.ReadKey();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; mgr_OnJobTransferred(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, NotificationEventArgs e)
	{
		e.Job.Complete();
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;completed: &amp;#34;&lt;/span&gt; + e.Job.DisplayName);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; mgr_OnJobError(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, ErrorNotificationEventArgs e)
	{
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error: &amp;#34;&lt;/span&gt; + e.Error.Description);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetIsfRoot()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; f = IsolatedStorageFile.GetUserStoreForAssembly())
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f.GetRootDirectory();
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>97 Things Every Software Architect Should Know: Collective Wisdom from the Experts</title>
      <link>/post/2010-04-19-97-things-every-software-architect-should-know-collective-wisdom-from-the-experts/</link>
      <pubDate>Mon, 19 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-04-19-97-things-every-software-architect-should-know-collective-wisdom-from-the-experts/</guid>
      <description>
        
          &lt;p&gt;I learned a couple of valuable lessons from &lt;a href=&#34;http://www.amazon.com/Things-Every-Software-Architect-Should/dp/059652269X&#34;&gt;97 Things Every Software Architect Should Know: Collective Wisdom from the Experts&lt;/a&gt; so i would certainly recommend this very readabile book!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring System.Interactive</title>
      <link>/post/2010-02-18-exploring-system-interactive/</link>
      <pubDate>Thu, 18 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-02-18-exploring-system-interactive/</guid>
      <description>
        
          &lt;p&gt;A couple of weeks ago i was working on an application that would transfer data through a couple of components as a List&lt;!-- raw HTML omitted --&gt;. In essence, all we were doing over and over again was the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IMapper
{
	TEntity FromObjectList(List objectList);
	List ToObjectList(TEntity entity);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My initial implementation (using EnumerableEx operators from &lt;!-- raw HTML omitted --&gt;Reactive Extensions&lt;!-- raw HTML omitted --&gt;) looked like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TEntity FromObjectList(List objectList)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; entity = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TEntity();
	
	properties
		.Zip(objectList, (property, &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;) =&amp;gt; AssignValueToProperty(entity, property, &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;))
		.Run();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; entity;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; AssignValueToProperty(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; entity, PropertyInfo property, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
{
	property.SetValue(entity, &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List ToObjectList(TEntity entity)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; properties
	.Select(property =&amp;gt; property.GetValue(entity, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;))
	.ToList();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the consumer code looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; person = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person { Id = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, Score = &lt;span style=&#34;color:#ae81ff&#34;&gt;1.3&lt;/span&gt;, Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tim&amp;#34;&lt;/span&gt;, Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sir&amp;#34;&lt;/span&gt; };

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; personMapper = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Mapper()
	.Map(x =&amp;gt; x.Id)
	.Map(x =&amp;gt; x.Score)
	.Map(x =&amp;gt; x.Name)
	.Map(x =&amp;gt; x.Title);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; data = personMapper.ToObjectList(person);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; clonedPerson = personMapper.FromObjectList(data);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wait a minute, in most situations we simply want to map all properties on the object. Let&amp;rsquo;s create a mapper for this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AutoMapper&lt;/span&gt; : Mapper &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; TEntity : &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AutoMapper()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(TEntity).GetProperties().Run(property =&amp;gt; Map(property));
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we don&amp;rsquo;t have to waste time doing the same thing over and over again! Because we always need to map all properties of our types we ended up with the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mapper&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; List ToObjectsList(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; TEntity entity)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; entity.GetType().GetProperties()
		.Select(property =&amp;gt; property.GetValue(entity, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;))
		.ToList();
	}
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; TEntity ToEntity(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; List objectsList) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; TEntity : &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()
	{
		TEntity entity = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TEntity();
		entity.GetType().GetProperties()
			.Zip(objectsList, (property, &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;) =&amp;gt;{ property.SetValue(entity, &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;); &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;})
			.Run();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; entity;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Learned something from Resharper: Enumerable.OfType&lt;TResult&gt;</title>
      <link>/post/2010-02-17-learned-something-from-resharper-enumerable-oftypetresult/</link>
      <pubDate>Wed, 17 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-02-17-learned-something-from-resharper-enumerable-oftypetresult/</guid>
      <description>
        
          &lt;p&gt;A couple of weeks ago i discovered &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb360913.aspx&#34;&gt;Enumerable.OfType&lt;!-- raw HTML omitted --&gt;&lt;/a&gt; when i let Resharper rewrite my code as a Linq statement. Here is the original code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; selectedPersons = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;personSelectItem&amp;gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; selectedItem &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; selectedItems)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; selectedPerson = selectedItem &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PersonSelectItem;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (selectedPerson == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
	selectedPersons.Add(selectedPerson);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is how it looks after the rewrite:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; selectedPersons = selectedItems.OfType&amp;lt;personSelectItem&amp;gt;().ToList();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yup, the &lt;a href=&#34;http://www.jetbrains.com/resharper/&#34;&gt;Resharper&lt;/a&gt; license was definitely worth it&amp;rsquo;s money.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Calculate EndpointAddress for Silverlight client</title>
      <link>/post/2010-02-15-calculate-endpointaddress-for-silverlight-client/</link>
      <pubDate>Mon, 15 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-02-15-calculate-endpointaddress-for-silverlight-client/</guid>
      <description>
        
          &lt;p&gt;Because Silverlight checks the origin it considers http://localhost and http://127.0.0.1 as different locations. In case you want your visitors to be able to use both addresses you can recalculate the address as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;EndpointAddress GetEndpointAddress(EndpointAddress endpointAddress)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; scheme = Application.Current.Host.Source.GetComponents(UriComponents.Scheme, UriFormat.Unescaped);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; serverAndPort = Application.Current.Host.Source.GetComponents(UriComponents.HostAndPort, UriFormat.Unescaped);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; pathAndQuery = endpointAddress.Uri.GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EndpointAddress(scheme + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;://&amp;#34;&lt;/span&gt; + serverAndPort + pathAndQuery);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And you can use this method as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; client = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryServiceClient();
client.Endpoint.Address = GetEndpointAddress(client.Endpoint.Address);
client.GetMessageCompleted += ClientGetMessageCompleted;
client.GetMessageAsync();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Clever TemplateFile hack</title>
      <link>/post/2010-02-12-clever-templatefile-hack/</link>
      <pubDate>Fri, 12 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-02-12-clever-templatefile-hack/</guid>
      <description>
        
          &lt;p&gt;In my current project i use TemplateFileTask (&lt;a href=&#34;http://msbuildtasks.tigris.org/&#34;&gt;MSBuild Community Tasks Project&lt;/a&gt;) to generate configuration files. I ran into the problem that i don&amp;rsquo;t want to expose a MEX endpoint in production. This is my initial template file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;service&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;behaviorconfiguration=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DemoBehavior&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DemoService.FileService&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;endpoint&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;address=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binding=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ws2007HttpBinding&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contract=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DemoService.IFileService&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	${MexEndpoint}
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is my initial msbuild task&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Project&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ToolsVersion=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3.5&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dDfaultTargets=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GenerateConfigFiles&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.microsoft.com/developer/msbuild/2003&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Project=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GenerateConfigFiles&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;MexEndpoint&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;endpoint&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;address=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mex&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binding=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mexHttpBinding&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contract=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IMetadataExchange&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/MexEndpoint&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#39;$(Env)&amp;#39;==&amp;#39;Production&amp;#39; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;MexEndpoint&amp;gt;&amp;lt;/MexEndpoint&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Tokens&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MexEndpoint&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ReplacementValue&amp;gt;&lt;/span&gt;$(MexEndpoint)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ReplacementValue&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Tokens&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;

		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TemplateFile&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Template=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Web.template.config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OutputFileName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Web.config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Tokens=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@(Tokens)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This results in the following configuration file: (WCF does not like the xml namespace declaration):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;service&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;behaviorconfiguration=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DemoBehavior&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DemoService.FileService&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;endpoint&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;address=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binding=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ws2007HttpBinding&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contract=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DemoService.IFileService&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;endpoint&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;address=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mex&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binding=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mexHttpBinding&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contract=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IMetadataExchange&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.microsoft.com/developer/msbuild/2003&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I noticed that a smart collegue of mine came up with the following template file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;service&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;behaviorconfiguration=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DemoBehavior&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DemoService.FileService&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;endpoint&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;address=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binding=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ws2007HttpBinding&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contract=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DemoService.IFileService&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;${MexBegin}endpoint address=&amp;#34;mex&amp;#34; binding=&amp;#34;mexHttpBinding&amp;#34; contract=&amp;#34;IMetadataExchange&amp;#34; /${MexEnd}&amp;gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this is how he defines the MexBegin and MexEnd properties in msbuild:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;MexBegin&amp;gt;&amp;lt;/MexBegin&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;MexEnd&amp;gt;&amp;lt;/MexEnd&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#39;$(Env)&amp;#39;==&amp;#39;Production&amp;#39; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;MexBegin&amp;gt;&lt;/span&gt;!--&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/MexBegin&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;MexEnd&amp;gt;&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/MexEnd&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This leads to a nice MEX endpoint for all environments and in Production we get the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--endpoint address=&amp;#34;mex&amp;#34; binding=&amp;#34;mexHttpBinding&amp;#34; contract=&amp;#34;IMetadataExchange&amp;#34; /--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Perhaps it is cleaner to implement my own TemplateFileTask but untill then this clever hack does the job.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Another missing method for IEnumerable&lt;T&gt;</title>
      <link>/post/2010-02-10-another-missing-method-for-ienumerablet/</link>
      <pubDate>Wed, 10 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-02-10-another-missing-method-for-ienumerablet/</guid>
      <description>
        
          &lt;p&gt;Currently there are two overloads for OrderBy on Enumerable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OrderBy(this IEnumerable&lt;!-- raw HTML omitted --&gt; source, Func&amp;lt;TSource, TKey&amp;gt; keySelector)&lt;/li&gt;
&lt;li&gt;OrderBy(this IEnumerable&lt;!-- raw HTML omitted --&gt; source, Func&amp;lt;TSource, TKey&amp;gt; keySelector, IComparer&lt;!-- raw HTML omitted --&gt; comparer)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because i don&amp;rsquo;t want to implement an IComparer&lt;!-- raw HTML omitted --&gt; each time i have implemented the following class&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DelegateComparer&lt;/span&gt;&amp;lt;T&amp;gt; : IComparer&amp;lt;T&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Func&amp;lt;t, T, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; CompareFunction { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DelegateComparer(Func&amp;lt;t, T, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; compareFunction)
	{
		CompareFunction = compareFunction;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Compare(T x, T y)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; CompareFunction(x, y);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now i can define a nice extension method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IOrderedEnumerable&amp;lt;tsource&amp;gt; OrderBy&amp;lt;tsource, TKey&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; IEnumerable&amp;lt;tsource&amp;gt; source, Func&amp;lt;tsource, TKey&amp;gt; keySelector, Func&amp;lt;tkey, TKey, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; compareFunction)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; comparer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DelegateComparer&amp;lt;tkey&amp;gt;(compareFunction);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; source.OrderBy(keySelector, comparer);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Verify that a X509Certificate can be used for key exchange</title>
      <link>/post/2010-02-02-verify-that-a-x509certificate-can-be-used-for-key-exchange/</link>
      <pubDate>Tue, 02 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-02-02-verify-that-a-x509certificate-can-be-used-for-key-exchange/</guid>
      <description>
        
          &lt;p&gt;Here is another method that earned it&amp;rsquo;s place in my ever growing toolbox:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; CanDoKeyExchange(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; X509Certificate2 certificate)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!certificate.HasPrivateKey) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; privateKey = certificate.PrivateKey &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; RSACryptoServiceProvider;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (privateKey == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; canDoKeyExchange = privateKey.CspKeyContainerInfo.KeyNumber == KeyNumber.Exchange;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; canDoKeyExchange;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Presenting ValueType&lt;T&gt;</title>
      <link>/post/2010-01-28-presenting-valuetypet/</link>
      <pubDate>Thu, 28 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-01-28-presenting-valuetypet/</guid>
      <description>
        
          &lt;p&gt;Here is a base class for some code that i have written once too many in my life: (In case you&amp;rsquo;re an early adaptor (.Net 4.0) you may want to use System.Tuple&lt;!-- raw HTML omitted --&gt; as base class)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueType&lt;/span&gt;&amp;lt;T&amp;gt; : IComparable, IComparable&amp;lt;valueType&amp;lt;T&amp;gt;&amp;gt;, IEquatable&amp;lt;valueType&amp;lt;T&amp;gt;&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; T : IComparable&amp;lt;T&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; T Value { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ValueType(T &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
	{
		Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetHashCode()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Value.GetHashCode();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; ToString()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Value.ToString();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Equals(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; obj)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Equals(obj &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ValueType&amp;lt;T&amp;gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Equals(ValueType&amp;lt;T&amp;gt; other)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Compare(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, other) == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; CompareTo(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; obj)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; CompareTo(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, obj &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ValueType&amp;lt;T&amp;gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; CompareTo(ValueType&amp;lt;T&amp;gt; other)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Compare(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, other);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Compare(ValueType&amp;lt;T&amp;gt; instance1, ValueType&amp;lt;T&amp;gt; instance2)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ReferenceEquals(instance1, instance2)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ReferenceEquals(instance1, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ReferenceEquals(instance2, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ReferenceEquals(instance1.Value, instance2.Value)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ReferenceEquals(instance1.Value, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ReferenceEquals(instance2.Value, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instance1.Value.CompareTo(instance2.Value);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; ==(ValueType&amp;lt;T&amp;gt; instance1, ValueType&amp;lt;T&amp;gt; instance2)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Compare(instance1, instance2) == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; !=(ValueType&amp;lt;T&amp;gt; instance1, ValueType&amp;lt;T&amp;gt; instance2)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; !(instance1 == instance2);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &amp;lt;(ValueType&amp;lt;T&amp;gt; instance1, ValueType&amp;lt;T&amp;gt; instance2)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Compare(instance1, instance2) &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; 
	} 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &amp;gt;(ValueType&amp;lt;T&amp;gt; instance1, ValueType&amp;lt;T&amp;gt; instance2)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Compare(instance1, instance2) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Do we need an EventAggregator when we have an IOC container?</title>
      <link>/post/2010-01-27-do-we-need-an-eventaggregator-when-we-have-an-ioc-container/</link>
      <pubDate>Wed, 27 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-01-27-do-we-need-an-eventaggregator-when-we-have-an-ioc-container/</guid>
      <description>
        
          &lt;p&gt;An &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/cc707867.aspx&#34;&gt;Event Aggregator&lt;/a&gt; is an example of a &lt;a href=&#34;http://www.eaipatterns.com/PublishSubscribeChannel.html&#34;&gt;Publish/Subscribe channel&lt;/a&gt;. A while ago i started wondering if we still need an Event Aggregator in our compisite applications if we have an IOC container that takes cares of dependency wiring. An IOC container can easily inject the Event/MessageHandler(s) in the Event/MessagePublisher(s)&amp;hellip; I&amp;rsquo;m still not sure about the answer (Yes/No).&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>About dependencies</title>
      <link>/post/2010-01-26-about-dependencies/</link>
      <pubDate>Tue, 26 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-01-26-about-dependencies/</guid>
      <description>
        
          &lt;p&gt;This weekend i noticed a couple of posts by Uncle Bob trying to get some discussions going. In &lt;a href=&#34;http://blog.objectmentor.com/articles/2010/01/23/mocking-mocking-and-testing-outcomes&#34;&gt;Mocking Mocking and Testing Outcomes&lt;/a&gt; at some point he generates a fake of some class&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Oh, ick!” you say. Yes, I agree it’s a lot of code. On the other hand, it took me just a single keystroke on my IDE to generate all those dummy methods. (In IntelliJ it was simply command-I to implement all unimplemented methods.) So it wasn’t particularly hard. And, of course, I can put this code somewhere where nobody had to look at it unless they want to. It has the advantage that anybody who knows Java can understand it, and can look right at the methods to see what they are returning. No “special” knowledge of the mocking framework is necessary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So adding a lot of generated code, which no-one should ever look at, is better than a mocking framework? Hahaha, why would i want to repeat myself creating all those fake objects? (&lt;a href=&#34;http://c2.com/cgi/wiki?DontRepeatYourself&#34;&gt;DRY&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Another problem that i have with his example is the fact that the &amp;lsquo;dependency&amp;rsquo; has a ton of methods that are not used by the consumer, so it makes me wonder: why are those methods there? Define an interface for the required methods, and have your consumer use that interface instead. This way you don&amp;rsquo;t have to look at those unused methods which only clutter the API.&lt;/p&gt;
&lt;p&gt;A second read made it clear that Uncle Bob is talking about unit-tests, which are typically implemented as state-based tests. In case you&amp;rsquo;re doing integration tests, you will have (more) dependencies and want to verify the interaction between your system under test and the dependencies. And that is (imho) the scenario where mocking frameworks really shine 🙂&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>About forced design</title>
      <link>/post/2010-01-23-about-forced-design/</link>
      <pubDate>Sat, 23 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-01-23-about-forced-design/</guid>
      <description>
        
          &lt;blockquote&gt;
&lt;p&gt;if you need typemock your design is wrong.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Although i understand what people are trying to say with that quote, it&amp;rsquo;s wrong on many levels. I pretty much agree with everything that Roy wrote in &lt;a href=&#34;http://weblogs.asp.net/rosherove/archive/2009/11/12/test-driven-design-willed-vs-forced-designs.aspx&#34;&gt;Test driven design – Willed vs. Forced Designs&lt;/a&gt;. As some commenters pointed out it is hard to convince management that they need an isolation framework, let alone that they have to pay for one.&lt;/p&gt;
&lt;p&gt;A couple of thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What about Pex Stubs &amp;amp; Moles? It uses the profiling API (less limitations than rhino/moq/&amp;hellip;) too and for a lot of shops doing .Net development it&amp;rsquo;s free.&lt;/li&gt;
&lt;li&gt;I really don&amp;rsquo;t understand people that are unwilling to pay for tools that can contribute to the generation of business value (eg: Resharper, NCover, NDepend, &amp;hellip;) when they don&amp;rsquo;t come from Microsoft.&lt;/li&gt;
&lt;li&gt;Filling up gaps in the .Net/Microsoft space seems like an awful business model.&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Programming the Bus Pirate with C#</title>
      <link>/post/2010-01-16-programming-the-bus-pirate-with-c/</link>
      <pubDate>Sat, 16 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-01-16-programming-the-bus-pirate-with-c/</guid>
      <description>
        
          &lt;p&gt;A while ago i received my &lt;a href=&#34;http://code.google.com/p/the-bus-pirate/&#34;&gt;Bus Pirate&lt;/a&gt; from &lt;a href=&#34;http://www.seeedstudio.com/depot/&#34;&gt;Seeed Studio Depot&lt;/a&gt;. In essence it is a universal serial bus interface and i would love to program it using c#. I know that i can use the DataReceived event and then fiddle with bits (read &lt;a href=&#34;http://msmvps.com/blogs/coad/archive/2005/03/23/39466.aspx#usb&#34;&gt;here&lt;/a&gt; if you&amp;rsquo;re into that kind of self-punishment) but spawning a separate thread to do the blocking work is ten times less work to get it up and running&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; serialPort = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SerialPort(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COM9&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115200&lt;/span&gt;, Parity.None, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, StopBits.One))
	{
		serialPort.Open();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(() =&amp;gt; WriteLinesFrom(serialPort)).Start();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; command = Console.ReadLine();
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (command == &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EXIT&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			serialPort.WriteLine(command);
		}
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; WriteLinesFrom(SerialPort serialPort)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) Console.WriteLine(serialPort.ReadLine());
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>About raising events</title>
      <link>/post/2010-01-09-about-raising-events/</link>
      <pubDate>Sat, 09 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-01-09-about-raising-events/</guid>
      <description>
        
          &lt;p&gt;Very often i see people write the following to &amp;lsquo;safely&amp;rsquo; raise a method&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;event&lt;/span&gt; EventHandler Stopped;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RaiseStoppedEvent()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Stopped != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) Stopped(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, EventArgs.Empty);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some developers think that they should program defensively and avoid the potential concurrency problem&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;event&lt;/span&gt; EventHandler Stopped;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RaiseStoppedEvent()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; handler = Stopped;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (handler!= &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) handler(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, EventArgs.Empty);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then there is Tim&amp;rsquo;s way to raise an event: (If i&amp;rsquo;m not mistaken it was &lt;a href=&#34;http://www.ayende.com&#34;&gt;Ayende&lt;/a&gt; who once blogged about this)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;event&lt;/span&gt; EventHandler Stopped = &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { };

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RaiseStoppedEvent()
{
	Stopped(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, EventArgs.Empty);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Add &amp;quot;Run as administrator&amp;quot; to .sln files</title>
      <link>/post/2010-01-09-add-run-as-administrator-to-sln-files/</link>
      <pubDate>Sat, 09 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-01-09-add-run-as-administrator-to-sln-files/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://www.howtogeek.com/howto/windows-vista/add-run-as-administrator-to-any-file-type-in-windows-vista/&#34;&gt;Another trick&lt;/a&gt; i learned from the &amp;ldquo;How-To Geek&amp;rdquo; is how to add a &amp;ldquo;Run as administrator&amp;rdquo; option in the windows shell for .sln files which makes life considerably easier 😉&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/AddRunAsAdministratorToSlnFilesInShell.reg.txt&#34;&gt;AddRunAsAdministratorToSlnFilesInShell.reg.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/AddRunAsAdministratorAsDefaultToSlnFilesInShell.reg.txt&#34;&gt;AddRunAsAdministratorAsDefaultToSlnFilesInShell.reg.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Creating graphs with the Silverlight Toolkit</title>
      <link>/post/2010-01-08-creating-graphs-with-the-silverlight-toolkit/</link>
      <pubDate>Fri, 08 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-01-08-creating-graphs-with-the-silverlight-toolkit/</guid>
      <description>
        
          &lt;p&gt;As i wrote already: In a chart the elements on the X-axis are usually numbers or dates, and the elements on the Y-axis are usually doubles. We can define such a combination as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;&amp;lt;T&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; T X { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; Y { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is a little helper function for creating line series that are used by the &lt;a href=&#34;http://silverlight.codeplex.com/&#34;&gt;Silverlight Toolkit&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; LineSeries Create&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; title, Series&amp;lt;T&amp;gt; series, Func&amp;lt;t, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&amp;gt; f) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; T : IComparable&amp;lt;T&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; points = series.Select(x =&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Point&amp;lt;T&amp;gt; { X = x, Y = f(x) });

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; lineSeries = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LineSeries
	{
		Title = title,
		ItemsSource = points,
		IndependentValuePath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;,
		DependentValuePath = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;
	};

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lineSeries;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given all this infrastructure we can easily draw the graph of a function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MainPage()
{
	InitializeComponent();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; series = &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;To(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;);

	Func&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&amp;gt; multiplyByTwo = x =&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; * x;
	Chart1.Series.Add(Create(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2x&amp;#34;&lt;/span&gt;, series, multiplyByTwo));

	Func&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&amp;gt; multiplyByThree = x =&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; * x;
	Chart1.Series.Add(Create(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x/2&amp;#34;&lt;/span&gt;, series, multiplyByThree));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is how the result looks like (too much data on the chart)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/silverlightchart.png&#34; alt=&#34;screenshot of chart in silverlight toolkit&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Creating series of elements</title>
      <link>/post/2010-01-08-creating-series-of-elements/</link>
      <pubDate>Fri, 08 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-01-08-creating-series-of-elements/</guid>
      <description>
        
          &lt;p&gt;Lately i have done quite a bit of charting. Very often the X-axis is populated with a series of numbers or dates. This can be as simple as: (My very little DSL in &lt;a href=&#34;http://codebetter.com/blogs/jeremy.miller/archive/2010/01/06/writing-internal-dsl-s-in-msdn.aspx&#34;&gt;Jeremy D. Miller Style&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Test]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldBeAbleToGetSeriesOfNumbers()
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// Arrange
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; series = &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;To(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);

	&lt;span style=&#34;color:#75715e&#34;&gt;// Act
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; elements = series.Elements;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Assert
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; expected = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; };
	CollectionAssert.AreEqual(expected, elements);
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Test]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldBeAbleToGetSeriesOfDays()
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// Arrange
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; now = DateTime.Now.Date;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; twoDaysLater = now.AddDays(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; series = now.To(twoDaysLater);

	&lt;span style=&#34;color:#75715e&#34;&gt;// Act
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; elements = series.Elements;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Assert
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; expectedDays = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;[] { now, now.AddDays(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), now.AddDays(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) };
	CollectionAssert.AreEqual(expectedDays, elements);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is the code that makes these tests pass&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Series&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Series&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; To(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; to)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Create(&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, to);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Series&amp;lt;dateTime&amp;gt; To(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; DateTime &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, DateTime to)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Create(&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, to);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Series&amp;lt;dateTime&amp;gt; Create(DateTime &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, DateTime to)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Series&amp;lt;dateTime&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;.Date, to.Date, d =&amp;gt; d.AddDays(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Series&amp;lt;dateTime&amp;gt; Create(DateTime &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; numberOfDays)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Create(&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;.Date, &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;.Date.AddDays(numberOfDays));
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Series&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; Create(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; to)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Series&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, to, n =&amp;gt; n + &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Series&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; Create(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; to, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; stepSize)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Series&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, to, n =&amp;gt; n + stepSize);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Series&lt;/span&gt;&amp;lt;T&amp;gt; : IEnumerable&amp;lt;T&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; T : IComparable
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; T From { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; T To { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Func&amp;lt;t, T&amp;gt; Step { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Series(T &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, T to, Func&amp;lt;t, T&amp;gt; step)
	{
		From = &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;;
		To = to;
		Step = step;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; Elements
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; current = From;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (current.CompareTo(To) &amp;lt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) 
			{ 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; current; current = Step(current); 
			} 
		} 
	} 
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IEnumerator&amp;lt;T&amp;gt; GetEnumerator()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Elements.GetEnumerator();
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GetEnumerator();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Refactoring to Patterns</title>
      <link>/post/2009-12-27-refactoring-to-patterns/</link>
      <pubDate>Sun, 27 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-12-27-refactoring-to-patterns/</guid>
      <description>
        
          &lt;p&gt;Earlier this month i ordered my copy of &lt;a href=&#34;http://www.amazon.com/Refactoring-Patterns-Joshua-Kerievsky/dp/0321213351&#34;&gt;Refactoring to Patterns&lt;/a&gt;. This books has two parts: the first part describes patterns and code smells (anti-patterns) and the second part is a catalog of refactorings. The first part is not bad, but i appreciated the second part much more. I did not read the book from front to cover and skipped the &amp;lsquo;mechanics&amp;rsquo; sections (abstract steps to take in order to accomplish a particular refactoring). I focussed on the &amp;lsquo;example&amp;rsquo; sections instead which demonstrate the application of the previously mentionned mechanics.&lt;/p&gt;
&lt;p&gt;During the reading of this book i had a couple of &amp;lsquo;aha&amp;rsquo; moments which gave me the feeling that i understood (appreciated) a certain pattern better. All in all a good book to read.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Ninject: connect an IProxyFactory component to the kernel</title>
      <link>/post/2009-12-16-ninject-connect-an-iproxyfactory-component-to-the-kernel/</link>
      <pubDate>Wed, 16 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-12-16-ninject-connect-an-iproxyfactory-component-to-the-kernel/</guid>
      <description>
        
          &lt;p&gt;Because it&amp;rsquo;s the second time that i run into this i will post the solution here so that i (and all the other people that run into the same issue) can easily solve it next time. Anyway, i was playing with &lt;a href=&#34;http://ninject.org/&#34;&gt;Ninject&lt;/a&gt; and ran into the following exception:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error activating XXX: the implementation type YYY requests static interceptors, or dynamic interceptors have been defined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to provide interception, you must connect an IProxyFactory component to the kernel.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you search for implementations of IProxyFactory you will find the DynamicProxy2ProxyFactory and the LinFuProxyFactory classes. But how can you tell your kernel to use them? This is pretty simple (but hard to find on the web):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;Kernel.Components.Connect&amp;lt;iproxyFactory&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DynamicProxy2ProxyFactory());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of writing this code to connect the ProxyFactory implementation you can also use the XXX module (which does it for you) as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; kernel = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StandardKernel(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DynamicProxy2Module(), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BusinessModule());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>The Nomadic Developer: Surviving and Thriving in the World of Technology Consulting</title>
      <link>/post/2009-12-07-the-nomadic-developer-surviving-and-thriving-in-the-world-of-technology-consulting/</link>
      <pubDate>Mon, 07 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-12-07-the-nomadic-developer-surviving-and-thriving-in-the-world-of-technology-consulting/</guid>
      <description>
        
          &lt;p&gt;This is probably one of the shortest book reviews ever, but there is not much to say about &lt;a href=&#34;http://www.amazon.co.uk/Nomadic-Developer-Surviving-Technology-Consulting/dp/0321606396&#34;&gt;The Nomadic Developer: Surviving and Thriving in the World of Technology Consulting&lt;/a&gt;. Just read it if you are (or considering to become) an IT-consultant because it really covers both good and bad aspects in depth.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Bing vs Google in 5 seconds</title>
      <link>/post/2009-12-05-bing-vs-google-in-5-seconds/</link>
      <pubDate>Sat, 05 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-12-05-bing-vs-google-in-5-seconds/</guid>
      <description>
        
          &lt;p&gt;A while ago i sat in a meeting and some ms-fanboy used &lt;a href=&#34;http://www.bing.com&#34;&gt;Bing&lt;/a&gt; to find out how much 60 inches were in meters. The first page had pages with conversion factors but none of them contained the actual answer. I suggested that he&amp;rsquo;d use &lt;a href=&#34;http://www.google.com&#34;&gt;Google&lt;/a&gt; instead and while he was keying in the question the answer already appeared.&lt;/p&gt;
&lt;p&gt;Today i wanted to make a screencast of this difference in experience but it seems that bing has the &amp;lsquo;conversion&amp;rsquo; feature now too. Wondering about what would make me switch search engines&amp;hellip;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>In case you really have to Append one array to another</title>
      <link>/post/2009-12-04-in-case-you-really-have-to-append-one-array-to-another/</link>
      <pubDate>Fri, 04 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-12-04-in-case-you-really-have-to-append-one-array-to-another/</guid>
      <description>
        
          &lt;p&gt;Here is another problem i&amp;rsquo;ve seen people solve once too many: Append one array to another. STOP. Revisit the problem. Can&amp;rsquo;t you simply use List&lt;!-- raw HTML omitted --&gt; and move on to solving actual business problems? In case you really can&amp;rsquo;t get rid of the arrays read the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;Given()
{
	source = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;[] { SourceElement };
	destination = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;[] { DestinationElement };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;When()
{
	source.AppendTo(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; destination);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;ThenTheDestinationShouldStillHaveTheDestinationElement()
{
	Assert.AreEqual(DestinationElement, destination[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;ThenTheDestinationShouldHaveBeenExtendedWithTheSourceElement()
{
	Assert.AreEqual(SourceElement, destination[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is the code which satisfies the requirements&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Extensions&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AppendTo&amp;lt;t&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; T[] sourceArray, &lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; T[] destinationArray)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; sourceLength = sourceArray.Length;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; destinationLength = destinationArray.Length;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; extendedLength = destinationLength + sourceLength;
		Array.Resize(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; destinationArray, extendedLength);
		Array.Copy(sourceArray, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, destinationArray, destinationLength, sourceLength);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Perhaps it&amp;rsquo;s time to start (or does it exist already, cause i can&amp;rsquo;t find it) an open-source project with extension methods.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Easy pattern for Control state</title>
      <link>/post/2009-11-21-easy-pattern-for-control-state/</link>
      <pubDate>Sat, 21 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-11-21-easy-pattern-for-control-state/</guid>
      <description>
        
          &lt;p&gt;If you have decided that your WebControl requires to maintain it&amp;rsquo;s state you will want to figure out how to implement Control state. Most examples on the web will then create an array of objects and then hardcode the indices to find stuff back&amp;hellip; Simply define a serializable inner class and use that instead of the &amp;lsquo;magic array object&amp;rsquo;. Eg&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SilverlightHost&lt;/span&gt; : WebControl
{
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[Serializable]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; BaseState { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; SilverlightUrl { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; SilverlightErrorHandlerUrl { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; Parameters { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnInit(EventArgs e)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.OnInit(e);
		Page.RegisterRequiresControlState(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; SaveControlState()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; state = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; State
		{
			BaseState = &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.SaveControlState(),
			SilverlightUrl = SilverlightUrl,
			SilverlightErrorHandlerUrl = SilverlightErrorHandlerUrl,
			Parameters = parameters
		};
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; state;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; LoadControlState(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; savedState)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; state = (State)savedState;
		SilverlightUrl = state.SilverlightUrl;
		SilverlightErrorHandlerUrl = state.SilverlightErrorHandlerUrl;
		parameters = state.Parameters;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.LoadControlState(state.BaseState);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Silverlight and unit testing..</title>
      <link>/post/2009-11-19-silverlight-and-unit-testing/</link>
      <pubDate>Thu, 19 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-11-19-silverlight-and-unit-testing/</guid>
      <description>
        
          &lt;p&gt;A while ago i was looking for a unittesting framework that can be used with Silverlight. Because i don&amp;rsquo;t want to launch a webbrowser on my buildserver i ruled the &lt;a href=&#34;http://code.msdn.microsoft.com/silverlightut/&#34;&gt;Unit Test Framework for Microsoft Silverlight&lt;/a&gt; out. A couple of websearches later i decided to try a Silverlight port of good ol&#39; NUnit, &lt;a href=&#34;http://code.google.com/p/nunitsilverlight/&#34;&gt;nunitsilverlight&lt;/a&gt;, and was pretty pleased with results.&lt;/p&gt;
&lt;p&gt;A couple of things to keep in mind though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure your test runner loads the correct System assembly (Possible solution: set Copy Local to true in your test project)&lt;/li&gt;
&lt;li&gt;In case your test runner has to run tests in both &amp;lsquo;regular&amp;rsquo; and &amp;lsquo;silverlight&amp;rsquo; assemblies, make sure that your runner uses separate AppDomains (For NUnit use the /Domain=Multiple option)&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Couple of methods missing on ObservableCollection</title>
      <link>/post/2009-11-06-couple-of-methods-missing-on-observablecollection/</link>
      <pubDate>Fri, 06 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-11-06-couple-of-methods-missing-on-observablecollection/</guid>
      <description>
        
          &lt;p&gt;Here are a couple of methods that are missing on &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms668604.aspx&#34;&gt;ObservableCollection&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ObservableCollectionExtensions&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AddRange&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; ObservableCollection&amp;lt;T&amp;gt; observableCollection, IEnumerable&amp;lt;T&amp;gt; elements)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; element &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; elements) observableCollection.Add(element);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ObservableCollection&amp;lt;T&amp;gt; Create&amp;lt;T&amp;gt;(IEnumerable&amp;lt;T&amp;gt; elements)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; observableCollection = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ObservableCollection&amp;lt;T&amp;gt;();
		observableCollection.AddRange(elements);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; observableCollection;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Presenting FilterList</title>
      <link>/post/2009-11-06-presenting-filterlist/</link>
      <pubDate>Fri, 06 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-11-06-presenting-filterlist/</guid>
      <description>
        
          &lt;p&gt;Earlier today i decided to add &amp;lsquo;Filtering&amp;rsquo; to my SortableBindingList. This resulted in writing a &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/FilterList.txt&#34;&gt;FilterList&lt;/a&gt; class. This class can be easily used as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; textBoxFilter_KeyUp(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, KeyEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; filterChars = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.textBoxFilter.Text.ToLower();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Filter(filterChars);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Filter(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; filterChars)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; persons = (FilterList&amp;lt;person&amp;gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource;
	persons.Filter(p =&amp;gt; p.Firstname.ToLower().Contains(filterChars));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I even created a screencast to demonstrate it:&lt;/p&gt;
&lt;p&gt;[mediaplayer src=&amp;lsquo;http://www.timvw.be/screencasts/filterlist.wmv&amp;rsquo; width=512 height=344]&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Another method i wrote once too many</title>
      <link>/post/2009-11-01-another-method-i-wrote-once-too-many/</link>
      <pubDate>Sun, 01 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-11-01-another-method-i-wrote-once-too-many/</guid>
      <description>
        
          &lt;p&gt;Virtually every Silverlight application will fetch resources at one point or another. In case you&amp;rsquo;re using the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.net.webclient(VS.95).aspx&#34;&gt;WebClient&lt;/a&gt; you have probably written the following in your xxxCompletedEventHandler&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e.Error != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !e.Cancelled)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// do something with the result
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Anyway, i don&amp;rsquo;t like repetition so i captured the conditions in a method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExtensionMethods&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; HasResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; AsyncCompletedEventArgs e)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e.Error != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e.Cancelled) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can write our code as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e.HasResult())
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// do something with the result
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apart from saving a couple of keystrokes this also allows us to easily add another condition to determine the success of the operation.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Party for one</title>
      <link>/post/2009-10-29-party-for-one/</link>
      <pubDate>Thu, 29 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-29-party-for-one/</guid>
      <description>
        
          &lt;p&gt;Inspired by Jimmy Bogard&amp;rsquo;s &lt;a href=&#34;http://www.lostechies.com/blogs/jimmy_bogard/archive/2009/10/15/more-missing-linq-operators.aspx&#34;&gt;More missing LINQ operators&lt;/a&gt; i found another one&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; MakeEnumerable&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; T element)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; element;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Presenting PathBuilder</title>
      <link>/post/2009-10-29-presenting-pathbuilder/</link>
      <pubDate>Thu, 29 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-29-presenting-pathbuilder/</guid>
      <description>
        
          &lt;p&gt;Currently it is annoying to build a path with &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/fyy7a5kt.aspx&#34;&gt;Path.Combine&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; home1 = Path.Combine(Path.Combine(Path.Combine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Users&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timvw&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My Documents&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is how it can be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; home2 = PathBuilder.Combine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Users&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timvw&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My Documents&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The implementation is pretty simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PathBuilder&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Combine(&lt;span style=&#34;color:#66d9ef&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] parts)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parts.Aggregate((l, r) =&amp;gt; Path.Combine(l, r));
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Separation of concerns: Behavior = Trigger &#43; TriggerAction</title>
      <link>/post/2009-10-19-separation-of-concerns-behavior-trigger-triggeraction/</link>
      <pubDate>Mon, 19 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-19-separation-of-concerns-behavior-trigger-triggeraction/</guid>
      <description>
        
          &lt;p&gt;If you look at my &lt;a href=&#34;http://www.timvw.be/true-keybehavior-with-system-windows-interactivity-behavior/&#34;&gt;KeyBehavior&lt;/a&gt; you notice that it is doing two things: register for events so that the behavior can be triggered and handle the actual command invocation. In order to enhance reuse we can refactor this KeyBehavior in a KeyTrigger and an InvokeCommandAction. Well, we&amp;rsquo;re not going to do that, because they exist already in the silverlight sdk.&lt;/p&gt;
&lt;p&gt;A shortcoming of the InvokeCommandAction is that it can only invoke commands on the FrameworkElement itself, thus we write a custom implementation that finds commands on the DataContext instead&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InvokeCommandAction&lt;/span&gt; : TriggerAction&amp;lt;frameworkElement&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; CommandName { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }

	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Invoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; parameter)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; viewModel = AssociatedObject.DataContext;
		GetCommandAndExecuteIt(viewModel, CommandName);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GetCommandAndExecuteIt(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; viewModel, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; commandName)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; command = viewModel.GetPropertyValue&amp;lt;icommand&amp;gt;(commandName);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(command.CanExecute(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)) command.Execute(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can drag this action on our design surface in Blend and select a trigger that goes with it&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/InvokeCommandAction_ChooseTrigger.png&#34; alt=&#34;choosing a keypress trigger in blend&#34;&gt;&lt;/p&gt;
&lt;p&gt;All we have to do is choose the Key and Command to invoke&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/InvokeCommandAction_SetProperties.png&#34; alt=&#34;setting properties for action in blend&#34;&gt;&lt;/p&gt;
&lt;p&gt;In XAML this looks like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;interactivity:Interaction.Triggers&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ii:KeyTrigger&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Right&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:InvokeCommandAction&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PlayerRight&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ii:KeyTrigger&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ii:KeyTrigger&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:InvokeCommandAction&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PlayerLeft&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ii:KeyTrigger&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ii:KeyTrigger&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Up&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:InvokeCommandAction&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PlayerUp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ii:KeyTrigger&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ii:KeyTrigger&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Down&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:InvokeCommandAction&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PlayerDown&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ii:KeyTrigger&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/interactivity:Interaction.Triggers&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I guess this ends our exploration of the behavior features in Silverlight.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>True KeyBehavior with System.Windows.Interactivity.Behavior</title>
      <link>/post/2009-10-19-true-keybehavior-with-system-windows-interactivity-behavior/</link>
      <pubDate>Mon, 19 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-19-true-keybehavior-with-system-windows-interactivity-behavior/</guid>
      <description>
        
          &lt;p&gt;Yesterday i demonstrated how attached properties can be used to invoke commands on specific key presses (and releases). With the aid of System.Windows.Interactivity.Behavior we can implement a true behavior and we get an extension point to do the required cleanup.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/BlendKeyBehavior.png&#34; alt=&#34;screenshot of Blend managing a KeyBehavior&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;grid&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;interactivity:Interaction.Behaviors&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:KeyBehavior&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:KeyBehavior.DownKeyCommands&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:KeyCommandName&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Right&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PlayerRight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:KeyCommandName&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PlayerLeft&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:KeyCommandName&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Up&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PlayerUp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:KeyCommandName&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Down&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PlayerDown&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/inf:KeyBehavior.DownKeyCommands&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/inf:KeyBehavior&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/interactivity:Interaction.Behaviors&amp;gt;&lt;/span&gt;
...
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/grid&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The behavior implementation is the same as yesterday, only this time we thankfully override the OnAttached and OnDetaching methods&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyBehavior&lt;/span&gt; : Behavior&amp;lt;frameworkElement&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&amp;lt;keyCommandName&amp;gt; DownKeyCommands { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&amp;lt;keyCommandName&amp;gt; UpKeyCommands { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; KeyBehavior()
	: &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;()
	{
		DownKeyCommands = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;keyCommandName&amp;gt;();
		UpKeyCommands = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;keyCommandName&amp;gt;();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnAttached()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.OnAttached();
		SubscribeToKeyEvents();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnDetaching()
	{
		UnsubscribeFromKeyEvents();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.OnDetaching();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SubscribeToKeyEvents()
	{
		AssociatedObject.KeyDown += AssociatedObject_KeyDown;
		AssociatedObject.KeyUp += AssociatedObject_KeyUp;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UnsubscribeFromKeyEvents()
	{
		AssociatedObject.KeyDown -= AssociatedObject_KeyDown;
		AssociatedObject.KeyUp -= AssociatedObject_KeyUp;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Silverlight: leveraging attached properties to handle key events</title>
      <link>/post/2009-10-17-silverlight-leveraging-attached-properties-to-handle-key-events/</link>
      <pubDate>Sat, 17 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-17-silverlight-leveraging-attached-properties-to-handle-key-events/</guid>
      <description>
        
          &lt;p&gt;I strongly believe that input handling is a responsability that belongs to the View. At first i simply added the following in the code-behind of my GameView&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnKeyDown(KeyEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.OnKeyDown(e);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e.Key == Key.Left) Model.MovePlayerLeft();
	...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But i wanted to play with the cool kids so i exposed ICommand properties on my ViewModel instead and rewrote the code like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnKeyDown(KeyEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.OnKeyDown(e);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e.Key == Key.Left) Model.PlayerLeft.Execute(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
	...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Offcourse, designers should not have to write code at all, thus i searched for a different solution. Because there isn&amp;rsquo;t a behavior that allows me to differentiate the command based on the actual key being pressed i wrote my own KeyEvents class which allows the designer to map a key to a command. Here is an example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;grid&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:KeyEvents.Down&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:KeyCommand&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Right&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PlayerRight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:KeyCommand&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Left&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PlayerLeft&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:KeyCommand&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Up&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PlayerUp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;inf:KeyCommand&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Down&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PlayerDown&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/inf:KeyEvents.Down&amp;gt;&lt;/span&gt;
	...
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/grid&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The down property is nothing more than an attached property:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; DependencyProperty DownProperty = DependencyProperty.RegisterAttached(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Down&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(List&amp;lt;keyCommand&amp;gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(KeyEvents), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PropertyMetadata(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, OnSetDownCallback));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A KeyCommand is a simple pair of a Key and a Command name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyCommand&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Key Key { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; CommandName { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The GetDown method (for the attached Down property) will instantiate a KeyBehavior class which hooks up to the element&amp;rsquo;s KeyDown and KeyUp events and uses a bit of reflection to find the commands&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyBehavior&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; KeyBehavior(FrameworkElement frameworkElement)
	{
		FrameworkElement = frameworkElement;
		DownKeyCommands = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;keyCommand&amp;gt;();
		UpKeyCommands = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;keyCommand&amp;gt;();

		frameworkElement.KeyDown += frameworkElement_KeyDown;
		frameworkElement.KeyUp += frameworkElement_KeyUp;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; FrameworkElement FrameworkElement { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IList&amp;lt;keyCommand&amp;gt; DownKeyCommands { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IList&amp;lt;keyCommand&amp;gt; UpKeyCommands { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; frameworkElement_KeyUp(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, KeyEventArgs e)
	{
		ExecuteCommandsForKey(e.Key, UpKeyCommands);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; frameworkElement_KeyDown(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, KeyEventArgs e)
	{
		ExecuteCommandsForKey(e.Key, DownKeyCommands);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ExecuteCommandsForKey(Key key, IEnumerable&amp;lt;keyCommand&amp;gt; commands)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; commandNamesForKey = commands.Where(p =&amp;gt; p.Key == key).Select(p =&amp;gt; p.CommandName);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; viewModel = FrameworkElement.DataContext;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; command &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; commandNamesForKey) GetCommandAndExecuteIt(viewModel, command);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GetCommandAndExecuteIt(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; model, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; command = GetCommand(model, name);
		command.Execute(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
	}

	ICommand GetCommand(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; model, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (ICommand)model.GetType().GetProperty(name).GetValue(model, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only thing that is missing is a way to unsubscribe from the events (and so you will end up with memory leaks). WeakReferences may come of use but i&amp;rsquo;ll leave that as an exercise for the reader. Many thanks go to the &lt;a href=&#34;http://wpfdisciples.wordpress.com/&#34;&gt;WPF Disciples&lt;/a&gt; because they inspired me to come up with this attached properties magic.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring graphical programming with Blend, Visual State Manager and Behaviors</title>
      <link>/post/2009-10-16-exploring-graphical-programming-with-blend-visual-state-manager-and-behaviors/</link>
      <pubDate>Fri, 16 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-16-exploring-graphical-programming-with-blend-visual-state-manager-and-behaviors/</guid>
      <description>
        
          &lt;p&gt;A while ago i presented the &lt;a href=&#34;http://www.timvw.be/experimenting-with-controlstatemachine-and-fluent-interfaces/&#34;&gt;ControlStateMachine&lt;/a&gt; and in Silverlight this concept is implemented as the &lt;a href=&#34;http://windowsclient.net/wpf/wpf35/wpf-35sp1-toolkit-visual-state-manager-overview.aspx&#34;&gt;Visual State Manager&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my sokoban implementation i have a cellview which exists out of 6 canvasses but only two of them (one for the cell type and one for the piece type) are visible at any given point in time. I have implemented this with 6 properties CanvasXVisible (with X being Player, Box, Wall, Goal, Floor and Cell) in my ViewModel but a State Machine / Manager may help clarify how the visibility of the canvasses are related. Here are the 2 visual state groups and their states that i would need for the CellView&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/cellview-vsm.png&#34; alt=&#34;screenshot of visual state manager in expression blend&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see there is quite a lof of XAML involved to make the correct canvas visible:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;visualState&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x:Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Space1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;storyboard&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;objectAnimationUsingKeyFrames&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BeginTime=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;00:00:00&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Duration=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;00:00:00.0010000&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#a6e22e&#34;&gt;Storyboard.TargetName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Space&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Storyboard.TargetProperty=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(UIElement.Visibility)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;discreteObjectKeyFrame&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyTime=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;00:00:00&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;discreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;visibility&amp;gt;&lt;/span&gt;Visible&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/visibility&amp;gt;&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/discreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/discreteObjectKeyFrame&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/objectAnimationUsingKeyFrames&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/storyboard&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/visualState&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For a simple modification to the Visibility property this seems like overkill but in many situations you will want to change more than this one property.&lt;/p&gt;
&lt;p&gt;With the aid of the behaviors that come with Blend i can quickly add a couple of radio buttons, toss in some gotostate actions and end up with an interactive application:&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;radioButton&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;63&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Canvas.Left=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Canvas.Top=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;172&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Content=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wall&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GroupName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PieceTypes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;i:Interaction.Triggers&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;i:EventTrigger&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EventName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Checked&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ic:GoToStateAction&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StateName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wall1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/i:EventTrigger&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/i:Interaction.Triggers&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/radioButton&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to try it yourself by changing the radio buttons&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exploringVSM&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data:application/x-silverlight-2,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/x-silverlight-2&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;300&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;240&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.timvw.be/ClientBin/ExploringVSM.xap&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onError&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onSilverlightError&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;background&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;minRuntimeVersion&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3.0.40624.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;autoUpgrade&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://go.microsoft.com/fwlink/?LinkID=149156&amp;amp;#038;v=3.0.40624.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-decoration:none&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://go.microsoft.com/fwlink/?LinkId=108181&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alt=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get Microsoft Silverlight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;border-style:none&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_sl_historyFrame&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;visibility:hidden;height:0px;width:0px;border:0px&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Conclusion: All in all it is relatively easy to create interactive applications using Blend without writing a single line of code.
Too bad that the behaviors are in an Expression assembly and don&amp;rsquo;t come with standard Silverlight.
Another attention point is the maintainability of this new style of programming.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>About databinding and composite views</title>
      <link>/post/2009-10-13-about-databinding-and-composite-views/</link>
      <pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-13-about-databinding-and-composite-views/</guid>
      <description>
        
          &lt;p&gt;A couple of days ago i had a databound ItemsControl (collection of Model.Cell) which instantiated sub views (with their own viewmodel).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;grid&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;grid.Resources&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dataTemplate&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x:Key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CellTemplate&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;views:CellView&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dataTemplate&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/grid.Resources&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;itemsControl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemTemplate=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{StaticResource CellTemplate}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemsSource=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{Binding Cells}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/grid&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because each CellViewModel needs to know which cell they manage i used the following dirty hack&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CellView()
{
	Loaded += CellView_Loaded;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; CellView_Loaded(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, RoutedEventArgs e)
{
	DataContext = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CellViewModel(DataContext);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Later on that day i realised there was a much cleaner solution: Let the BoardViewModel expose a collection of ViewModels.CellViewModel instead of Model.Cell. What a relief that i don&amp;rsquo;t have to use the Loaded event hack.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring M-V-VM</title>
      <link>/post/2009-10-13-exploring-m-v-vm/</link>
      <pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-13-exploring-m-v-vm/</guid>
      <description>
        
          &lt;p&gt;A couple of years ago a collegue recommended &lt;a href=&#34;http://www.amazon.com/Data-Binding-Windows-Forms-2-0/dp/032126892X&#34;&gt;Data Binding with Windows Forms 2.0: Programming Smart Client Data Applications with .NET&lt;/a&gt; and i noticed that my code started to gravitate towards an &lt;a href=&#34;http://en.wikipedia.org/wiki/Model_View_ViewModel&#34;&gt;Model-View-ViewModel&lt;/a&gt; architecture. Due to shortcomings and painful experiences i gave up on databinding and began to use &lt;a href=&#34;http://martinfowler.com/eaaDev/PassiveScreen.html&#34;&gt;Passieve View&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;Passive View doesn&amp;rsquo;t work (well) with smart views so i decided to give M-V-VM another because i really wanted to leverage WPF&amp;rsquo;s rich support for databinding.&lt;/p&gt;
&lt;p&gt;The key difference between M-V-VM and Passive View is, imho, the fact that the ViewModel is unaware of the View unlike Passive View where the Presenter knows about the (simple) View.&lt;/p&gt;
&lt;p&gt;When we test a Presenter i notice that we end up writing interaction based tests (assertions on a mocked view) and when we test a ViewModel we end up writing state-based tests instead.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>ViewModel to translate domain messages to view events</title>
      <link>/post/2009-10-13-viewmodel-to-translate-domain-messages-to-view-events/</link>
      <pubDate>Tue, 13 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-13-viewmodel-to-translate-domain-messages-to-view-events/</guid>
      <description>
        
          &lt;p&gt;Here is an example of a ViewModel that translates domain messages to view events:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GameViewModel&lt;/span&gt; : INotifyPropertyChanged, IListener&amp;lt;boardChanged&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged = &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { };

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; GameViewModel()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; messageBus = ServiceLocator.MessageBus;
		messageBus.Subscribe&amp;lt;boardChanged&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; IListener&amp;lt;boardChanged&amp;gt;.Handle(BoardChanged message)
	{
		PropertyChanged(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Board&amp;#34;&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Sokoban: Creating graphics with Expression Design</title>
      <link>/post/2009-10-12-sokoban-creating-graphics-with-expression-design/</link>
      <pubDate>Mon, 12 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-12-sokoban-creating-graphics-with-expression-design/</guid>
      <description>
        
          &lt;p&gt;Earlier this morning i decided to improve the graphics the little. I launched Expression Design, created a new image, and drew each possible cell and piece in a seperate layer. With this technique i can easily preview how a &amp;ldquo;Box&amp;rdquo; on &amp;ldquo;Goal&amp;rdquo; looks like.&lt;/p&gt;
&lt;p&gt;For each layer i simply copied the XAML from Expression Design into my Cell.xaml file. Apparently all the layers are interpreted as a Canvas and the layer name determines their x:Name which makes it pretty easy to make the correct canvasses visible. With a simple ScaleTransform i can ensure that the canvasses are sized correctly.&lt;/p&gt;
&lt;p&gt;Here is the updated version of Sokoban:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting Sokoban with Silverlight</title>
      <link>/post/2009-10-10-presenting-sokoban-with-silverlight/</link>
      <pubDate>Sat, 10 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-10-presenting-sokoban-with-silverlight/</guid>
      <description>
        
          &lt;p&gt;Despite the blablah postings, i have been able to code a little, so here is the boomboom: Sokoban.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;

        
      </description>
    </item>
    
    <item>
      <title>Silverlight wishlist</title>
      <link>/post/2009-10-10-silverlight-wishlist/</link>
      <pubDate>Sat, 10 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-10-silverlight-wishlist/</guid>
      <description>
        
          &lt;p&gt;Here are the features that i would love to see in Silverlight:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allow users to copy text from the UI (Or was the UX argument an excuse for playing with new toys?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MSTEST (I know that [Here are the features that i would love to see in Silverlight:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow users to copy text from the UI (Or was the UX argument an excuse for playing with new toys?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MSTEST (I know that](&lt;a href=&#34;http://code.msdn.microsoft.com/silverlightut/&#34;&gt;http://code.msdn.microsoft.com/silverlightut/&lt;/a&gt;) exists.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Triggers (including data triggers)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Typed data templates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uniform XAML (WPF: &amp;lt;Style TargetType={x:Type local:Foo}/&amp;gt; vs Silverlight: &lt;!-- raw HTML omitted --&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uniform validation API (eg: Data Annotations has three flavors)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XAML with less namespaces (doesn&amp;rsquo;t really matter if you&amp;rsquo;re a designer only type)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for Desktop (&amp;lsquo;regular&amp;rsquo;) .NET assemblies. As long as Desktop .NET assemblies are not supported, tools that automate the process of generating a &amp;lsquo;shadow&amp;rsquo; .Silverlight project (eg: Prism has for each project a silverlight project that, ignoring the different assembly references, exists out of file references to the orginal project).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UniformGrid&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: This list is not exhaustive and may change in the future.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Configuring Apache to serve Office 2007 documents with the correct MIME type</title>
      <link>/post/2009-10-09-configuring-apache-to-serve-office-2007-documents-with-the-correct-mime-type/</link>
      <pubDate>Fri, 09 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-09-configuring-apache-to-serve-office-2007-documents-with-the-correct-mime-type/</guid>
      <description>
        
          &lt;p&gt;Untill now i haven&amp;rsquo;t published any Office 2007 documents but i noticed that my webhost hasn&amp;rsquo;t configured apache to serve such documents with the correct MIME types. This resulted in my web browser downloading .docx files as zip archives. Here&amp;rsquo;s how a couple of additions to .htaccess tackle the problem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-apache&#34; data-lang=&#34;apache&#34;&gt;AddType application/vnd.openxmlformats-officedocument.spreadsheetml.sheet xlsx
AddType application/vnd.openxmlformats-officedocument.spreadsheetml.template xltx
AddType application/vnd.openxmlformats-officedocument.presentationml.template potx
AddType application/vnd.openxmlformats-officedocument.presentationml.slideshow ppsx
AddType application/vnd.openxmlformats-officedocument.presentationml.presentation sldx
AddType application/vnd.openxmlformats-officedocument.presentationml.slide sldx
AddType application/vnd.openxmlformats-officedocument.wordprocessingml.document docx
AddType application/vnd.openxmlformats-officedocument.wordprocessingml.template dotx
AddType application/vnd.ms-excel.addin.macroEnabled.12 xlam
AddType application/vnd.ms-excel.sheet.binary.macroEnabled.12 xslb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Fluent Builders: More than creating context specifications</title>
      <link>/post/2009-10-08-fluent-builders-more-than-creating-context-specifications/</link>
      <pubDate>Thu, 08 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-08-fluent-builders-more-than-creating-context-specifications/</guid>
      <description>
        
          &lt;p&gt;Last couple of months i have been using the concept of (Fluent) Builder classes in order to create context specifications and i &lt;a href=&#34;http://www.timvw.be/about-the-design-of-a-fluent-interface/&#34;&gt;blogged about the steps i take to design their API&lt;/a&gt;. Lately i have realised that this concept has more uses than context specifcation only. Here is an example:&lt;/p&gt;
&lt;p&gt;In sokoban a game board can be stored in plain text using the following &amp;lsquo;protocol&amp;rsquo;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Level element&lt;/th&gt;
&lt;th&gt;Character&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Wall&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Player&lt;/td&gt;
&lt;td&gt;@&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Player on Goal&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Box&lt;/td&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Box on Goal&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Goal&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Floor&lt;/td&gt;
&lt;td&gt;(space)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Notice how a Fluent Builder allows us to implement this protocol with some elegant code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;actions.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;, aBoard =&amp;gt; aBoard.AddFloor().WithWall());
actions.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;, aBoard =&amp;gt; aBoard.AddFloor().WithPlayer());
actions.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;, aBoard =&amp;gt; aBoard.AddGoal().WithPlayer());
actions.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;, aBoard =&amp;gt; aBoard.AddFloor().WithBox());
actions.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;, aBoard =&amp;gt; aBoard.AddGoal().WithBox());
actions.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, aBoard =&amp;gt; aBoard.AddGoal());
actions.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, aBoard =&amp;gt; aBoard.AddFloor());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Fluent Builders: The case against implicit conversion</title>
      <link>/post/2009-10-08-fluent-builders-the-case-against-implicit-conversion/</link>
      <pubDate>Thu, 08 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-08-fluent-builders-the-case-against-implicit-conversion/</guid>
      <description>
        
          &lt;p&gt;Most people add an implicit conversion to their builder API which gives them the advantage that they don&amp;rsquo;t have to call Build explicitely. I have decided that i do not want to have this implicit conversion for a couple of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C# does not allow to define implicit conversions to or from an interface&lt;/li&gt;
&lt;li&gt;Implicit conversions are not very discoverable&lt;/li&gt;
&lt;li&gt;Implicit conversions can break the API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example to clarify that last reason: Consider an OrderBuilder which requires the user to provide a product and then a quantity:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; ITakeProduct { ITakeQuantity WithProduct(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; productId); }
&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; ITakeQuantity { IBuildProduct WithQuantity(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; quantity); }
&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IBuildProduct { Product Build(); }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the existence of an implicit conversion operator a developer can create an invalid order as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;Order order = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OrderBuilder();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Conclusion: I am not convinced that Fluent Builders should support implicit conversion.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Fluent Builders: The case against implicit conversion (2)</title>
      <link>/post/2009-10-08-fluent-builders-the-case-against-implicit-conversion-2/</link>
      <pubDate>Thu, 08 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-08-fluent-builders-the-case-against-implicit-conversion-2/</guid>
      <description>
        
          &lt;p&gt;Here is another example that demonstrates how implicit conversion in a Fluent Builder can lead to surprises (&lt;a href=&#34;http://elegantcode.com/2009/03/21/be-careful-with-the-var-keyword-and-expression-builders/&#34;&gt;Jan Van Ryswyck noticed this too&lt;/a&gt;). Originally the code in my &lt;a href=&#34;http://www.timvw.be/fluent-builders-the-case-against-implicit-conversion/&#34;&gt;previous example&lt;/a&gt; was the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; order = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OrderBuilder();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wich would make the c# compiler conclude that order is an OrderBuilder instead of an Order.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>MSTEST tip: Add &#34;Full Class Name&#34; column to results view</title>
      <link>/post/2009-10-08-mstest-tip-add-full-class-name-column-to-results-view/</link>
      <pubDate>Thu, 08 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-08-mstest-tip-add-full-class-name-column-to-results-view/</guid>
      <description>
        
          &lt;p&gt;I firmly believe that adding the &amp;lsquo;Full Class Name&amp;rsquo; column to MSTEST&amp;rsquo;s result view makes it a lot easier to clarify the requirements:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/mstest-result-enhanced.png&#34; alt=&#34;screenshot of mstest result view with full class name column added&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>About Expression Blend</title>
      <link>/post/2009-10-05-about-expression-blend/</link>
      <pubDate>Mon, 05 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-05-about-expression-blend/</guid>
      <description>
        
          &lt;p&gt;At first i developed most WPF interfaces by writing XAML in the code view of Visual Studio. Those days are gone 😉 These days i find it a lot easier to use Expression Blend (eg: paths, animations and timelines) but i reallly don&amp;rsquo;t like it that Blend adds design-time information to the XAML that is intended to be used in production code. A tool should not add clutter to your code!&lt;/p&gt;
&lt;p&gt;I also dislike the fact that Blend adds values for Width and Height to each element by default. This requires me to hit that &amp;lsquo;auto&amp;rsquo; square in the properties window for each element. What a waste of time 🙁&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Professional WPF Programming: NET Development with the Windows Presentation Foundation</title>
      <link>/post/2009-10-05-professional-wpf-programming-net-development-with-the-windows-presentation-foundation/</link>
      <pubDate>Mon, 05 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-05-professional-wpf-programming-net-development-with-the-windows-presentation-foundation/</guid>
      <description>
        
          &lt;p&gt;I am very disappointed with &lt;a href=&#34;http://www.amazon.co.uk/Professional-WPF-Programming-Development-Presentation/dp/0470041803&#34;&gt;Professional WPF Programming: NET Development with the Windows Presentation Foundation&lt;/a&gt;. Apart from the two chapters that cover Expression Blend i found nothing worth reading in this book. This is probably the last Wrox book that i buy.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Programming WPF, Second Edition</title>
      <link>/post/2009-10-05-programming-wpf-second-edition/</link>
      <pubDate>Mon, 05 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-10-05-programming-wpf-second-edition/</guid>
      <description>
        
          &lt;p&gt;I felt it was time to get up to speed with WPF so i decided to buy &lt;a href=&#34;http://oreilly.com/catalog/9780596510374&#34;&gt;Programming WPF, Second edition&lt;/a&gt;. This book answered a lot of my newbie questions (where is the application entry point etc) right from the start. I liked it so much that i decided to read a second time 😉 Most definitely recommended.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Brad Abrams and extension methods to the rescue..</title>
      <link>/post/2009-09-29-brad-abrams-and-extension-methods-to-the-rescue/</link>
      <pubDate>Tue, 29 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-09-29-brad-abrams-and-extension-methods-to-the-rescue/</guid>
      <description>
        
          &lt;p&gt;Currently i am implementing &lt;a href=&#34;http://en.wikipedia.org/wiki/Sokoban&#34;&gt;Sokoban&lt;/a&gt; and i was pondering which methods i should add to my Cell class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bool HoldsWall&lt;/li&gt;
&lt;li&gt;bool HoldsBox&lt;/li&gt;
&lt;li&gt;bool HoldsPlayer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bool HoldsPieceOfType(Type type)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which option should i choose? With the aid of extension methods (in the same namespace) i can have them both:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; Sokoban.Domain
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExtensionMethods&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; HoldsBox(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; Cell cell)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cell.HoldsPieceOfType(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(Box));
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; HoldsPlayer(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; Cell cell)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cell.HoldsPieceOfType(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(Player));
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; HoldsWall(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; Cell cell)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cell.HoldsPieceOfType(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(Wall));
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case you don&amp;rsquo;t like this solution, blame &lt;a href=&#34;http://blogs.msdn.com/brada/&#34;&gt;Brad Abrams&lt;/a&gt; who inspired me to implement it this way with his session at &lt;a href=&#34;http://www.visug.be&#34;&gt;Visug&lt;/a&gt; yesterday.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remark:&lt;/strong&gt; Because the possible pieces in Sokoban are very well known (the game/requirements are not going to change) thus one should choose the first option (No extension methods required.)&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Improve readability with LINQ</title>
      <link>/post/2009-09-29-improve-readability-with-linq/</link>
      <pubDate>Tue, 29 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-09-29-improve-readability-with-linq/</guid>
      <description>
        
          &lt;p&gt;At first i was not very fond of LINQ but it seems that i am finally convinced that LINQ may improve readability:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsCompleted()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; boxesNotOnGoal = &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; cell &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; Cells
	&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; cell.HoldsBox() &amp;amp;&amp;amp; !cell.IsGoal()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; cell.Piece;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; boxesNotOnGoal.Any();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Tim.TransitionTo(&#34;MCPD: Enterprise Application Developer 3.5&#34;)</title>
      <link>/post/2009-09-18-tim-transitiontomcpd-enterprise-application-developer-3-5/</link>
      <pubDate>Fri, 18 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-09-18-tim-transitiontomcpd-enterprise-application-developer-3-5/</guid>
      <description>
        
          &lt;p&gt;I figured that it might help convince people that i stay up to date with current technology so i decided to take (and pass) the following exams: &lt;a href=&#34;http://www.microsoft.com/learning/en/us/exam.aspx?ID=70-568&amp;amp;locale=en-us&#34;&gt;70-568&lt;/a&gt; and &lt;a href=&#34;http://www.microsoft.com/learning/en/us/exam.aspx?ID=70-569&amp;amp;locale=en-us&#34;&gt;70-569&lt;/a&gt;. This means that i have now earned the following credentials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MCPD: Enterprise Application Development 3.5&lt;/li&gt;
&lt;li&gt;MCTS: .NET Framework 3.5, Windows Forms Applications&lt;/li&gt;
&lt;li&gt;MCTS: .NET Framework 3.5, ASP.NET Applications&lt;/li&gt;
&lt;li&gt;MCTS: .NET Framework 3.5, Windows Communication Foundation Applications&lt;/li&gt;
&lt;li&gt;MCTS: .NET Framework 3.5, ADO.NET Applications&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>About under construction pages</title>
      <link>/post/2009-09-11-about-under-construction-pages/</link>
      <pubDate>Fri, 11 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-09-11-about-under-construction-pages/</guid>
      <description>
        
          &lt;p&gt;Why do people visit a website? To find information. Thus, when you publish a page to announce that the information is not there (yet) you are wasting your visitors time. Instead of creating the actual content you wasted time while your were creating an under construction page. A loss-loss situation instead of a win-win one.&lt;/p&gt;
&lt;p&gt;Admitted, in some cases it can be helpful to give your visitors an idea of what they can expect (eg: links to articles that are not written yet appear in red in the &lt;a href=&#34;http://www.jeremydmiller.com/ppatterns/Default.aspx?Page=MainPage&amp;amp;AspxAutoDetectCookieSupport=1&#34;&gt;Presentation Patterns wiki&lt;/a&gt;), but &lt;strong&gt;in general: Under construction pages stink&lt;/strong&gt;. And here is someone who shares that feeling: &lt;a href=&#34;http://www.cs.utah.edu/~gk/atwork/&#34;&gt;This icon says more about me than it does about my web page&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Instruct T4 to use C# v3.5</title>
      <link>/post/2009-09-11-instruct-t4-to-use-c-v3-5/</link>
      <pubDate>Fri, 11 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-09-11-instruct-t4-to-use-c-v3-5/</guid>
      <description>
        
          &lt;p&gt;Consider this simple T4 template:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;# for (var i = 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt; 10&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;++i)&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;WriteLine(&amp;#34;hello&amp;#34;);&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Trying to build the project results in a compilation error because &amp;lsquo;var&amp;rsquo; is an unknown type. A bit of research learned me that i should instruct the processor to use a specific c# version like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;#@ template language=&amp;#34;C#v3.5&amp;#34; inherits=&amp;#34;Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation&amp;#34; #&amp;gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;# for (var i = 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt; 10&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;++i)&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;WriteLine(&amp;#34;hello&amp;#34;);&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Problem solved 🙂&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Advertising on this blog</title>
      <link>/post/2009-08-29-advertising-on-this-blog/</link>
      <pubDate>Sat, 29 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-08-29-advertising-on-this-blog/</guid>
      <description>
        
          &lt;p&gt;If you are an &lt;a href=&#34;http://adblockplus.org/en/&#34;&gt;Adblock Plus&lt;/a&gt; user like me it is very likely that you have not noticed that i added Google Ads to this blog a month or two ago. Given that the total earnings are less than 5$ i have decided to remove them.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Extension methods to improve readability</title>
      <link>/post/2009-08-28-extension-methods-to-improve-readability/</link>
      <pubDate>Fri, 28 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-08-28-extension-methods-to-improve-readability/</guid>
      <description>
        
          &lt;p&gt;A common reason to take advantage of extension methods is to enhance readability (think fluent interfaces). My team uses the &lt;a href=&#34;http://en.wikipedia.org/wiki/Specification_pattern&#34;&gt;specification pattern&lt;/a&gt; regularly and in case a requirement says something like &amp;ldquo;if the player has reached level 10 a message should be displayed&amp;rdquo; they would implement it as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HasReachedLevel(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;).IsSatisfiedBy(player))
{
	view.DisplayMessage(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Congratulations! You have reached level 10.&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty good but did you notice that they changed the order of player and level in their (code) story? With the aid of an extension method we can express this requirement as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (player.Satisfies(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HasReachedLevel(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)))
{
	view.DisplayMessage(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Congratulations! You have reached level 10.&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the extension method that allows you to express the requirement in this way&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Satisfies&amp;lt;t&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; T candidate, ISpecification&amp;lt;t&amp;gt; specification)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; specification.IsSatisfiedBy(candidate);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>About the design of a fluent interface</title>
      <link>/post/2009-08-17-about-the-design-of-a-fluent-interface/</link>
      <pubDate>Mon, 17 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-08-17-about-the-design-of-a-fluent-interface/</guid>
      <description>
        
          &lt;p&gt;Now that i have &lt;a href=&#34;&#34;&gt;presented a simple ControlStateMachine&lt;/a&gt; i can raise the bar a little. A statemachine that handles commands. Here is how a developer should be able to initialize this machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;sut.WhenIn(States.Loading)
.On(Commands.Next)
.Do(() =&amp;gt; Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;got next command while loading...&amp;#34;&lt;/span&gt;))
.Do(() =&amp;gt; Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doing it again...&amp;#34;&lt;/span&gt;))
.On(Commands.Previous)
.Do(() =&amp;gt; Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;got previous command while loading...&amp;#34;&lt;/span&gt;));

sut.WhenIn(States.Ready)
.On(Commands.Previous)
.Do(() =&amp;gt; Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;got previous command while ready...&amp;#34;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So how should we define our methods to accomplish this initialization style? Let&amp;rsquo;s begin with identifying the methods we need.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WhenIn(TSTate state)&lt;/li&gt;
&lt;li&gt;On(TCommand command)&lt;/li&gt;
&lt;li&gt;Do(Action action)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next thing to do is analyze in which sequence these methods can be called:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;th style=&amp;quot;width: 100px&amp;quot;&amp;gt;
  WhenIn
&amp;lt;/th&amp;gt;

&amp;lt;th style=&amp;quot;width: 100px&amp;quot;&amp;gt;
  On
&amp;lt;/th&amp;gt;

&amp;lt;th style=&amp;quot;width: 100px&amp;quot;&amp;gt;
  Do
&amp;lt;/th&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  X
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  X
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  X
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  X
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Ok, now that we have clarified the requirements a little we can start working on a solution. Let&amp;rsquo;s start with defining an interface for each of the methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IChooseState&amp;lt;tstate, TCommand&amp;gt; { Q1 WhenIn(TState state); }
&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IChooseCommand&amp;lt;tstate, TCommand&amp;gt; { Q2 On(TCommand command); }
&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IChooseAction&amp;lt;tstate, TCommand&amp;gt; { Q3 Do(Action action); }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From WhenIn we need to be able to call On. Thus Q1 = IChooseCommand&amp;lt;TState, TCommand&amp;gt;. Q2 is also easily solved because from On we only have to be able to call Do, thus Q2 = IChooseAction&amp;lt;TState, TCommand&amp;gt;.&lt;/p&gt;
&lt;p&gt;From Do we should be able to call both On and Do. We can do that by defining another interface which has both methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IChooseCommandAndAction&amp;lt;tstate, TCommand&amp;gt; : IChooseCommand&amp;lt;tstate, TCommand&amp;gt;, IChooseAction&amp;lt;tstate, TCommand&amp;gt; { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have found answers for Q1, Q2 and Q3 we can define the API for initializing our StateMachine as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;IChooseCommand&amp;lt;tstate, TCommand&amp;gt; WhenIn(TState state);
IChooseAction&amp;lt;tstate, TCommand&amp;gt; On(TCommand command);
IChooseCommandAndAction&amp;lt;tstate, TCommand&amp;gt; Do(Action action);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now tell me about your strategy for implementing a fluent interface!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>About the implementation of a fluent interface</title>
      <link>/post/2009-08-17-about-the-implementation-of-a-fluent-interface/</link>
      <pubDate>Mon, 17 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-08-17-about-the-implementation-of-a-fluent-interface/</guid>
      <description>
        
          &lt;p&gt;Now that i have &lt;a href=&#34;http://www.timvw.be/about-the-design-of-a-fluent-interface/&#34;&gt;defined my API for initialization&lt;/a&gt; it is time to implement it. Inspired by the Moq.Language and Moq.Language.Flow namespaces in &lt;a href=&#34;http://code.google.com/p/moq/&#34;&gt;Moq&lt;/a&gt; i have decided to define my interfaces in a separate namespace: Infrastructure.StateMachineLanguage.&lt;/p&gt;
&lt;p&gt;Ever since i have read &lt;a href=&#34;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34;&gt;Clean code&lt;/a&gt; i feel the need to write classes that do one thing (and one thing only) so i came up with the following classes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;something to store commands per state, CommandsForState&lt;/li&gt;
&lt;li&gt;something to store actions per command, ActionsForCommand&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the implementation of the IChooseCommandAndAction interface i have decided to create a class that falls back on my classes that handle IChooseCommand and IChooseAction already&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandAndActionForState&lt;/span&gt;&amp;lt;tstate, TCommand&amp;gt; : IChooseCommandAndAction&amp;lt;tstate, TCommand&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; CommandsForState&amp;lt;tstate, TCommand&amp;gt; commandsForState;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; ActionsForCommand&amp;lt;tstate, TCommand&amp;gt; actionsForCommand;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CommandAndActionForState(CommandsForState&amp;lt;tstate, TCommand&amp;gt; commands, ActionsForCommand&amp;lt;tstate, TCommand&amp;gt; actions)
	{
		commandsForState = commands;
		actionsForCommand = actions;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IChooseAction&amp;lt;tstate, TCommand&amp;gt; On(TCommand command)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; commandsForState.On(command);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IChooseCommandAndAction&amp;lt;tstate, TCommand&amp;gt; Do(Action action)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; actionsForCommand.Do(action);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/statemachine.solution.png&#34; alt=&#34;screenshot of files in statemachine solution.&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, complex problems can have simple solutions. Feel free to download the complete solution: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/StateMachine.zip&#34;&gt;StateMachine.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting ControlStateMachine</title>
      <link>/post/2009-08-17-presenting-controlstatemachine/</link>
      <pubDate>Mon, 17 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-08-17-presenting-controlstatemachine/</guid>
      <description>
        
          &lt;p&gt;Here is a situation we are all familiar with: A form that only displays a certain set of controls depending on the mode or state of the application. Let me start with an example: At design time there are three buttons&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/controlstatemachine.design.png&#34; alt=&#34;screenshot of flowlayoutpanel with three buttons: edit, save and cancel.&#34;&gt;&lt;/p&gt;
&lt;p&gt;The user can look at the data and decide to edit it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/controlstatemachine.display.png&#34; alt=&#34;screenshot of flowlayoutpanel with only one visible button: edit.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Or the user is editing the data and can decide to commit or discard her changes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/controlstatemachine.edit.png&#34; alt=&#34;screenshot of flowlayoutpanel with two visible buttons: save and cancel.&#34;&gt;&lt;/p&gt;
&lt;p&gt;A couple of years i ago i used to spread such display logic all over my code and it was hard to figure out which control was visible at a given point. Later on i refactored that code and encapsulated it in functions like: MakeControlsForDisplayVisible and MakeControlsForEditVisible which felt like a huge improvement. These days i have the feeling that a very simple state machine can improve the readability even better.&lt;/p&gt;
&lt;p&gt;Ok, so how simple is simple? Currently the requirements list is pretty limited:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/controlstatemachine.specs.png&#34; alt=&#34;screenshot of unittests for controlstatemachine&#34;&gt;&lt;/p&gt;
&lt;p&gt;Anyway, here is how i would write the code today (Yeah, for a stupid example this looks like overkill):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; InitializeButtonLayoutPanelMachine()
{
controlStateMachine = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ControlStateMachine&amp;lt;displayAndEditStates&amp;gt;(buttonLayoutPanel);

controlStateMachine.WhenStateChangesTo(DisplayAndEditStates.Display)
.TheOnlyVisibleControlsAre(buttonEdit);

controlStateMachine.WhenStateChangesTo(DisplayAndEditStates.Edit)
.TheOnlyVisibleControlsAre(buttonSave, buttonCancel);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As always, here is the source: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ControlStateMachine.cs.txt&#34;&gt;ControlStateMachine&lt;/a&gt; and &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/WhenChangingState.cs.txt&#34;&gt;WhenChangingState&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting ControlChanges</title>
      <link>/post/2009-08-15-presenting-controlchanges/</link>
      <pubDate>Sat, 15 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-08-15-presenting-controlchanges/</guid>
      <description>
        
          &lt;p&gt;Because i noticed that i kept writing the same operations on control over and over again i decided to capture them in a couple of functions. I presume most of you have done this already. Here is the list of operations:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/controlchanges.cd.png&#34; alt=&#34;screenshot of a class diagram with the following operations: MakeVisible, MakeInvisible and TheOnlyVisibleControlsAre.&#34;&gt;&lt;/p&gt;
&lt;p&gt;In case it is not clear what these methods should do i have defined the following specifications for them:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/controlchanges.specs.png&#34; alt=&#34;screenshot of requirements list for controlchanges.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Get the code here: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ControlChanges.cs.txt&#34;&gt;ControlChanges&lt;/a&gt; and &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/WhenExecutingControlChanges.cs.txt&#34;&gt;WhenExecutingControlChanges&lt;/a&gt;. Stay tuned for more!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>About reading books</title>
      <link>/post/2009-08-13-about-reading-books/</link>
      <pubDate>Thu, 13 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-08-13-about-reading-books/</guid>
      <description>
        
          &lt;p&gt;A while ago &lt;a href=&#34;http://gabriel.lozano-moran.name/blog/PermaLink,guid,1fbcd60c-0b3e-40c2-a0e1-3f61e4f81fab.aspx&#34;&gt;Gabriel&lt;/a&gt; wrote the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS3: you can read all the books that you want, in the end to truly master .NET you need experience and more experience! Normally it would take you about 10 years of relevant experience to get to that level of expertise&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I agree that expertise only comes from experience but i do believe that good books can guide you to &lt;a href=&#34;http://blogs.msdn.com/brada/archive/2003/10/02/50420.aspx&#34;&gt;the pit of success&lt;/a&gt; and help you recognize solutions that are doomed to fail.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Clean Code: A Handbook of Agile Software Craftsmanship</title>
      <link>/post/2009-08-13-clean-code-a-handbook-of-agile-software-craftsmanship/</link>
      <pubDate>Thu, 13 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-08-13-clean-code-a-handbook-of-agile-software-craftsmanship/</guid>
      <description>
        
          &lt;p&gt;For my summer holidays i needed a book that was easy readable (size, weight, content) and &lt;a href=&#34;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt; was a perfect match for my reading sessions at the pool. Even better, i found inspiration to write cleaner (and thus better) code. This book is most certainly recommend!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Experimenting with ControlStateMachine and Fluent interfaces</title>
      <link>/post/2009-08-13-experimenting-with-controlstatemachine-and-fluent-interfaces/</link>
      <pubDate>Thu, 13 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-08-13-experimenting-with-controlstatemachine-and-fluent-interfaces/</guid>
      <description>
        
          &lt;p&gt;A long time ago i read &lt;a href=&#34;http://codebetter.com/blogs/jeremy.miller/archive/2007/07/25/the-build-your-own-cab-series-table-of-contents.aspx&#34;&gt;Build your own CAB series&lt;/a&gt; and recently i noticed that there is a wiki: &lt;a href=&#34;http://www.jeremydmiller.com/ppatterns/Default.aspx?Page=MainPage&amp;amp;AspxAutoDetectCookieSupport=1&#34;&gt;Presentation Patterns Wiki!&lt;/a&gt; and it inspired me to experiment with state machines. Here are a couple of examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;controlStateMachine = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ControlStateMachine&amp;lt;states&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);

controlStateMachine.AfterEachStateChange()
.Do(MakeRelevantButtonsVisible);

controlStateMachine.WhenStateChangesTo(States.RetrievingSubscriptionPeriod)
.TheOnlyVisibleControlsAre(flowLayoutPanel1, datePicker1);

controlStateMachine.WhenStateChangesTo(States.RetrievingCustomerInformation)
.MakeVisible(customerInput1)
.Do(() =&amp;gt; customerInput1.Dock = DockStyle.Fill);

controlStateMachine.WhenStateChangesTo(States.Ready)
.MakeInvisible(customerInput1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is another example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;wizardStateMachine = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WizardStateMachine&amp;lt;states&amp;gt;(controlStateMachine);

wizardStateMachine.InState(States.RetrievingSubscriptionPeriod)
.OnCommand(WizardCommands.Next)
.TransitionTo(States.RetrievingCustomerInformation);

wizardStateMachine.InState(States.RetrievingCustomerInformation)
.OnCommand(WizardCommands.Back)
.TransitionTo(States.RetrievingSubscriptionPeriod)
.OnCommand(WizardCommands.Finish)
.TransitionTo(States.Ready);

wizardStateMachine.InState(States.Ready)
.OnCommand(WizardCommands.New)
.Do(() =&amp;gt; MessageBox.Show(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Currently not supported&amp;#34;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Stay tuned for future posts where i describe the problem space that have lead to this API.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Iconoclast: A Neuroscientist Reveals How to Think Differently</title>
      <link>/post/2009-07-13-iconoclast-a-neuroscientist-reveals-how-to-think-differently/</link>
      <pubDate>Mon, 13 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-07-13-iconoclast-a-neuroscientist-reveals-how-to-think-differently/</guid>
      <description>
        
          &lt;p&gt;Because i really enjoyed &lt;a href=&#34;http://www.timvw.be/managing-humans-biting-and-humorous-tales-of-a-software-engineering-manager/&#34;&gt;managing humans&lt;/a&gt; i bought another book mentionned by Joel Spolsky: &lt;a href=&#34;http://www.amazon.com/Iconoclast-Neuroscientist-Reveals-Think-Differently/dp/1422115011/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1247393811&amp;amp;sr=8-1&#34;&gt;Iconoclast: A Neuroscientist Reveals How to Think Differently&lt;/a&gt;. This book would be an excellent read at the pool on a holiday location, but at home it was nothing more than an entertaining read. Not really recommended.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions</title>
      <link>/post/2009-07-11-enterprise-integration-patterns-designing-building-and-deploying-messaging-solutions/</link>
      <pubDate>Sat, 11 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-07-11-enterprise-integration-patterns-designing-building-and-deploying-messaging-solutions/</guid>
      <description>
        
          &lt;p&gt;A while ago we had a session on &lt;a href=&#34;http://www.altdotnet.be/14/section.aspx/16&#34;&gt;messaging&lt;/a&gt; at &lt;a href=&#34;http://www.altdotnet.be/&#34;&gt;ALT.NET Belgium&lt;/a&gt; and it was then that i decided i should order my copy of &lt;a href=&#34;http://www.amazon.com/Enterprise-Integration-Patterns-Designing-Addison-Wesley/dp/0321200683&#34;&gt;Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions&lt;/a&gt;. I found first half of the book pretty interesting but got bored around chapter 8 and skipped some sections from there. All in all this book this book is pretty good and if you know a thing or two about TCP/IP implementations you might even recognize some patterns in a different problem space.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Small modification to achieve better modularity with Prism</title>
      <link>/post/2009-07-11-modularity-with-prism/</link>
      <pubDate>Sat, 11 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-07-11-modularity-with-prism/</guid>
      <description>
        
          &lt;p&gt;I have been experimenting with WPF and Prism (&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/cc707819.aspx&#34;&gt;Composite Application Guidance for WPF and Silverlight&lt;/a&gt;) and ran into a major issue: modularity. Here is an excerpt from the documentation&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Modules have explicit boundaries, typically by subsystem or feature. Having these boundaries makes it easier for separate teams to develop modules. On large applications, teams may be organized by cross-cutting capabilities in addition to being organized by a specific subsystem or feature. For example, there may be a team assigned to shared components of the application, such as the shell or the common infrastructure module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Modularity quick start solution uses the DirectoryModuleCatalog to discover modules. The module projects have a build event that copy their output to a single Modules folder&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;xcopy &amp;#34;$(TargetDir)*.*&amp;#34; &amp;#34;$(SolutionDir)DirectoryLookupModularity\$(OutDir)Modules\&amp;#34; /Y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This means that if two modules output a file with the same name, one of the two will get lost :(. In order to avoid this we create a directory per module&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;xcopy &amp;#34;$(TargetDir)*.*&amp;#34; &amp;#34;$(SolutionDir)DirectoryLookupModularity\$(OutDir)Modules\$(TargetName)\&amp;#34; /Y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To make this work we have to modify the catalog a little&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; InnerLoad()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.IsNullOrEmpty(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ModulePath))
		&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InvalidOperationException(Resources.ModulePathCannotBeNullOrEmpty);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!Directory.Exists(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ModulePath))
		&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Format(CultureInfo.CurrentCulture, Resources.DirectoryNotFound, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ModulePath));

	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; assemblyFile &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; Directory.GetFiles(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ModulePath, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.dll&amp;#34;&lt;/span&gt;, SearchOption.AllDirectories))
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; privateBinPath = Path.GetFullPath(Path.GetDirectoryName(assemblyFile));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; childDomain = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.BuildChildDomain(AppDomain.CurrentDomain, privateBinPath);

		&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; loaderType = &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(InnerModuleInfoLoader);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (loaderType.Assembly == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; loader = (InnerModuleInfoLoader)childDomain.CreateInstanceFromAndUnwrap(loaderType.Assembly.Location, loaderType.FullName);
			loader.LoadAssembly(assemblyFile);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Items.AddRange(loader.GetModuleInfos());
		}		
		&lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;
		{
			AppDomain.Unload(childDomain);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As long as we don&amp;rsquo;t use (unsigned and different) assembly files with the same name in different modules we will have a working solution.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Beyond the basics: IPropertyAccessor</title>
      <link>/post/2009-06-27-beyond-the-basics-ipropertyaccessor/</link>
      <pubDate>Sat, 27 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-06-27-beyond-the-basics-ipropertyaccessor/</guid>
      <description>
        
          &lt;p&gt;Consider the following classes: an abstract Account and a concrete SavingAccount&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Account&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Id { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; CustomerId { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; AccountType Type { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SavingAccount&lt;/span&gt; : Account, ISavingAccount
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SavingAccount() { }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SavingAccount(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; customerId) { CustomerId = customerId; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; AccountType Type { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; AccountType.SavingAccount; } }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this is the schema on which we want to map these classes&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/accounts_schema.png&#34; alt=&#34;screenshot of accounts schema&#34;&gt;&lt;/p&gt;
&lt;p&gt;We define a &lt;a href=&#34;http://fluentnhibernate.org/&#34;&gt;Fluent&lt;/a&gt; NHibernate mapping as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AccountMap&lt;/span&gt; : ClassMap&amp;lt;account&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AccountMap()
	{
		WithTable(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accounts&amp;#34;&lt;/span&gt;);
		Id(a =&amp;gt; a.Id).ColumnName(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;);
		Map(a =&amp;gt; a.CustomerId).ColumnName(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;customer_id&amp;#34;&lt;/span&gt;);
		Map(a =&amp;gt; a.Type).ColumnName(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;account_type&amp;#34;&lt;/span&gt;);
		SetAttribute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lazy&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;);

		JoinedSubClass&amp;lt;savingAccount&amp;gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;saving\_account\_id&amp;#34;&lt;/span&gt;, MapSavingAccount);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; MapSavingAccount(JoinedSubClassPart&amp;lt;savingAccount&amp;gt; jscp)
	{
		jscp.WithTableName(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SavingAccounts&amp;#34;&lt;/span&gt;);
		jscp.SetAttribute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lazy&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As soon as we try to use this mapping we run into an &amp;ldquo;Could not find a setter for property &amp;lsquo;Type&amp;rsquo; in class &amp;lsquo;Banking.Domain.CheckingAccount&amp;rdquo; exception. A quick look with reflector teaches us there are a couple of strategies, but none of them suits our needs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/accounts_property_accessors.png&#34; alt=&#34;screenshot of available property accessors in NHibernate assembly&#34;&gt;&lt;/p&gt;
&lt;p&gt;Thus we decide to implement a custom PropertyAccessor as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ReadOnlyProperty&lt;/span&gt; : IPropertyAccessor
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; CanAccessTroughReflectionOptimizer
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IGetter GetGetter(Type theClass, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; propertyName)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; basicPropertyAccessor = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BasicPropertyAccessor();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; getter = basicPropertyAccessor.GetGetter(theClass, propertyName);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; getter;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ISetter GetSetter(Type theClass, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; propertyName)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; setter = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NoOpSetter();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; setter;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NoOpSetter&lt;/span&gt; : ISetter
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MethodInfo Method { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;; } }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; PropertyName { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;; } }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Set(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; target, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;) { }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can instruct NHibernate to use our custom PropertyAccessor as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AccountMap()
{
	...
	Map(a =&amp;gt; a.Type).Access.Using&amp;lt;readOnlyProperty&amp;gt;().ColumnName(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;account_type&amp;#34;&lt;/span&gt;);
	...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A couple of searches later it appears that &lt;a href=&#34;http://blog.schuager.com/2008/12/nhibernate-read-only-property-access.html&#34;&gt;this problem had already been solved&lt;/a&gt;, but is not available in the version of NHibernate that comes with Fluent NHibernate. Oh well, we learned something new.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>VS2010: Unable to insert a breakpoint by clicking next to the line number</title>
      <link>/post/2009-06-16-vs2010-unable-to-insert-a-breakpoint-by-clicking-next-to-the-line-number/</link>
      <pubDate>Tue, 16 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-06-16-vs2010-unable-to-insert-a-breakpoint-by-clicking-next-to-the-line-number/</guid>
      <description>
        
          &lt;p&gt;For some reason i was &lt;a href=&#34;https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=464203&#34;&gt;unable to insert a breakpoint by clicking next to the line number&lt;/a&gt; in VS2010. Anyway, here is the trick that made the problem disappear for me: Go to &amp;ldquo;Tools &amp;gt; Import and export settings&amp;hellip; &amp;quot; and choose &amp;ldquo;Reset all settings&amp;rdquo;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Adding items to SendTo folder</title>
      <link>/post/2009-06-07-adding-items-to-sendto-folder/</link>
      <pubDate>Sun, 07 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-06-07-adding-items-to-sendto-folder/</guid>
      <description>
        
          &lt;p&gt;When i tried to access the SendTo folder i got a message box saying: &amp;ldquo;Access is denied&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/SendTo_Denied.png&#34; alt=&#34;screenshot of access denied message box&#34;&gt;&lt;/p&gt;
&lt;p&gt;A bit of searching thought me that the folder can be accessed via the &amp;ldquo;shell:sendto&amp;rdquo; command.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/SendTo_Shell.png&#34; alt=&#34;screenshot of shell:sendto command&#34;&gt;&lt;/p&gt;
&lt;p&gt;And now i can add a shortcut to Notepad2 which i use to inspect a Visual Studio solution or project file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/SendTo_Usage.png&#34; alt=&#34;screenshot that displays usage of custom sendto target&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>First thoughts about Windows 7</title>
      <link>/post/2009-06-06-first-thoughts-about-windows-7/</link>
      <pubDate>Sat, 06 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-06-06-first-thoughts-about-windows-7/</guid>
      <description>
        
          &lt;p&gt;It is almost two years ago that i decided to &lt;a href=&#34;http://www.timvw.be/about-the-wow-i-removed-vista-from-my-harddisk-experience/&#34;&gt;uninstall Vista&lt;/a&gt; after a bad first impression. Nowadays i have learned to live with it, but i guess i will never understand what all the fuss was about.&lt;/p&gt;
&lt;p&gt;I can imagine that the marketing department will generate a lot of noise about Windows 7 but i am not convinced that there are actually people waiting for yet another OS. Anyway, i installed Windows 7 somewhere last week and i must say that i am pretty pleased with it. I guess that you didn&amp;rsquo;t see that one coming, do you? Me, finally liking an operation system that comes from Microsoft 😉&lt;/p&gt;
&lt;p&gt;PS: Forgot to mention that i do not like the fact that i can not have Windows Virtual PC and Virtual Server 2005 at the same time :/&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Using the Do handler for a method with out parameters</title>
      <link>/post/2009-05-25-using-the-do-handler-for-a-method-with-out-parameters/</link>
      <pubDate>Mon, 25 May 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-05-25-using-the-do-handler-for-a-method-with-out-parameters/</guid>
      <description>
        
          &lt;p&gt;As you can read in &lt;a href=&#34;http://ayende.com/Wiki/(S(mc1hst55a1303emfc34dkmyr))/Rhino+Mocks+The+Do()+Handler.ashx&#34;&gt;the documentation&lt;/a&gt; for Rhino Mocks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are times when the returning a static value is not good enough for the scenario that you are testing, so for those cases, you can use the Do() handler to add custom behavior when the method is called. In general, the Do() handler simply replaces the method call. Its return value will be returned from the mocked call (as well as any exception thrown). The handler&amp;rsquo;s signature must match the method signature, since it gets the same parameters as the call.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are quite a lot of delegates defined in Rhino.Mocks.Delegates but none of them has an output parameter so we got stuck when we tried to mock a method with the following signature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; TryGet(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; Entity entity);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Luckily enough it didn&amp;rsquo;t take too long before i realised we could simply define our own delegate:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; TryGetMethod&amp;lt;keyType, ValueType&amp;gt;(KeyType key, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; ValueType &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can easily setup a result for our method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;myEntityRepository
.Stub(repository =&amp;gt; repository.TryGet(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; myEntity);)
.IgnoreArguments()
.Do((TryGetMethod&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, MyEntity&amp;gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; MyEntity entity)
{
entity = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MyEntity();
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; id == &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Measuring elapsed time</title>
      <link>/post/2009-05-16-measuring-elapsed-time/</link>
      <pubDate>Sat, 16 May 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-05-16-measuring-elapsed-time/</guid>
      <description>
        
          &lt;p&gt;As the documentation for &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.diagnostics.stopwatch.aspx&#34;&gt;System.Diagnostics.Stopwatch&lt;/a&gt; says&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a typical Stopwatch scenario, you call the Start method, then eventually call the Stop method, and then you check elapsed time using the Elapsed property.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I find it a shame that they didn&amp;rsquo;t provide a method that covers this particular scenario so i did it myself&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Stopwatch&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; TimeSpan Measure(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; Action action)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; stopwatch = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; System.Diagnostics.Stopwatch();
		stopwatch.Start();
		action.Invoke();
		stopwatch.Stop();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; stopwatch.Elapsed;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Consuming this method is as simple as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; duration = Stopwatch.Measure(() =&amp;gt; FindElement(&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;));
Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;It took {0:0} seconds.&amp;#34;&lt;/span&gt;, duration.TotalSeconds);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Sparkles</title>
      <link>/post/2009-05-05-sparkles/</link>
      <pubDate>Tue, 05 May 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-05-05-sparkles/</guid>
      <description>
        
          &lt;p&gt;In my opinion Pieter Gheysens is one of those persons that has contributed something valuable to the Belgian .Net community: Great Visug sessions and some interesting courses at Compuware so i shamelessly plug his new company &lt;a href=&#34;http://www.sparkles.be&#34;&gt;Sparkles&lt;/a&gt; here. Now go and find out how they can make you a better developer!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Easy deployment through virtualisation</title>
      <link>/post/2009-05-03-easy-deployment-through-virtualisation/</link>
      <pubDate>Sun, 03 May 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-05-03-easy-deployment-through-virtualisation/</guid>
      <description>
        
          &lt;p&gt;A couple of years ago, i think somewhere in 2003, i realised that hardware virtualisation was the way to go. Whenever i talked with people about distributing and deploying applications with a virtual machine image instead of a traditional installer they laughed at me (or atleast gave me a strange look of disbelief). The availability of multiple machines can be represented in a windowing environment through a metaphor of multiple desktops. Anyway, i&amp;rsquo;m still convinced that there will be a point in time where users have access to multiple applications that run in their own virtual machine. Time will tell.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Enterprise Service Bus</title>
      <link>/post/2009-05-03-enterprise-service-bus/</link>
      <pubDate>Sun, 03 May 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-05-03-enterprise-service-bus/</guid>
      <description>
        
          &lt;p&gt;I believe it was at an &lt;a href=&#34;http://www.altdotnet.be&#34;&gt;Alt.Net&lt;/a&gt; meeting that the &lt;a href=&#34;http://www.amazon.com/Enterprise-Service-Bus-David-Chappell/dp/0596006756&#34;&gt;Enterprise Service Bus&lt;/a&gt; book was mentionned and i recently decided to give it a read. This book covers everything there is to know about an ESB. From a developer point of view it can serve as a good introduction to the core components and applied patterns but nothing more.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Beautiful Code: Leading Programmers Explain How They Think</title>
      <link>/post/2009-04-25-beautiful-code-leading-programmers-explain-how-they-think/</link>
      <pubDate>Sat, 25 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-04-25-beautiful-code-leading-programmers-explain-how-they-think/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Beautiful-Code-Leading-Programmers-Practice/dp/0596510047&#34;&gt;Beautiful Code: Leading Programmers Explain How They Think&lt;/a&gt; is another book that i started reading a couple of weeks ago. A couple of chapters were pretty interesting but i skipped the parts with large chunks of code because i get bored with code in books. Code should be read on a computer display in an editor! Despite many others, i can&amp;rsquo;t say that this book was worth it.&lt;/p&gt;
&lt;p&gt;Reading this book made me realize that posting large chunks of code in a blog post is boring too. So i have decided to write more about ideas and concepts instead of code.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Essentials of Organizational Behavior</title>
      <link>/post/2009-04-25-essentials-of-organizational-behavior/</link>
      <pubDate>Sat, 25 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-04-25-essentials-of-organizational-behavior/</guid>
      <description>
        
          &lt;p&gt;Somewhere in 2007 I started reading &lt;a href=&#34;http://www.amazon.com/Essentials-Organizational-Behavior-Stephen-Robbins/dp/0136077617/ref=sr_1_2?ie=UTF8&amp;amp;s=books&amp;amp;qid=1240060292&amp;amp;sr=8-2&#34;&gt;Essentials of Organizational Behavior&lt;/a&gt; and only finished it earlier this week. This book covers behavior of humans, humans in organizations, and organizations. Although the book covers the topics pretty well i must say that i liked Managing Humans: Biting and Humorous Tales of a Software Engineering Manager more.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Mastering regular expressions</title>
      <link>/post/2009-04-25-mastering-regular-expressions/</link>
      <pubDate>Sat, 25 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-04-25-mastering-regular-expressions/</guid>
      <description>
        
          &lt;p&gt;A regular expression is a domain specific language for identifying parts in text and is one of those things every software developer should have learned. I ordered my copy of &lt;a href=&#34;http://www.amazon.com/Mastering-Regular-Expressions-Jeffrey-Friedl/dp/1565922573&#34;&gt;Mastering regular expressions&lt;/a&gt; way back in 2001 and found it incredibly good! Allthough there are books that cover a specific dialect better, i still think this book is recommended because it also teaches the reader to read regular expressions.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Pondering about code generation</title>
      <link>/post/2009-04-18-pondering-about-code-generation/</link>
      <pubDate>Sat, 18 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-04-18-pondering-about-code-generation/</guid>
      <description>
        
          &lt;p&gt;A while ago i was listening to &lt;a href=&#34;http://www.dotnetrocks.com/default.aspx?showNum=436&#34;&gt;&amp;lsquo;Kathleen Dollard on MEF and More&amp;rsquo; on NET Rocks!&lt;/a&gt; and it got me thinking.&lt;/p&gt;
&lt;p&gt;For a long time i considered code generation as a way to reduce the tedious parts of software development by spitting out considerable amounts of code and I immediately thought of tools like &lt;a href=&#34;msdn.microsoft.com/en-us/library/bb126445.aspx&#34;&gt;T4&lt;/a&gt;: Text Template Transformation Toolkit and &lt;a href=&#34;msdn.microsoft.com/en-us/teamsystem/aa718948.aspx&#34;&gt;GAT&lt;/a&gt;: Guidance Automation Toolkit.&lt;/p&gt;
&lt;p&gt;I believe that in order to become more productive we need a solution that requires less code spitting by means of better frameworks and higher languages. Eg: C# allows us to think about computer instructions on a much higher level than assembly language.&lt;/p&gt;
&lt;p&gt;And then i realised that the C# compiler is nothing more than a code generation tool!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Managing Humans: Biting and Humorous Tales of a Software Engineering Manager</title>
      <link>/post/2009-04-04-managing-humans-biting-and-humorous-tales-of-a-software-engineering-manager/</link>
      <pubDate>Sat, 04 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-04-04-managing-humans-biting-and-humorous-tales-of-a-software-engineering-manager/</guid>
      <description>
        
          &lt;p&gt;A while ago i heared Joel Spolsky shamelessly promote &lt;a href=&#34;http://www.amazon.com/Managing-Humans-Humorous-Software-Engineering/dp/159059844X&#34;&gt;Managing Humans: Biting and Humorous Tales of a Software Engineering Manager&lt;/a&gt; and decided to give it a read. No boring process descriptions, but short and consice chapters, fed with real life examples, transmitting the message to the reader. I loved reading this book.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>POC: Moq API adapter for Rhino Mocks</title>
      <link>/post/2009-04-03-poc-moq-api-adapter-for-rhino-mocks/</link>
      <pubDate>Fri, 03 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-04-03-poc-moq-api-adapter-for-rhino-mocks/</guid>
      <description>
        
          &lt;p&gt;One of my main concerns with third party software, and software in general, is maintainability. The Rhino Mocks project has been out there for a couple of years now and i&amp;rsquo;m pretty confident that it won&amp;rsquo;t go away anytime soon. The Moq project is a lot younger and will have to proove that it can stay alive&amp;hellip;&lt;/p&gt;
&lt;p&gt;Anyway, because most people seem to digg the Moq API i have decided to write an adapter that provides the same API using Rhino Mocks. Here are some simple examples&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IEcho
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Echo(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; input);
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestClass]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MockTests&lt;/span&gt;
{
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[TestMethod]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldBeAbleToReturnObject()
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// Arrange
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		Mock&amp;lt;iecho&amp;gt; sut = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Mock&amp;lt;iecho&amp;gt;();

		&lt;span style=&#34;color:#75715e&#34;&gt;// Act
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		IEcho echo = sut.Object;

		&lt;span style=&#34;color:#75715e&#34;&gt;// Assert
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		Assert.IsNotNull(echo);
		Assert.IsInstanceOfType(echo, &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(IEcho));
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[TestMethod]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldBeAbleToSetupAnAction()
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// Arrange
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		Mock&amp;lt;iecho&amp;gt; sut = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Mock&amp;lt;iecho&amp;gt;();

		sut.Setup(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(IEcho echo)
		{
		echo.Echo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tim&amp;#34;&lt;/span&gt;);
		}).Returns(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tim&amp;#34;&lt;/span&gt;);

		&lt;span style=&#34;color:#75715e&#34;&gt;// Act
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; result = sut.Object.Echo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tim&amp;#34;&lt;/span&gt;);

		&lt;span style=&#34;color:#75715e&#34;&gt;// Assert
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		Assert.AreEqual(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tim&amp;#34;&lt;/span&gt;, result);
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[TestMethod]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldBeAbleToVerifyAnAction()
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// Arrange
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		Mock&amp;lt;iecho&amp;gt; sut = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Mock&amp;lt;iecho&amp;gt;();

		&lt;span style=&#34;color:#75715e&#34;&gt;// Act
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		sut.Object.Echo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tim&amp;#34;&lt;/span&gt;);

		&lt;span style=&#34;color:#75715e&#34;&gt;// Assert
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		sut.Verify(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(IEcho echo)
		{
		echo.Echo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tim&amp;#34;&lt;/span&gt;);
		});
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[TestMethod]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[ExpectedException(typeof(ExpectationViolationException))]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldBeAbleToVerifyAnActionThatDidNotHappen()
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// Arrange
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		Mock&amp;lt;iecho&amp;gt; sut = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Mock&amp;lt;iecho&amp;gt;();

		&lt;span style=&#34;color:#75715e&#34;&gt;// Act
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		sut.Object.Echo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tim&amp;#34;&lt;/span&gt;);

		&lt;span style=&#34;color:#75715e&#34;&gt;// Assert
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		sut.Verify(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(IEcho echo)
		{
		echo.Echo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mike&amp;#34;&lt;/span&gt;);
		});
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[TestMethod]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldBeAbleToRaiseAnEvent()
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// Arrange
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		Mock&amp;lt;iecho&amp;gt; sut = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Mock&amp;lt;iecho&amp;gt;();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; wasCalled = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;

		sut.Object.EchoCompleted += &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
		{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sender == sut &amp;amp;&amp;amp; e == EventArgs.Empty) wasCalled = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
		};

		&lt;span style=&#34;color:#75715e&#34;&gt;// Act
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		sut.Raise(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(IEcho echo) { echo.EchoCompleted += &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;; }, sut, EventArgs.Empty);

		&lt;span style=&#34;color:#75715e&#34;&gt;// Assert
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		Assert.IsTrue(wasCalled);
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[TestMethod]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[ExpectedException(typeof(ArgumentException))]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldBeAbleToThrowAnException()
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// Arrange
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		Mock&amp;lt;iecho&amp;gt; sut = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Mock&amp;lt;iecho&amp;gt;();

		sut.Setup(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(IEcho echo)
		{
		echo.Echo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tim&amp;#34;&lt;/span&gt;);
		}).Throws&amp;lt;argumentException&amp;gt;();

		&lt;span style=&#34;color:#75715e&#34;&gt;// Act
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		sut.Object.Echo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tim&amp;#34;&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the actual code for this simplistic adapter&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mock&lt;/span&gt;&amp;lt;T&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; T : &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; T mockedObject;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Mock()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.mockedObject = MockRepository.GenerateStub&amp;lt;T&amp;gt;();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; T Object
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.mockedObject; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Setup&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;, T&amp;gt; Setup(Action&amp;lt;T&amp;gt; action)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Setup&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;, T&amp;gt;(RhinoMocksExtensions.Stub(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.mockedObject, action));
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Setup&amp;lt;R, T&amp;gt; Setup&amp;lt;R&amp;gt;(Delegates.Function&amp;lt;R, T&amp;gt; action)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Setup&amp;lt;R, T&amp;gt;(RhinoMocksExtensions.Stub(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.mockedObject, action));
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Verify(Action&amp;lt;T&amp;gt; action)
	{
		RhinoMocksExtensions.AssertWasCalled(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.mockedObject, action);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Raise(Action&amp;lt;T&amp;gt; eventSubscription, &lt;span style=&#34;color:#66d9ef&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] args)
	{
		RhinoMocksExtensions.Raise(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.mockedObject, eventSubscription, args);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Setup&amp;lt;R, T&amp;gt; Throws&amp;lt;e&amp;gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; E : Exception, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Setup&amp;lt;R, T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.options.Throw(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; E()));
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Setup&lt;/span&gt;&amp;lt;R, T&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IMethodOptions&amp;lt;R&amp;gt; options;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Setup(IMethodOptions&amp;lt;R&amp;gt; options)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.options = options;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Setup&amp;lt;R, T&amp;gt; Returns(R objToReturn)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Setup&amp;lt;R, T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.options.Return(objToReturn));
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Setup&amp;lt;R, T&amp;gt; Returns(Delegates.Function&amp;lt;R, T&amp;gt; action)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Setup&amp;lt;R, T&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.options.Do(action));
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>xUnit Test Patterns: Refactoring Test Code</title>
      <link>/post/2009-03-28-xunit-test-patterns-refactoring-test-code/</link>
      <pubDate>Sat, 28 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-03-28-xunit-test-patterns-refactoring-test-code/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://www.amazon.com/xUnit-Test-Patterns-Refactoring-Addison-Wesley/dp/0131495054&#34;&gt;xUnit Test Patterns: Refactoring Test Code&lt;/a&gt; starts with narratives on philosophy, principles, strategies and test smells. The second part covers test smells but i skimmed through these chapters because i have already had the joy to experience these anti-patterns first hand 🙁 Most chapters in the third part, covering actual patterns, caught my attention and inspired me. Although it&amp;rsquo;s quite big, 700+ pages, this book is most certainly recommended!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Strict mocks lead to overspecification</title>
      <link>/post/2009-03-24-strict-mocks-lead-to-overspecification/</link>
      <pubDate>Tue, 24 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-03-24-strict-mocks-lead-to-overspecification/</guid>
      <description>
        
          &lt;p&gt;Here is an example that demonstrates how strick mocks lead to overspecification. Imagine that we are creating a simple screen in a &lt;a href=&#34;http://martinfowler.com/eaaDev/PassiveScreen.html&#34;&gt;Passive View&lt;/a&gt; architecture. The first feature that we implement is displaying the message &amp;ldquo;edit&amp;rdquo; when the user clicks the edit button&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Fact]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldDisplayEditClickMessage()
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// Establish context
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	MockRepository mockRepository = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MockRepository();
	IView view = mockRepository.StrictMock&amp;lt;iview&amp;gt;();
	Expect.Call(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { view.EditClick += &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;; }).IgnoreArguments();
	mockRepository.Replay(view);

	&lt;span style=&#34;color:#75715e&#34;&gt;// Create sut
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	Presenter sut = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Presenter(view);

	&lt;span style=&#34;color:#75715e&#34;&gt;// Setup expectations
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	mockRepository.BackToRecord(view, BackToRecordOptions.Expectations);
	Expect.Call(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { view.DisplayClickMessage(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;edit&amp;#34;&lt;/span&gt;); });
	mockRepository.ReplayAll();

	&lt;span style=&#34;color:#75715e&#34;&gt;// Exercise
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	RhinoMocksExtensions
	.GetEventRaiser(view, &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(IView v) { v.EditClick += &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;; })
	.Raise(view, EventArgs.Empty);

	&lt;span style=&#34;color:#75715e&#34;&gt;// Verify
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	mockRepository.VerifyAll();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/overspecification-01.PNG&#34; alt=&#34;screenshot of test runner with all tests passing&#34;&gt;&lt;/p&gt;
&lt;p&gt;And now we add the feature that displays the message &amp;ldquo;save&amp;rdquo; whenever the user clicks on the save button&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[Fact]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldDisplaySaveClickMessage()
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// Establish context
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	MockRepository mockRepository = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MockRepository();
	IView view = mockRepository.StrictMock&amp;lt;iview&amp;gt;();
	Expect.Call(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { view.EditClick += &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;; }).IgnoreArguments();
	Expect.Call(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { view.SaveClick += &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;; }).IgnoreArguments();
	mockRepository.Replay(view);

	&lt;span style=&#34;color:#75715e&#34;&gt;// Create sut
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	Presenter sut = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Presenter(view);

	&lt;span style=&#34;color:#75715e&#34;&gt;// Setup expectations
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	mockRepository.BackToRecord(view, BackToRecordOptions.Expectations);
	Expect.Call(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { view.DisplayClickMessage(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;save&amp;#34;&lt;/span&gt;); });
	mockRepository.ReplayAll();

	&lt;span style=&#34;color:#75715e&#34;&gt;// Exercise
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	RhinoMocksExtensions
	.GetEventRaiser(view, &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(IView v) { v.SaveClick += &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;; })
	.Raise(view, EventArgs.Empty);

	&lt;span style=&#34;color:#75715e&#34;&gt;// Verify
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	mockRepository.VerifyAll();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/overspecification-02.PNG&#34; alt=&#34;screenshot of test runner with a failing test.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Although we implemented the feature correctly, and left the code of the first feature untouched, we notice that our ShouldDisplayEditClickMessage test fails because it is not expecting a subscription to the SaveClick event. Imho, this way of testing is a testing &lt;strong&gt;anti-pattern&lt;/strong&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Comparing Moq to Rhino Mocks</title>
      <link>/post/2009-03-23-comparing-moq-to-rhino-mocks/</link>
      <pubDate>Mon, 23 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-03-23-comparing-moq-to-rhino-mocks/</guid>
      <description>
        
          &lt;p&gt;So which mocking framework should we use? Do we fall back on good old &lt;a href=&#34;http://ayende.com/projects/rhino-mocks.aspx&#34;&gt;Rhino Mocks&lt;/a&gt; or do we choose for the new kid on the block &lt;a href=&#34;http://code.google.com/p/moq/&#34;&gt;Moq&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;From a technical point of view i would dare to say that they will be able to support the same set of features because they&amp;rsquo;re both based on Castle&amp;rsquo;s &lt;a href=&#34;http://www.castleproject.org/dynamicproxy/index.html&#34;&gt;DynamicProxy&lt;/a&gt;. Rhino Mocks has the advantages that it, unlike Moq, supports the mocking of Delegates and can be used in a .Net 2.0 only environment. Whether or not we should care about these differences is a question i will leave unanswered.&lt;/p&gt;
&lt;p&gt;From a user point of view i find the Moq API a bit cleaner because &lt;!-- raw HTML omitted --&gt;it frees me from thinking about the record-replay model&lt;!-- raw HTML omitted --&gt; and Rhino Mocks wants me to make assertions on a stub. Apart from that the differences are rather small given for the use-cases i presented in &lt;a href=&#34;http://www.timvw.be/getting-started-with-moq/&#34;&gt;Getting started with Moq&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating instances&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Rhino  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; productDetailView = MockRepository.GenerateStub&amp;lt;iproductDetailView&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;vs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Moq
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; productDetailViewMock = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Mock&amp;lt;iproductDetailView&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Setting up results&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Rhino Mocks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;productRepository
    .Stub(repository =&amp;gt; repository.GetCategory(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)).IgnoreArguments()
    .Do((Delegates.Function&amp;lt;icategory, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;)(categoryId =&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; category;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;vs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Moq
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;productRepositoryMock    
    .Setup(repository =&amp;gt; repository.GetCategory(It.IsAny&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;())) 
    .Returns&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(categoryId =&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; category.Object;});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Consuming the mocked objects&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Rhino Mocks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Nothing to do
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;vs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Moq  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Nothing to do
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Raising events&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Rhino Mocks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;productDetailView.Raise(view =&amp;gt; view.EditClick += &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;).Raise(sender, EventArgs.Empty);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;vs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Moq  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;productDetailViewMock.Raise(view =&amp;gt; view.EditClick += &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, sender, EventArgs.Empty);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Verifying that a method was invoked&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Rhino Mocks -- Odd that i&amp;#39;m asserting on a Stub.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;productRepository.AssertWasCalled(    
    repository =&amp;gt; repository.FindCategories(
    Arg&amp;lt;ispecification&amp;lt;icategory&amp;gt;&amp;gt;.Matches(Is.TypeOf(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(All&amp;lt;icategory&amp;gt;)))));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;vs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Moq
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;productRepositoryMock.Verify(    
    repository =&amp;gt; repository.FindCategories(
		It.Is&amp;lt;ispecification&amp;lt;icategory&amp;gt;&amp;gt;(specification =&amp;gt; specification.GetType() == &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(All&amp;lt;icategory&amp;gt;))));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Override a result&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Rhino Mocks  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;productDetailView.BackToRecord();
    
productDetailView    
    .Stub(view =&amp;gt; view.CategoryId)
    .Returns(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;vs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Moq  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;productDetailViewMock
    .Setup(view =&amp;gt; view.CategoryId).Returns(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Editted code to take advantage of the new AAA syntax that comes with Rhino Mocks 3.5 If only someone could show me how i can override a Stubbed result&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Getting started with Moq</title>
      <link>/post/2009-03-21-getting-started-with-moq/</link>
      <pubDate>Sat, 21 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-03-21-getting-started-with-moq/</guid>
      <description>
        
          &lt;p&gt;In this article I will demonstrate the Moq API by means of a simple application that allows the user to manage a quote.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/QuoteOfTheDay-01.jpg&#34; alt=&#34;screenshot of quote manager displaying opening screen.&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/QuoteOfTheDay-02.jpg&#34; alt=&#34;screenshot of quote manager displaying edit screen.&#34;&gt;&lt;/p&gt;
&lt;p&gt;In order to prevent that we have to rewrite our application when we move to a different graphical environment such as Web Forms, Silverlight or WPF I have decided to apply the [Humble Object](&lt;a href=&#34;http://xunitpatterns.com/Humble&#34;&gt;http://xunitpatterns.com/Humble&lt;/a&gt; Object.html) pattern in the design. The implementation of the application has been based on the &lt;a href=&#34;http://martinfowler.com/eaaDev/PassiveScreen.html&#34;&gt;Passive View pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First we describe what should happen when the user launches the application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The quote should be displayed&lt;/li&gt;
&lt;li&gt;The Edit button should be visible&lt;/li&gt;
&lt;li&gt;The OK button should be invisible&lt;/li&gt;
&lt;li&gt;The Cancel button should be invisible&lt;/li&gt;
&lt;li&gt;It should not be possible to edit the quote&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we translate these requirements in &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/Code-01.txt&#34;&gt;code&lt;/a&gt;. Because it is too expensive to test with actual Windows resources I have decided to use a mock object that mimics the actual resource. This is done in the Given method which arranges the context in which we want to verify the behavior:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.quoteFormViewMock = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Mock&amp;lt;iquoteFormView&amp;gt;();
&lt;span style=&#34;color:#75715e&#34;&gt;// The mimicked view object is available via the Object property
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.sut = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; QuoteFormPresenter(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.quoteFormViewMock.Object);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The When method is used to invoke the behavior that we want to verify. In the situation where the user launches the application this means raising the Load event:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.quoteFormViewMock.Raise(view =&amp;gt; view.Load += &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, EventArgs.Empty);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can verify that a certain method has been called as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.quoteFormViewMock.Verify(view =&amp;gt; view.MakeEditButtonVisible(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In situations where we don’t have the exact parameters for the method that should be invoked we can use the &lt;a href=&#34;http://api.moq.me/html/FBE0FFA5.htm&#34;&gt;It&lt;/a&gt; class to describe those parameters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.quoteFormViewMock.Verify(view =&amp;gt; view.DisplayQuote(It.IsAny&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;()));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We repeat this process of defining and implementing the requirements for the other interactions we want to describe. We end up with a set of requirements that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/QuoteOfTheDay-03.jpg&#34; alt=&#34;screenshot of test manager&#34;&gt;&lt;/p&gt;
&lt;p&gt;In case the user clicked the Cancel button we want to verify that the updated quote is not displayed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.quoteFormViewMock.Verify(view =&amp;gt; view.DisplayQuote(It.IsAny&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;()), Times.Never());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case the user clicked the OK button we have to ensure a context where an updated quote is available. This is achieved by adding the following in our Given method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.quoteFormViewMock
.Setup(view =&amp;gt; view.UpdatedQuote)
.Returns(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.updatedQuote);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can verify that the updated quote is displayed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.quoteFormViewMock.Verify(view =&amp;gt; view.DisplayQuote(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.updatedQuote));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Virtually every application interacts with a database and the same is true for our application. Just like we abstracted our view, we decide to abstract our quote resource too. In case the user clicked the OK button we want to verify that the resource was instructed to update the quote.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; quote = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.quoteFormViewMock.Object.UpdatedQuote;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.quoteResourceMock.Verify(resource =&amp;gt; resource.Update(quote));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case the quote resource fails we would like to display an error message. To achieve this we create a new test that establishes a context where the quote resource throws an exception when it is asked to update a quote as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.Given();
&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.quoteResourceMock
.Setup(resource =&amp;gt; resource.Update(It.IsAny&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;()))
.Throws(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ApplicationException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Resource is unavailable.&amp;#34;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sometimes we want to determine what should happen based on the parameters that are provided. In that case we can provide the Returns function a delegate:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.quoteResourceMock
.Setup(resource =&amp;gt; resource.Update(It.IsAny&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;()))
.Returns&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;(quote =&amp;gt;
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.IsNullOrEmpty(quote)) &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ApplicationException();
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; quote.Replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I think that this covers most typical usage scenarios. Feel free to download the code: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/QuoteManager.zip&#34;&gt;QuoteManager.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Another reason for not using mstest</title>
      <link>/post/2009-03-14-another-reason-for-not-using-mstest/</link>
      <pubDate>Sat, 14 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-03-14-another-reason-for-not-using-mstest/</guid>
      <description>
        
          &lt;p&gt;As you can read in &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms182172(VS.80).aspx&#34;&gt;CA1001&lt;/a&gt;: Types that own disposable fields should be disposable. Pretty solid advice, but for some reason the mstest runner does not dispose of classes that implement IDisposable. A possible workaround is to apply a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.testcleanupattribute(VS.80).aspx&#34;&gt;TestCleanupAttribute&lt;/a&gt; to the Dispose method, but this is really contradictory with the &amp;ldquo;Shared test fixture&amp;rdquo; approach mstest uses. Imho, there is only one clean solution: use a decent testing framework instead.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Setup expectation with successive function calls using Moq</title>
      <link>/post/2009-03-14-setup-expectation-with-successive-function-calls-using-moq/</link>
      <pubDate>Sat, 14 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-03-14-setup-expectation-with-successive-function-calls-using-moq/</guid>
      <description>
        
          &lt;p&gt;In the &lt;a href=&#34;http://code.google.com/p/moq/wiki/QuickStart&#34;&gt;Quickstart&lt;/a&gt; guide we find an example that shows us how to setup a different return value for each invocation as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// returning different values on each invocation
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; mock = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Mock&amp;lt;ifoo&amp;gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; calls = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
mock.Setup(foo =&amp;gt; foo.Execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;))
	.Returns(() =&amp;gt; calls)
	.Callback(() =&amp;gt; calls++);
&lt;span style=&#34;color:#75715e&#34;&gt;// returns 0 on first invocation, 1 on the next, and so on
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Console.WriteLine(mock.Object.Execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;a href=&#34;http://www.madprops.org/blog/moq-triqs-successive-expectations/&#34;&gt;Moq Triqs &amp;ndash; Successive Expectations&lt;/a&gt; i found inspiration to implement an extension method that allows me to define an expectation that calls a set of successive functions&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MoqExtensions&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IReturnsResult&amp;lt;tmock&amp;gt; ReturnsInOrder&amp;lt;tmock, TResult&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; ISetup&amp;lt;tmock, TResult&amp;gt; setup, &lt;span style=&#34;color:#66d9ef&#34;&gt;params&lt;/span&gt; Func&amp;lt;tresult&amp;gt;[] valueFunctions) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; TMock : &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; functionQueue = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Queue&amp;lt;func&amp;lt;tresult&amp;gt;&amp;gt;(valueFunctions);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; setup.Returns(() =&amp;gt; functionQueue.Dequeue()());
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This allows me to define a set of functions that i want to be called for each successive call&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WhenSettingUpOrderedExpectationFunctions&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; ICategory { &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Id { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; } }
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[Fact]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldReturnTheSequenceOfIds()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; category = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Mock&amp;lt;icategory&amp;gt;();

		category.Setup(c =&amp;gt; c.Id).ReturnsInOrder(
			() =&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
			() =&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
			() =&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
			() =&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);

		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; expectedIds = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; };
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; expectedId &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; expectedIds) Assert.Equal(expectedId, category.Object.Id);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Using sed</title>
      <link>/post/2009-03-05-using-sed/</link>
      <pubDate>Thu, 05 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-03-05-using-sed/</guid>
      <description>
        
          &lt;p&gt;For a couple of days now i&amp;rsquo;ve been pondering about posting something about my love for &lt;a href=&#34;http://www.gnu.org/software/textutils/&#34;&gt;GNU text-utilities&lt;/a&gt; but never got round to it. A couple of minutes ago i read Phil Windley&amp;rsquo;s &lt;a href=&#34;http://www.windley.com/archives/2009/03/using_grep_and_find.shtml&#34;&gt;Using Grep and Find&lt;/a&gt; post so here is a one-liner that shows how you can add a reference to a msbuild target file to all csproj files in a given folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find -name *.csproj -exec sed -i -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#^&amp;lt;/project&amp;gt;$# &amp;lt;import Project=&amp;#34;X:\\BuildTasks\\Corp.targets&amp;#34; /&amp;gt;\r\n&amp;lt;/project&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or if you are frustrated with System.Diagnostics.CodeAnalysis.SuppressMessageAttributes and want to remove them from all your cs files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find -name &lt;span style=&#34;color:#ae81ff&#34;&gt;\*&lt;/span&gt;.cs -exed sed -r -i -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s#\[.\*?SuppressMessage.*?\]##&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>NHibernate in Action</title>
      <link>/post/2009-02-23-nhibernate-in-action/</link>
      <pubDate>Mon, 23 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-02-23-nhibernate-in-action/</guid>
      <description>
        
          &lt;p&gt;Last week i received my copy of &lt;a href=&#34;http://www.amazon.com/NHibernate-Action-Pierre-Henri-Kuat%C3%A9/dp/1932394923&#34;&gt;NHibernate in Action&lt;/a&gt;. This book provides much more than the typical examples you find in the product documentation like architectural guidance on the application of O/R Mapping. Even with my Hibernate experience i found some interesting insights in the NHibernate features. This book is most certainly recommended!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>JavaScript: The Good Parts</title>
      <link>/post/2009-02-13-javascript-the-good-parts/</link>
      <pubDate>Fri, 13 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-02-13-javascript-the-good-parts/</guid>
      <description>
        
          &lt;p&gt;This week i have been reading &lt;a href=&#34;http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742&#34;&gt;JavaScript: The Good Parts&lt;/a&gt;. Although the book is pretty thin, approximitaly. 150 pages, the information that is inside the book is really powerful. The book provides deep insight for people that are considering to implement functionality in JavaScript. I would say that this is a must read.&lt;/p&gt;
&lt;p&gt;Here is an example of something that i learned from the book (A workaround for an error in the ECMAScript Language Specification which causes this to be set incorrectly for inner functions)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Broken&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetName&lt;/span&gt;() { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Display&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;GetName&lt;/span&gt;()); }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Broken&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;broken&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Display&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// displays &amp;#39;undefined&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fixed&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;that&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetName&lt;/span&gt;() { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;that&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Display&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;GetName&lt;/span&gt;()); }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fixed&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fixed&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Display&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// displays &amp;#39;fixed&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Microsoft .NET: Architecting Applications for the Enterprise</title>
      <link>/post/2009-02-13-microsoft-net-architecting-applications-for-the-enterprise/</link>
      <pubDate>Fri, 13 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-02-13-microsoft-net-architecting-applications-for-the-enterprise/</guid>
      <description>
        
          &lt;p&gt;Earlier this month i have read &lt;a href=&#34;http://www.amazon.com/Microsoft%C2%AE-NET-Architecting-Applications-PRO-Developer/dp/073562609X&#34;&gt;Microsoft .NET: Architecting Applications for the Enterprise&lt;/a&gt;. This time i was pretty pleased to notice that the author, &lt;a href=&#34;http://weblogs.asp.net/despos/&#34;&gt;Dino Esposito&lt;/a&gt;, did not fill the book with references to other books written by him. All in all the book painted a pretty accurate picture of enterprise application development that is obviously inspired by masterworks like: &lt;a href=&#34;http://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional/dp/0201633612&#34;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;, &lt;a href=&#34;http://www.amazon.com/Enterprise-Application-Architecture-Addison-Wesley-Signature/dp/0321127420&#34;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt; and &lt;a href=&#34;http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&#34;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One remark though: I was a bit disappointed to see that the examples of unit tests used MSTEST. Why? Because it is such a broken product i find it hard to believe that for serious enterprise application development this library is actually usable.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Non-Designer&#39;s Design Book</title>
      <link>/post/2009-02-13-non-designers-design-book/</link>
      <pubDate>Fri, 13 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-02-13-non-designers-design-book/</guid>
      <description>
        
          &lt;p&gt;A couple of weeks ago the &lt;a href=&#34;http://www.amazon.com/Non-Designers-Design-Book-3rd-Designers/dp/0321534042&#34;&gt;Non-Designer&amp;rsquo;s Design Book&lt;/a&gt; was mentionned in some podcast i was listening to and i decided to give it a read. The author has stuffed the color printed book with examples describing the four basic design principles:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Contrast&lt;/strong&gt;: The idea behind contrast is to avoid elements on the page that are merely similar. If the elements (type, color, size, line thickness, shape, space, etc.) are not the same, then make them very different. Contrast is often the most important visual attraction on a page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repetition&lt;/strong&gt;: Repeat visual elements of the design throughout the piece. You can repeat color, shape, texture, spatial relationships, line thicknesses, sizes, etc. This helps develop the organization and strengthens the unity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alignment&lt;/strong&gt;: Nothing should be placed on the page arbitrarily. Every element should have some visual connection with another element on the page. This creates a clean, sophisticated, fresh look.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proximity&lt;/strong&gt;: Items relating to each other should be grouped close together. When several items are in close proximity to each other, they become one visual unit rather than several separate units. This helps organize information and reduces clutter.&lt;/li&gt;
&lt;/ol&gt;

        
      </description>
    </item>
    
    <item>
      <title>The art of Unit Testing</title>
      <link>/post/2008-12-29-the-art-of-unit-testing/</link>
      <pubDate>Mon, 29 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-12-29-the-art-of-unit-testing/</guid>
      <description>
        
          &lt;p&gt;This weekend i have been reading &lt;a href=&#34;http://artofunittesting.com/&#34;&gt;The art of Unit Testing&lt;/a&gt; via the &lt;a href=&#34;http://www.manning.com/about/meap.html&#34;&gt;Manning Early Access Program&lt;/a&gt;. This book does not really teach you how to write unit tests but tries to answer those questions you start asking yourself after a while: How can i organize my tests? How do i make sure they are maintainable? Although the book is not loaded with new concepts, the existing ones are well covered. Probably one of the first books in this genre for the .Net world and most certainly recommended for reading.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Programming Microsoft ASP.NET 2.0 Applications: Advanced Topics</title>
      <link>/post/2008-12-27-programming-microsoft-aspnet-20-applications-advanced-topics/</link>
      <pubDate>Sat, 27 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-12-27-programming-microsoft-aspnet-20-applications-advanced-topics/</guid>
      <description>
        
          &lt;p&gt;Although i was most of the week in bed with a cold i managed to finish reading &lt;a href=&#34;http://www.amazon.com/Programming-Microsoft-ASP-NET-2-0-Applications/dp/0735621772&#34;&gt;Programming Microsoft ASP.NET 2.0 Applications: Advanced Topics&lt;/a&gt;. This book contained less references to the previous book (luckily, because that one has been superseded now). I found it a bit confusing when the author explained half of a topic, diversified to something completely different, and then finished the topic. If you want some more insight in the ASP.NET machinery this book is recommended. What i did miss is a section on the inner workings of View State and change tracking but i have yet to find a book that covers this topic.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting MyTestRunner</title>
      <link>/post/2008-12-24-presenting-mytestrunner/</link>
      <pubDate>Wed, 24 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-12-24-presenting-mytestrunner/</guid>
      <description>
        
          &lt;p&gt;Here are a couple of reasons why i dislike the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms243147(VS.80).aspx&#34;&gt;Unit Testing Framework&lt;/a&gt; that comes with &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/fda2bad5(VS.80).aspx&#34;&gt;Visual Studio Team System&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not all versions of Visual Studio are capable of running the tests.&lt;/li&gt;
&lt;li&gt;Test inheritance is not supported.&lt;/li&gt;
&lt;li&gt;Running tests via mstest.exe is slow.&lt;/li&gt;
&lt;li&gt;Visual Studio creating tens of .vmsdi files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are already a couple of better frameworks out there, and currently &lt;a href=&#34;http://mbunit.com/&#34;&gt;MbUnit&lt;/a&gt; is my favorite one, certainly in combination with &lt;a href=&#34;http://www.testdriven.net/&#34;&gt;TestDriven.NET&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have created a custom implementation of the Microsoft.VisualStudio.QualityTools.UnitTestingFramework assembly. Actually, the assembly only has a couple of Attributes for the moment but contributions are always welcome 😉&lt;/p&gt;
&lt;p&gt;In order to achieve better performance i decided to implement a custom test runner. Currently &lt;a href=&#34;http://www.gallio.org/&#34;&gt;Gallio&lt;/a&gt; uses mstest.exe but there might be a day that i decide to write a plugin so that mytestrunner can be used instead.&lt;/p&gt;
&lt;p&gt;I was inspired by &lt;a href=&#34;http://docs.mbunit.com/help/html/MbUnitAndVisualStudio/CreatingSelfTestingAssemblies.htm&#34;&gt;Creating Self-testing Assemblies&lt;/a&gt; and decided to use that approach but for some odd reason visual studio insists on running unit tests although the assembly is a console application 🙁 Anyway, i can still invoke mytestrunner via the external tools as following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/mytestrunner-external-tools.gif&#34; alt=&#34;screenshot of external tools dialog&#34;&gt;&lt;/p&gt;
&lt;p&gt;The source code is available at &lt;a href=&#34;http://code.google.com/p/mytestrunner/&#34;&gt;http://code.google.com/p/mytestrunner/&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Applying Domain-Driven Design and Patterns: With Examples in C# and .NET</title>
      <link>/post/2008-12-22-applying-domain-driven-design-and-patterns-with-examples-in-c-and-net/</link>
      <pubDate>Mon, 22 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-12-22-applying-domain-driven-design-and-patterns-with-examples-in-c-and-net/</guid>
      <description>
        
          &lt;p&gt;In his book, &lt;a href=&#34;http://www.amazon.com/Applying-Domain-Driven-Design-Patterns-Examples/dp/0321268202&#34;&gt;Applying Domain-Driven Design and Patterns: With Examples in C# and .NET&lt;/a&gt;, Jimmy Nilsson covers the most common questions you ask yourself when you are thinking about applying DDD to one of your projects. Sometimes i found the ordering of the chapters a bit odd but all in all it was an excellent read and most certainly recommended.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring AJAX on the ASP.NET platform</title>
      <link>/post/2008-12-14-exploring-ajax-on-the-aspnet-platform/</link>
      <pubDate>Sun, 14 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-12-14-exploring-ajax-on-the-aspnet-platform/</guid>
      <description>
        
          &lt;p&gt;I finally found some time to experiment with AJAX on the ASP.NET platform. The first technique i looked into was &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb386573.aspx&#34;&gt;Partial-Page Rendering&lt;/a&gt; with controls like &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb386454.aspx&#34;&gt;UpdatePanel&lt;/a&gt;. It gave me an awkward feeling but even Dino Esposito, who spent a whole chapter on this technique in his &lt;a href=&#34;http://www.amazon.com/Programming-Microsoft-ASP-NET-Dino-Esposito/dp/0735625271&#34;&gt;book&lt;/a&gt;, seems to &lt;a href=&#34;http://weblogs.asp.net/despos/archive/2007/09/19/partial-rendering-misses-ajax-architectural-points.aspx&#34;&gt;share&lt;/a&gt; that feeling.&lt;/p&gt;
&lt;p&gt;Page methods, public static methods that are decorated with the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.web.services.webmethodattribute.aspx&#34;&gt;WebMethodAttribute&lt;/a&gt; declared on a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx&#34;&gt;Page&lt;/a&gt; are exposed as a WebService method and return the result as &lt;a href=&#34;http://www.json.org/&#34;&gt;JSON&lt;/a&gt;. An easy solution but it comes with the cost that it does not offer much flexibility.&lt;/p&gt;
&lt;p&gt;Thanks to the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.servicemodel.webhttpbinding.aspx&#34;&gt;WebHttpBinding&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.servicemodel.web.webinvokeattribute.aspx&#34;&gt;WebInvokeAttribute&lt;/a&gt; the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms735119.aspx&#34;&gt;Windows Communication Foundation&lt;/a&gt; now supports services that return JSON in a &lt;a href=&#34;http://en.wikipedia.org/wiki/Representational_State_Transfer&#34;&gt;REST&lt;/a&gt;full call style. This is the technique that i prefer.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://jquery.com/&#34;&gt;jQuery&lt;/a&gt; is a very sweet library that simplifies JavaScript development seriously and provides an easy way to consume WCF/JSON services easily. Here is an example of a page with a button that by default triggers a postback (supporting all users, even those without JavaScript) but that behavior is overriden with a XMLHTTP request instead once the document is loaded (an enhancement for users with JavaScript)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(document).&lt;span style=&#34;color:#a6e22e&#34;&gt;ready&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#RequestEchoButton&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ajax&lt;/span&gt;({
			&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Default.svc/Echo&amp;#39;&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;contentType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json; charset=utf-8&amp;#39;&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;dataType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;success&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) { &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#EchoResultDiv&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;html&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;); },
			&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) { &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#EchoResultDiv&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;html&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Failed to request Echo.&amp;#39;&lt;/span&gt;); }
		});
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
	});
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that my Default.svc page uses the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.servicemodel.activation.webservicehostfactory.aspx&#34;&gt;WebServiceHostFactory&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;%@ ServiceHost Language=&amp;#34;C#&amp;#34; Debug=&amp;#34;true&amp;#34; Service=&amp;#34;PageServices.Default&amp;#34; Factory=&amp;#34;System.ServiceModel.Activation.WebServiceHostFactory&amp;#34; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Conclusion: Unlike jQuery and WCF, I am not convinced that controls like UpdatePanel and ScriptManager add any value to my toolkit.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Programming Microsoft ASP.NET 3.5</title>
      <link>/post/2008-12-14-programming-microsoft-aspnet-35/</link>
      <pubDate>Sun, 14 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-12-14-programming-microsoft-aspnet-35/</guid>
      <description>
        
          &lt;p&gt;Having heared only positive things about &lt;a href=&#34;http://weblogs.asp.net/despos/&#34;&gt;Dino Esposito&lt;/a&gt;&amp;rsquo;s way of writing i decided to read &lt;a href=&#34;http://www.amazon.com/Programming-Microsoft-ASP-NET-Dino-Esposito/dp/0735625271&#34;&gt;Programming Microsoft ASP.NET 3.5&lt;/a&gt;. The book is written in a way that invites you to read and experiment with the contents. It covered the essentials of ASP.NET programming but i did not have the feeling that it added much to what i had read in &lt;a href=&#34;http://www.amazon.com/Professional-ASP-NET-2-0-Programmer/dp/0764576100&#34;&gt;Professional ASP.NET 2.0&lt;/a&gt;. After a while i became annoyed with the numerous references to &lt;a href=&#34;http://www.amazon.com/gp/product/0735621772/sr=1-1/qid=1156801743/ref=sr_1_1/104-6313703-3867159?ie=UTF8&amp;amp;s=books&#34;&gt;Programming Microsoft ASP.NET 2.0 Applications: Advanced Topics&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Release It!: Design and Deploy Production-Ready Software</title>
      <link>/post/2008-11-22-release-it-design-and-deploy-production-ready-software/</link>
      <pubDate>Sat, 22 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-11-22-release-it-design-and-deploy-production-ready-software/</guid>
      <description>
        
          &lt;p&gt;I really loved reading &lt;a href=&#34;http://www.pragprog.com/titles/tpp/the-pragmatic-programmer&#34;&gt;The Pragmatic Programmer: From Journeyman to Master&lt;/a&gt; from The Pragmatic Programmers so when i noticed that a couple of bloggers were recommending &lt;a href=&#34;http://www.amazon.com/Release-Production-Ready-Software-Pragmatic-Programmers/dp/0978739213&#34;&gt;Release It!: Design and Deploy Production-Ready Software&lt;/a&gt; i decided to read it too. This book covers what happens to an application after it has been deployed in production. I really appreciated the first chapters with anti-patterns and patterns. At the end of the book the author also touches the problem of dependencies between machines and deployed applications and briefly offers a management solution under the name OpsDb. All in all, this book made me conscient about a set of problems i would not think about otherwise.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Query a specific Google Calendar</title>
      <link>/post/2008-10-22-query-a-specific-google-calendar/</link>
      <pubDate>Wed, 22 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-10-22-query-a-specific-google-calendar/</guid>
      <description>
        
          &lt;p&gt;Despite the multiple copies of the &lt;a href=&#34;http://code.google.com/apis/calendar/developers_guide_dotnet.html&#34;&gt;API Developer&amp;rsquo;s Guide: .NET&lt;/a&gt; i found i was unable to find how i should query a specific calendar (not the default). Anyway, it can be done by using the CalendarEntry.Content.BaseUri as the query uri. Here is an example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CalendarHelper&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; OwnedCalendarsUrl = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.google.com/calendar/feeds/default/owncalendars/full&amp;#34;&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; CalendarService svc;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CalendarHelper(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; username, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; password)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.svc = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CalendarService(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;demo&amp;#34;&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.svc.setUserCredentials(username, password);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IEnumerable&amp;lt;calendarEntry&amp;gt; FindOwnedCalendars()
	{
		CalendarQuery query = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CalendarQuery(OwnedCalendarsUrl);
		CalendarFeed result = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.svc.Query(query);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (CalendarEntry entry &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; result.Entries) &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; entry;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CalendarEntry GetCalendar(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
			&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; calendar &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.FindOwnedCalendars()
			&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; calendar.Title.Text == name
			&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; calendar).SingleOrDefault();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IEnumerable&amp;lt;atomEntry&amp;gt; FindEvents(CalendarEntry calendar, DateTime begin, DateTime end)
	{
		EventQuery myQuery = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EventQuery(calendar.Content.AbsoluteUri);
		myQuery.StartTime = begin;
		myQuery.EndTime = end;
		EventFeed result = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.svc.Query(myQuery);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; result.Entries.Count; ++i) &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result.Entries[i]; 
	} 
} 

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main() 
{ 
	CalendarHelper helper = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CalendarHelper(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user@gmail.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;); 
	DateTime begin = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2008&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); 
	DateTime end= &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2009&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;); 
	IEnumerable&amp;lt;calendarEntry&amp;gt; calendars = helper.FindOwnedCalendars();
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (CalendarEntry calendar &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; calendars)
	{
		Console.WriteLine(calendar.Title.Text);

		IEnumerable&amp;lt;atomEntry&amp;gt; calendarEvents = helper.FindEvents(calendar, begin, end);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;(AtomEntry calendarEvent &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; calendarEvents)
		{
			Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}: {1}&amp;#34;&lt;/span&gt;, calendarEvent.Updated, calendarEvent.Title.Text);
		}

		Console.WriteLine();
	}

	Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine);
	Console.ReadKey();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Refactoring Application Environment (Part 2)</title>
      <link>/post/2008-10-17-refactoring-application-environment-part-2/</link>
      <pubDate>Fri, 17 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-10-17-refactoring-application-environment-part-2/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://lucamilan.blogspot.com/&#34;&gt;Luca Milan&lt;/a&gt; notified me of a design issue. Until now the ApplicationEnvironment had an Instance property as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ApplicationEnvironment Instance { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { ... } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A lot of flexibility can be added by extracting an interface IApplicationEnvironment and use that as return type for the property:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IApplicationEnvironment Instance { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { ... } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have &lt;a href=&#34;http://www.codeplex.com/CommonServiceLocator&#34;&gt;Common Service Locator&lt;/a&gt; i have decided to completely remove the Instance property. Code that requires an instance of the IApplicationEnvironment will have to resolve it via the ServiceLocator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;IApplicationEnvironment appEnv = ServiceLocator.Current.GetInstance&amp;lt;iapplicationEnvironment&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>How does the controller know which action method to invoke?</title>
      <link>/post/2008-10-15-how-does-the-controller-know-which-action-method-to-invoke/</link>
      <pubDate>Wed, 15 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-10-15-how-does-the-controller-know-which-action-method-to-invoke/</guid>
      <description>
        
          &lt;p&gt;Yesterday i attended another great &lt;a href=&#34;http://www.visug.be&#34;&gt;VISUG&lt;/a&gt; event on ASP.NET presented by &lt;a href=&#34;http://blog.maartenballiauw.be/&#34;&gt;Maarten Balliauw&lt;/a&gt;. He demonstrated a custom filter but did not dig into the mechanics of action method resolving. With the aid of of the ActionName attribute we can map different methods to the same action. The following methods will all map to the same &amp;ldquo;Detail&amp;rdquo; action&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ActionResult Detail(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; productId) { ... }
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ActionResult Detail(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; productId, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name) { ... }
&lt;span style=&#34;color:#a6e22e&#34;&gt;[ActionName(&amp;#34;Detail&amp;#34;)]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ActionResult DisplayDetail(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; productId) { ... }
&lt;span style=&#34;color:#a6e22e&#34;&gt;[ActionName(&amp;#34;Detail&amp;#34;)]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ActionResult ModifyDetail(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; productId, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name) { ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So how does the Controller know which method to invoke? The answer can be found in the ActionMethodSelector which tries to find the method as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MethodInfo FindActionMethod(ControllerContext controllerContext, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; action)
{
	List&amp;lt;methodInfo&amp;gt; methodsMatchingName = GetMatchingAliasedMethods(controllerContext, action);
	methodsMatchingName.AddRange(NonAliasedMethods[action]);
	List&amp;lt;methodInfo&amp;gt; finalMethods = RunSelectionFilters(controllerContext, methodsMatchingName);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (finalMethods.Count)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; finalMethods[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
		&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; CreateAmbiguousMatchException(finalMethods, action);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the RunSelectionFilters method all the found ActionSelection Attributes have their IsValidForRequest method called in the hope that only one potential method remains.&lt;/p&gt;
&lt;p&gt;The most common scenario is that we want our controller to behave depending upon the request method (POST vs GET). For this scenario there is the AcceptVerbsAttribute. eg&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[ActionName(&amp;#34;Detail&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;[AcceptVerbs(&amp;#34;GET&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ActionResult DisplayDetail(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; productId) { ... }
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[ActionName(&amp;#34;Detail&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;[AcceptVerbs(&amp;#34;POST&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ActionResult ModifyDetail(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; productId, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name) { ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The implementation of the IsValidForRequest method in the AcceptVerbsAttribute is pretty simple&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsValidForRequest(ControllerContext controllerContext, MethodInfo methodInfo)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (controllerContext == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArgumentNullException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;controllerContext&amp;#34;&lt;/span&gt;);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; incomingVerb = controllerContext.HttpContext.Request.HttpMethod;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Verbs.Contains(incomingVerb, StringComparer.OrdinalIgnoreCase);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Adaptive control behavior: LinkButton without javascript</title>
      <link>/post/2008-10-14-adaptive-control-behavior-linkbutton-without-javascript/</link>
      <pubDate>Tue, 14 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-10-14-adaptive-control-behavior-linkbutton-without-javascript/</guid>
      <description>
        
          &lt;p&gt;&amp;lsquo;Experiment with &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/67276kc5.aspx&#34;&gt;Adaptive Control Behavior&lt;/a&gt;&amp;rsquo; has been an item on my TO-DO list for a very long time and this weekend i finally found some time to do exactly that. Because i hate it that a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.linkbutton.aspx&#34;&gt;LinkButton&lt;/a&gt; renders as &lt;!-- raw HTML omitted --&gt; i decided to develop a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.web.ui.adapters.controladapter.aspx&#34;&gt;ControlAdapter&lt;/a&gt; that makes the LinkButton work without JavaScript. While i was at it i also wrote adapters for the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.loginstatus(VS.80).aspx&#34;&gt;LoginStatus&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.login.aspx&#34;&gt;Login&lt;/a&gt; controls. Feel free to play with the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/AdaptiveRenderingDemo.zip&#34;&gt;Adaptive Rendering Demo&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Revisited the int and string ValueObject templates</title>
      <link>/post/2008-10-13-revisited-the-int-and-string-valueobject-templates/</link>
      <pubDate>Mon, 13 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-10-13-revisited-the-int-and-string-valueobject-templates/</guid>
      <description>
        
          &lt;p&gt;After reading &lt;a href=&#34;http://blogs.msdn.com/bclteam/archive/2008/10/06/the-compare-contract-kim-hamilton.aspx&#34;&gt;The Compare Contract&lt;/a&gt; last week i realized that my &lt;a href=&#34;http://www.timvw.be/presenting-templates-for-int-and-string-valueobjects&#34;&gt;templates for int and string ValueObjects&lt;/a&gt; did not comply with the contract so i decided to add a unittest that reproduces the faulty behavior (and then corrected the implementation)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestMethod]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldReturnPositiveWhenComparedWithNull()
{
	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;classname&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;classname&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;);
	Assert.IsTrue(&lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;.CompareTo(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Anyway, feel free to download the corrected &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/IntValueObject.zip&#34;&gt;IntValueObject&lt;/a&gt; and &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/StringValueObject.zip&#34;&gt;StringValueObject&lt;/a&gt; templates.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>The Best Damn Windows Server 2003 Book Period</title>
      <link>/post/2008-10-06-the-best-damn-windows-server-2003-book-period/</link>
      <pubDate>Mon, 06 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-10-06-the-best-damn-windows-server-2003-book-period/</guid>
      <description>
        
          &lt;p&gt;Last week i have read &lt;a href=&#34;http://www.amazon.com/Windows-Server-Period-Computer-Security/dp/1931836124&#34;&gt;The Best Damn Windows Server 2003 Book Period&lt;/a&gt;. Although the book contains some interesting guidance i became annoyed with the fact that the book is overloaded with screenshots. Without those screenshots this book would contain around 250 interesting pages.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Experimenting with NDepend</title>
      <link>/post/2008-09-27-experimenting-with-ndepend/</link>
      <pubDate>Sat, 27 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-27-experimenting-with-ndepend/</guid>
      <description>
        
          &lt;p&gt;Google Reader found 122 posts in my &lt;a href=&#34;http://www.timvw.be/wp-links-opml.php&#34;&gt;blogroll&lt;/a&gt; about &lt;a href=&#34;http://www.ndepend.com&#34;&gt;NDepend&lt;/a&gt; so i happily accepted the professional license which &lt;a href=&#34;http://codebetter.com/blogs/patricksmacchia/&#34;&gt;Patrick Smacchia&lt;/a&gt; (thank you) offered me earlier this week. I quickly picked the assemblies from a project that has evolved over more than 5 years (.NET 1.0, 1.1 and 2.0) and the tool generated a screen loaded with data, but i found it difficult to extract any valuable information out of the statistics. Although i found zooming in the UI impressive, i was a bit disappointed.&lt;/p&gt;
&lt;p&gt;Today i decided to start with something more sensible and created an NDepend project for the &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt; solution. In order to add the code coverage results i first had to export them from visual studio. And then i let the analyzer do it&amp;rsquo;s job. In the results of the default &lt;a href=&#34;http://www.ndepend.com/CQL.htm&#34;&gt;CQL&lt;/a&gt; queries i found that the DateTimeHelper class was stateless, and thus could be turned into a static class. I also noticed the warning that the UnixEpoch field was public. After giving it a bit of thought i decided to leave the field public, but make it readonly. Although i have only used the tool for only an hour or so, it has already proven it&amp;rsquo;s usefulness. More experimentation is definitely required.&lt;/p&gt;
&lt;p&gt;I will finish with a couple of feature requests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automate the import of code coverage results generated by Visual Studio.&lt;/li&gt;
&lt;li&gt;Use the default browser instead of launching Internet Explorer.&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>.NET System Management Services</title>
      <link>/post/2008-09-26-net-system-management-services/</link>
      <pubDate>Fri, 26 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-26-net-system-management-services/</guid>
      <description>
        
          &lt;p&gt;Earlier this week i finished reading &lt;a href=&#34;http://www.amazon.com/System-Management-Services-Alexander-Golomshtok/dp/1590590589&#34;&gt;.NET System Management Services&lt;/a&gt;. Although the book was published back in 2003, it still contains a lot of useful information on using the classes in the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.management.aspx&#34;&gt;System.Management&lt;/a&gt; namespace. I did not like the fact that the author really made the effort to explain each line of code in the book. On the other hand, the book contains a lot of useful tips that help with writing &lt;a href=&#34;http://en.wikipedia.org/wiki/Windows_Management_Instrumentation&#34;&gt;WMI&lt;/a&gt; queries, generating managed classes around WMI classes (and objects) and even applications that query &lt;a href=&#34;http://nl.wikipedia.org/wiki/Simple_Network_Management_Protocol&#34;&gt;SNMP&lt;/a&gt; via WMI. All in all, i can recommend the book if you are going to use the System.Management API.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting templates for int and string ValueObjects</title>
      <link>/post/2008-09-26-presenting-templates-for-int-and-string-valueobjects/</link>
      <pubDate>Fri, 26 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-26-presenting-templates-for-int-and-string-valueobjects/</guid>
      <description>
        
          &lt;p&gt;Most &lt;a href=&#34;http://domaindrivendesign.org/discussion/messageboardarchive/ValueObjects.html&#34;&gt;ValueObjects&lt;/a&gt; that i have implemented were wrappers around an int or a string. Apart from the domain specific rules, there is a lot of repetitive work in implementing operator overloads, IEquatable&lt;!-- raw HTML omitted --&gt;, IComparable&lt;!-- raw HTML omitted --&gt;, &amp;hellip; Thus i decided to create a couple of Item templates that generate this code (and related tests).&lt;/p&gt;
&lt;p&gt;Simply save &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/IntValueObject.zip&#34;&gt;IntValueObject.zip&lt;/a&gt; and &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/StringValueObject.zip&#34;&gt;StringValueObject.zip&lt;/a&gt; under %My Documents%\Visual Studio 2005\Templates\ItemTemplates and click on &amp;ldquo;Add New Item&amp;rdquo; in your project:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/template_add_new_item.gif&#34; alt=&#34;screenshot of add new item dialog in visual studio&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add the bottom of the dialog you can choose one of the templates:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/template_my_templates.gif&#34; alt=&#34;screenshot of add new item dialog in visual studio&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is the result of adding an &lt;a href=&#34;http://en.wikipedia.org/wiki/International_Standard_Book_Number&#34;&gt;International Standard Book Number&lt;/a&gt; class:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/template_isbn.gif&#34; alt=&#34;screenshot of generated artificates for isbn&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Why MockRepository does not implement IDisposable</title>
      <link>/post/2008-09-26-why-mockrepository-does-not-implement-idisposable/</link>
      <pubDate>Fri, 26 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-26-why-mockrepository-does-not-implement-idisposable/</guid>
      <description>
        
          &lt;p&gt;Earlier this week i was experimenting with &lt;a href=&#34;http://ayende.com/projects/rhino-mocks.aspx&#34;&gt;Rhino Mocks&lt;/a&gt; and i was wondering why the MockRepository does not implement &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.idisposable.aspx&#34;&gt;IDisposable&lt;/a&gt; unlike most other mocking frameworks for .NET&lt;!-- raw HTML omitted --&gt;. After a bit of searching i found out that (&lt;a href=&#34;http://groups.google.com/group/RhinoMocks/browse_thread/thread/c1a89f58d512d03e/48ca85746276c97b?lnk=gst&amp;amp;q=idisposable+mockrepository&amp;amp;pli=1&#34;&gt;here&lt;/a&gt;) originally the MockRepository did implement the interface, but that the implementation was removed because it is can be painful (hiding the original exception) when unexpected exceptions are thrown.&lt;/p&gt;
&lt;p&gt;I really like the API. Here is a simple example and notice that i did not have to provide the method name (as in the string &amp;ldquo;GetTime&amp;rdquo;) for the excepted calls.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestClass]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WhenTestingApplicabilityOfContract&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; MockRepository repository;
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[TestInitialize]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BeforeEachMethod()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.repository = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MockRepository();
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[TestCleanup]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AfterEachMethod()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.repository.VerifyAll();
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[TestMethod]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldReturnTrueWhenTimeInPeriodOfContract()
	{
		ITimeProvider provider = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.repository.StrictMock&amp;lt;itimeProvider&amp;gt;();

		using(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.repository.Record())
		{
			Expect.Call(provider.GetTime()).Return(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;));
			Expect.Call(provider.GetTime()).Return(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2008&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;));
			Expect.Call(provider.GetTime()).Return(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2009&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;));
		}

		using(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.repository.Playback())
		{
			Contract contract = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Contract(provider, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2008&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2008&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;));

			Assert.IsFalse(contract.IsApplicable(), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not applicablein 2007&amp;#34;&lt;/span&gt;);
			Assert.IsTrue(contract.IsApplicable(), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;applicable in 2008&amp;#34;&lt;/span&gt;);
			Assert.IsFalse(contract.IsApplicable(), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not applicable in 2009&amp;#34;&lt;/span&gt;);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Refactoring ApplicationEnvironment</title>
      <link>/post/2008-09-23-refactoring-applicationenvironment/</link>
      <pubDate>Tue, 23 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-23-refactoring-applicationenvironment/</guid>
      <description>
        
          &lt;p&gt;Yesterday i blogged about an &lt;a href=&#34;http://www.timvw.be/presenting-applicationenvironment/&#34;&gt;ApplicationEnvironment&lt;/a&gt; which had a dependency on the application configuration file. With my &lt;a href=&#34;http://www.timvw.be/presenting-configurationfilesession/&#34;&gt;ConfigurationFileSession&lt;/a&gt; i was able to test the implementation despite that dependency. Today i modified the design a little so that i do not require the ConfigurationFileSession hack anymore.&lt;/p&gt;
&lt;p&gt;First i added an internal constructor as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; ApplicationEnvironment(DateTime instanceEpoch, DateTime applicationEpoch)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.instanceEpoch = instanceEpoch;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.applicationEpoch = applicationEpoch;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then i made the internals visible to the test project&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[assembly: InternalsVisibleTo(&amp;#34;Be.Timvw.Framework.Domain.Tests&amp;#34;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And finally i added a base class that takes care of the initialization and clean up as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestInitialize]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; TestInitialize()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.original = ApplicationEnvironment.Instance;
	ApplicationEnvironment.Instance = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ApplicationEnvironment(DateTime.UtcNow, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1998&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;));
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestCleanup]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; TestCleanUp()
{
	ApplicationEnvironment.Instance = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.original;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Refactoring EffectivityManager</title>
      <link>/post/2008-09-23-refactoring-effectivitymanager/</link>
      <pubDate>Tue, 23 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-23-refactoring-effectivitymanager/</guid>
      <description>
        
          &lt;p&gt;A while ago i presented the &lt;a href=&#34;http://www.timvw.be/presenting-a-generic-effectivitymanager/&#34;&gt;EffectivityManager&lt;/a&gt;. Having used this class for a while i have decided to rename it to Temporal&lt;!-- raw HTML omitted --&gt;. The implementation of IList&lt;!-- raw HTML omitted --&gt; is not required anymore because a user is typically only interested in a specific effectivity, not the evolution of the effectivities.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; ITemporal&amp;lt;T&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Modify(T element, DateTime &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;);
	IEffectivity&amp;lt;T&amp;gt; GetSnapshot(DateTime validityDate);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; TryGetSnapshot(DateTime validityDate, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; IEffectivity&amp;lt;T&amp;gt; effectivity);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the implementation i have added a constructor that accepts a &lt;a href=&#34;http://www.timvw.be/presenting-a-generic-discreterange/&#34;&gt;DiscreteValuesGenerator&lt;!-- raw HTML omitted --&gt;&lt;/a&gt; which makes it possible to create Periods with a resolution of a day instead of seconds.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting ApplicationEnvironment</title>
      <link>/post/2008-09-22-presenting-applicationenvironment/</link>
      <pubDate>Mon, 22 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-22-presenting-applicationenvironment/</guid>
      <description>
        
          &lt;p&gt;Imagine we are an ice cream vendor. During summer months our available capacity is twice as high as in the rest of the year. In code this problem looks like the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; AvailableCapacity
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;
	{
		DateTime now = DateTime.UtcNow;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(now.Year, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &amp;lt;= now &amp;amp;&amp;amp; now &amp;lt;= &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(now.Year, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;; } 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;; } 
	} 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code is pretty difficult to test because it depends on DateTime.UtcNow. In order to get control over that dependency i have defined an ApplicationEnvironment and rewritten the code as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; AvailableCapacity
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;
	{
		DateTime now = ApplicationEnvironment.Instance.CurrentDateTime;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(now.Year, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &amp;lt;= now &amp;amp;&amp;amp; now &amp;lt;= &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(now.Year, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;; } 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;; } 
	} 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now i can use my &lt;a href=&#34;http://www.timvw.be/presenting-configurationfilesession/&#34;&gt;ConfigurationFileSession&lt;/a&gt; to test this code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestMethod]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldReturn10000InSummer()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConfigurationFileSession(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Summer.config&amp;#34;&lt;/span&gt;))
	{
		ApplicationEnvironment.Instance.Refresh();
		Assert.AreEqual(&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IceCreamPlant().AvailableCapacity);
	}
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestMethod]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldReturn5000InWinter()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConfigurationFileSession(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Winter.config&amp;#34;&lt;/span&gt;))
	{
		ApplicationEnvironment.Instance.Refresh();
		Assert.AreEqual(&lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IceCreamPlant().AvailableCapacity);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Presenting ConfigurationFileSession</title>
      <link>/post/2008-09-22-presenting-configurationfilesession/</link>
      <pubDate>Mon, 22 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-22-presenting-configurationfilesession/</guid>
      <description>
        
          &lt;p&gt;Here is a little class that allows you to use different configuration files. I find it extremely useful for tests where i want to mock the values that would be retrieved via the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.configuration.configurationmanager.aspx&#34;&gt;ConfigurationManager&lt;/a&gt;. Here are a couple of examples how it can be used&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestMethod]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldUseSystemTimeWhenNoValuesAreProvided()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConfigurationFileSession(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WithoutDateTimeManipulation.config&amp;#34;&lt;/span&gt;))
	{
		ApplicationEnvironment.Instance.Refresh();

		DateTime now = DateTime.UtcNow;
		TimeSpan allowedDifference = TimeSpan.FromSeconds(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
		TimeSpan actualDifference = ApplicationEnvironment.Instance.CurrentDateTime -- configurationNow;
		Assert.IsTrue(actualDifference &amp;lt; allowedDifference); 
	} 
} 
&lt;span style=&#34;color:#a6e22e&#34;&gt;		
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestMethod]&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ShouldUseValuesAsProvided() 
{ 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConfigurationFileSession(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WithDateTimeManipulation.config&amp;#34;&lt;/span&gt;)) 
	{ 
		ApplicationEnvironment.Instance.Refresh(); 
		DateTime now = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); 
		TimeSpan allowedDifference = TimeSpan.FromSeconds(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); 
		TimeSpan actualDifference = ApplicationEnvironment.Instance.CurrentDateTime - configurationNow; 
		Assert.IsTrue(actualDifference &amp;lt; allowedDifference); 
	} 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to download the code from &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Visual Studio 2008 (SP1) crashes when opening ViewPage in designer</title>
      <link>/post/2008-09-16-visual-studio-2008-sp1-crashes-when-opening-viewpage-in-designer/</link>
      <pubDate>Tue, 16 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-16-visual-studio-2008-sp1-crashes-when-opening-viewpage-in-designer/</guid>
      <description>
        
          &lt;p&gt;Visual Studio 2008 (SP1) crashed every time i tried to open a ViewPage with the Web Form Editor (designer). Kudos go to eniac who &lt;a href=&#34;http://haacked.com/archive/2008/09/05/mvcfutures-and-asp.net-mvc-beta.aspx&#34;&gt;suggested&lt;/a&gt; the removal of the &lt;a href=&#34;http://code.msdn.microsoft.com/PowerCommands&#34;&gt;Power Commands&lt;/a&gt; add-in. This made the crashes disappear.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting a couple of custom MarkupExtensions</title>
      <link>/post/2008-09-10-playing-with-xaml/</link>
      <pubDate>Wed, 10 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-10-playing-with-xaml/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Xaml&#34;&gt;XAML&lt;/a&gt; provides us a way to declare objects with xml. Because i don&amp;rsquo;t want to clutter my domain classes with attributes like &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.componentmodel.typeconverterattribute.aspx&#34;&gt;TypeConverterAttribute&lt;/a&gt;, i needed a different approach to manipulate the parsing. This is where custom &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.windows.markup.markupextension.aspx&#34;&gt;MarkupExtension&lt;/a&gt;s come to the rescue. Here is an example where i use the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms752340.aspx&#34;&gt;x:Array MarkupExtension&lt;/a&gt; in order to load a list of Lines into my IList&lt;!-- raw HTML omitted --&gt; Lines property&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34; ?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;d:Address&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:x=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:s=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clr-namespace:System;assembly=mscorlib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:d=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clr-namespace:XamlDemo.Domain;assembly=XamlDemo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:e=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clr-namespace:XamlDemo.Infrastructure.Extensions;assembly=XamlDemo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;d:Address.Lines&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;x:Array&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s:String&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;s:String&amp;gt;&lt;/span&gt;Ikaroslaan 21&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/s:String&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;s:String&amp;gt;&lt;/span&gt;B-1930 Zaventem&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/s:String&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/x:Array&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/d:Address.Lines&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/d:Address&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default all XAML documents have all the data embedded. Sometimes this is undesirable so i decided to define External and ExternalList MarkupExtensions that allow us to specify that the resource is elsewhere available. Here is an example of Jeff who has one address in a different file, Domain\Address\Leuven\Brusselsestraat_400.xaml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34; ?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;d:Person&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:x=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:s=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clr-namespace:System;assembly=mscorlib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:d=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clr-namespace:XamlDemo.Domain;assembly=XamlDemo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:e=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clr-namespace:XamlDemo.Infrastructure.Extensions;assembly=XamlDemo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Birthday=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{e:DateTime 14/10/1972}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;d:Person.Addresses&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;e:ExternalList&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XamlDemo.Domain.Address&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;e:ExternalList.Resources&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;x:Array&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s:String&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
					&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;s:String&amp;gt;&lt;/span&gt;Domain.Address.Leuven.Brusselsestraat_400&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/s:String&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/x:Array&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/e:ExternalList.Resources&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/e:ExternalList&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/d:Person.Addresses&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/d:Person&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is also possible to have multiple redirections. Here is an example of Tim who has two addresses defined in Domain\Address\ForPerson\Tim.xaml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34; ?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;d:Person&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:x=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:s=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clr-namespace:System;assembly=mscorlib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:d=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clr-namespace:XamlDemo.Domain;assembly=XamlDemo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:e=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clr-namespace:XamlDemo.Infrastructure.Extensions;assembly=XamlDemo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tim&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Birthday=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{e:DateTime 30/04/1980}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;d:Person.Addresses&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;e:External&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XamlDemo.Domain.Address&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Resource=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Domain.Address.ForPerson.Tim&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/d:Person.Addresses&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/d:Person&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is the definition for Domain\Address\ForPerson\Tim.xaml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34; ?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;e:ExternalList&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:x=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:s=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clr-namespace:System;assembly=mscorlib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:d=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clr-namespace:XamlDemo.Domain;assembly=XamlDemo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:e=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clr-namespace:XamlDemo.Infrastructure.Extensions;assembly=XamlDemo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XamlDemo.Domain.Address&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;e:ExternalList.Resources&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;x:Array&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s:String&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;s:String&amp;gt;&lt;/span&gt;Domain.Address.Leuven.Bondgenotenlaan_14&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/s:String&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;s:String&amp;gt;&lt;/span&gt;Domain.Address.Zaventem.Ikaroslaan_21&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/s:String&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/x:Array&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/e:ExternalList.Resources&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/e:ExternalList&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Anyway, feel free to download the sample application, &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/XamlDemo.zip&#34;&gt;XamlDemo.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Distributed Data Applications with ASP.NET, Second Edition</title>
      <link>/post/2008-09-06-distributed-data-applications-with-aspnet-second-edition/</link>
      <pubDate>Sat, 06 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-06-distributed-data-applications-with-aspnet-second-edition/</guid>
      <description>
        
          &lt;p&gt;Last week i finally got round to reading &lt;a href=&#34;http://www.amazon.com/gp/product/1590593189/&#34;&gt;Distributed Data Applications with ASP.NET, Second Edition&lt;/a&gt;. The book was written in 2004 and handles technologies like &lt;a href=&#34;http://en.wikipedia.org/wiki/HTML_Application&#34;&gt;HTML Applications&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/XMLHttpRequest&#34;&gt;XMLHttpRequest&lt;/a&gt;. Although the book is loaded with code, it also contains plenty of reasoning behind the choice of one approach over another which made me appreciate the book. Definitely worth the 1.5 euros i paid for it.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>More on choosing names for tests</title>
      <link>/post/2008-09-06-more-on-choosing-names-for-tests/</link>
      <pubDate>Sat, 06 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-06-more-on-choosing-names-for-tests/</guid>
      <description>
        
          &lt;p&gt;Choosing names with the &lt;a href=&#34;http://www.timvw.be/experimenting-with-naming-conventions-for-unit-tests/&#34;&gt;technique i presented yesterday&lt;/a&gt; leads to at least one class per method. To tackle that explosion of classes i have made two decisions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a folder for each tested class, this way all the When&lt;!-- raw HTML omitted --&gt;ing classes are grouped.&lt;/li&gt;
&lt;li&gt;Create a single WhenUsing&lt;!-- raw HTML omitted --&gt; class to group simple test methods.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is a screenshot to clarify the changes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/unittest_naming_conventions2.gif&#34; alt=&#34;screenshot of visual studio displaying new approach for test naming&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting WindowsIdentityHelper</title>
      <link>/post/2008-09-06-presenting-windowsidentityhelper/</link>
      <pubDate>Sat, 06 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-06-presenting-windowsidentityhelper/</guid>
      <description>
        
          &lt;p&gt;One of the difficulties of using the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.security.principal.windowsidentity.aspx&#34;&gt;WindowsIdentity&lt;/a&gt; class is the fact that it requires a handle (&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.intptr.aspx&#34;&gt;IntPtr&lt;/a&gt;) to a Windows Security Token. Using the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa378184(VS.85).aspx&#34;&gt;LogonUser&lt;/a&gt; functionality we can get a hold of such a handle&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[DllImport(Advapi32File, CharSet = DefaultCharSet, SetLastError = DefaultSetLastError)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; LogonUser( &lt;span style=&#34;color:#75715e&#34;&gt;/* other parameters */&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; IntPtr userTokenHandle);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The easiest way to avoid memory leaks is to implement a custom &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.safehandle.aspx&#34;&gt;SafeHandle&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SafeTokenHandle&lt;/span&gt; : SafeHandleZeroOrMinusOneIsInvalid
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; SafeTokenHandle()
	: &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
	{
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; ReleaseHandle()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(!&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.IsInvalid)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NativeMethods.CloseHandle(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.handle);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With that SafeHandle in place we can change the signature to&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[DllImport(Advapi32File, CharSet = DefaultCharSet, SetLastError = DefaultSetLastError)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; LogonUser( &lt;span style=&#34;color:#75715e&#34;&gt;/* other parameters */&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; SafeTokenHandle userTokenHandle);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the Be.Timvw.Framework.Security.Principal.WindowsIdentityHelper we can now easily obtain a WindowsIdentity and use it to do some impersonation&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;using(WindowsIdentityHelper windowsIdentityHelper = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WindowsIdentityHelper(username, domain, password))
using(windowsIdentityHelper.GetWindowsIdentity().Impersonate())
{
	File.WriteAllText(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;c:\temp\blah.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello there&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Experimenting with naming conventions for unit tests</title>
      <link>/post/2008-09-05-experimenting-with-naming-conventions-for-unit-tests/</link>
      <pubDate>Fri, 05 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-05-experimenting-with-naming-conventions-for-unit-tests/</guid>
      <description>
        
          &lt;p&gt;To be honest, i never really took the time to think about the names of my unit tests. Although i noticed posts like &lt;a href=&#34;http://codebetter.com/blogs/david_laribee/archive/2007/12/17/approaching-bdd.aspx&#34;&gt;this one&lt;/a&gt; and &lt;a href=&#34;http://elegantcode.com/2008/05/01/thanks-to-bdd/&#34;&gt;this one&lt;/a&gt; they never inspired me to think about it. Earlier this week, &lt;a href=&#34;http://www.goeleven.com&#34;&gt;Yves Goeleven&lt;/a&gt; demonstrated the power of using &lt;a href=&#34;http://en.wikipedia.org/wiki/Behavior_driven_development&#34;&gt;BDD&lt;/a&gt; inspired naming conventions and i was immediately sold. I applied the style on a couple of tests in &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt; and i must say that i like the resulting tests:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/unittest_naming_conventions.gif&#34; alt=&#34;result of applying bdd-style naming conventions on unittests&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>The Microsoft Certified Professional Developer: Enterprise Applications Developer on Visual Studio 2005</title>
      <link>/post/2008-09-05-the-microsoft-certified-professional-developer-enterprise-applications-developer-on-visual-studio-2005/</link>
      <pubDate>Fri, 05 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-05-the-microsoft-certified-professional-developer-enterprise-applications-developer-on-visual-studio-2005/</guid>
      <description>
        
          &lt;p&gt;Not that anyone should care, apart from my manager, i &lt;a href=&#34;http://www.timvw.be/mcts/&#34;&gt;posted&lt;/a&gt; that the only remaining exam was &lt;a href=&#34;http://www.microsoft.com/learning/en/us/exams/70-549.mspx&#34;&gt;070-549&lt;/a&gt; PRO: Designing and Developing Enterprise Applications by Using the Microsoft .NET Framework a while ago. And this morning i passed that exam 🙂 This means that i have earned the &amp;ldquo;&lt;a href=&#34;http://www.microsoft.com/learning/mcp/mcpd/entapp/default.mspx&#34;&gt;MCPD: Enterprise Applications Developer&lt;/a&gt;&amp;rdquo; certificate that demonstrates that i have the comprehensive skills required to build n-tier solutions that target both Web and client user experiences.&lt;/p&gt;
&lt;p&gt;At this moment i am quite involved in a couple of projects using WCF and WF thus it is quite possible that i decide to take the upgrade path to &lt;a href=&#34;http://www.microsoft.com/learning/mcp/mcpd/vstudio/2008/default.mspx&#34;&gt;MCPD: Enterprise Applications Developer 3.5&lt;/a&gt; later on this year.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting AssemblyTypePicker</title>
      <link>/post/2008-09-01-presenting-assemblytypepicker/</link>
      <pubDate>Mon, 01 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-01-presenting-assemblytypepicker/</guid>
      <description>
        
          &lt;p&gt;I really like the way the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/exy1facf(VS.80).aspx&#34;&gt;Object Browser&lt;/a&gt; makes the types in an assembly visible. Because i have a couple of programs that require a given type as input, i have decided to add a TypeTree control to &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt; that mimicks the Object Browser. Here are a couple of screenshots of the control in a demo application that allows the user to generate interfaces and wrapper classes based on a selected type:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/codegenerator_01.gif&#34; alt=&#34;screenshot of assemblytypepicker with no values&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/codegenerator_02.gif&#34; alt=&#34;screenshot of dialog that requests the user to pick an assembly file&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/codegenerator_03.gif&#34; alt=&#34;screenshot of dialog that requests the user to pick a type in the previously selected assembly&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/CodeGenerator.zip&#34;&gt;CodeGenerator.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting EventHandlerHelper</title>
      <link>/post/2008-09-01-presenting-eventhandlerhelper/</link>
      <pubDate>Mon, 01 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-01-presenting-eventhandlerhelper/</guid>
      <description>
        
          &lt;p&gt;Being bored of writing code to raise an event, i have added an EventHandlerHelper to &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EventHandlerHelper&lt;/span&gt;
{
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[MethodImpl(MethodImplOptions.NoInlining)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Raise&amp;lt;T&amp;gt;(EventHandler&amp;lt;T&amp;gt; handler, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, T e) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; T : EventArgs
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (handler != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
		{
			handler(sender, e);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Presenting ItemEventArgs&lt;T&gt;</title>
      <link>/post/2008-09-01-presenting-itemeventargst/</link>
      <pubDate>Mon, 01 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-09-01-presenting-itemeventargst/</guid>
      <description>
        
          &lt;p&gt;Because i believe in the &lt;a href=&#34;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY&lt;/a&gt; principle i decided to add a generic ItemEventArgs class to &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ItemEventArgs&lt;/span&gt;&amp;lt;T&amp;gt; : EventArgs
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; T item;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ItemEventArgs(T item)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.item = item;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; T Item
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.item; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.item = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Presenting OneTimePasswordMembershipProvider</title>
      <link>/post/2008-08-29-presenting-onetimepasswordmembershipprovider/</link>
      <pubDate>Fri, 29 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-29-presenting-onetimepasswordmembershipprovider/</guid>
      <description>
        
          &lt;p&gt;What good is a &lt;a href=&#34;http://www.timvw.be/presenting-timeotpclient/&#34;&gt;TimeOTP&lt;/a&gt; client if you don&amp;rsquo;t have anything to use it with? Last week i have implemented a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.web.security.membershipprovider.aspx&#34;&gt;MembershipProvider&lt;/a&gt; that uses &lt;a href=&#34;http://www.timvw.be/presenting-hmac-based-otp-and-time-based-otp/&#34;&gt;Time-based One-Time Password&lt;/a&gt; to validate the user credentials. Basically, it is a wrapper around an existing MembershipProvider, you get to choose which one via the providerType attribute in the configuration, and requires that it can access the password of users. Here is an example configuration that relies on the SqlMembershipProvider&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;connectionStrings&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;add&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MyDatabase&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connectionString=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xxxxx&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;providerName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System.Data.SqlClient&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/connectionStrings&amp;gt;&lt;/span&gt;
	
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;system.web&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;membership&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;defaultProvider=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OTPMembershipProvider&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;providers&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;add&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connectionStringName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MyDatabase&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enablePasswordRetrieval=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enablePasswordReset=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;requiresQuestionAndAnswer=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;applicationName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/DemoOTP&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;requiresUniqueEmail=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;passwordFormat=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clear&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxInvalidPasswordAttempts=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minRequiredPasswordLength=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minRequiredNonalphanumericCharacters=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;passwordAttemptWindow=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;passwordStrengthRegularExpression=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OTPMembershipProvider&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Be.Timvw.Framework.Web.Security.OneTimePasswordMembershipProvider, Be.Timvw.Framework.Web&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;providerType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System.Web.Security.SqlMembershipProvider, System.Web&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/providers&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/membership&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;authentication&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mode=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Forms&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;authorization&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;allow&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;users=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timvw&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;deny&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;users=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/authorization&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/system.web&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While i was writing unittests i ran into a couple of issues&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nmock.org/&#34;&gt;NMock&lt;/a&gt; seemingly only works with interfaces so i had to rip out an interface out of the abstract base class and wrap that in a MockMembershipProvider.&lt;/li&gt;
&lt;li&gt;Settings expectations for output parameters can be achieved with a SetNameParameterAction as described &lt;a href=&#34;http://www.pashabitz.com/PermaLink,guid,02e35fa6-c729-43a8-85c3-8c05df7a4aa8.aspx&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, you can find the implementation of the MembershipProvider in &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt; and &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DemoOTP.zip&#34;&gt;download the demo webapplication&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting TimeOTPClient</title>
      <link>/post/2008-08-23-presenting-timeotpclient/</link>
      <pubDate>Sat, 23 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-23-presenting-timeotpclient/</guid>
      <description>
        
          &lt;p&gt;Because most people have their java enabled mobile phone with them, and I did not want to buy an expensive token generator I decided to write a &lt;a href=&#34;http://en.wikipedia.org/wiki/MIDlet&#34;&gt;MIDlet&lt;/a&gt; that can generate passwords as specified in the &lt;a href=&#34;http://www.ietf.org/internet-drafts/draft-mraihi-totp-timebased-00.txt&#34;&gt;TOTP&lt;/a&gt; algorithm. This project is build with &lt;a href=&#34;http://java.sun.com/products/sjwtoolkit&#34;&gt;Sun Java Wireless Toolkit for CLDC&lt;/a&gt;. Feel free to download the sources, &lt;a href=&#34;http://www.timvw.be/wp-content/code/java/TimeOTPClient.zip&#34;&gt;TimeOTPClient.zip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/timeotpclient_inputsecret.gif&#34; alt=&#34;screenshot of TimeOTPClient input area&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/timeotpclient_generated.gif&#34; alt=&#34;screenshot of TimeOTPClient generated password area&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting HMAC-Based OTP and Time-Based OTP</title>
      <link>/post/2008-08-22-presenting-hmac-based-otp-and-time-based-otp/</link>
      <pubDate>Fri, 22 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-22-presenting-hmac-based-otp-and-time-based-otp/</guid>
      <description>
        
          &lt;p&gt;I could not find a .NET implementation of the HMAC-Based One Time Password (HOTP) algorithm as specified in &lt;a href=&#34;ftp://ftp.rfc-editor.org/in-notes/rfc4226.txt&#34;&gt;RFC4226&lt;/a&gt; so i decided to write one myself. Because the &lt;a href=&#34;http://www.ietf.org/internet-drafts/draft-mraihi-totp-timebased-00.txt&#34;&gt;Time-Based OTP (TOTP)&lt;/a&gt; algorithm is an application of HOTP, more specifically: TOTP = HOTP(K, T) with T = (Current Unix time &amp;ndash; T0) / Timestep, i have implemented that algorithm too.&lt;/p&gt;
&lt;p&gt;You can find both Be.Timvw.Framework.Security.HmacOneTimePassword and Be.Timvw.Framework.Security.TimeOneTimePassword in the &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt;. For more information about authentication i would recommend the &lt;a href=&#34;http://www.openauthentication.org/specifications&#34;&gt;specifications and technicals resources&lt;/a&gt; at the &lt;a href=&#34;http://www.openauthentication.org/&#34;&gt;OATH&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting TimeSpanHelper</title>
      <link>/post/2008-08-20-presenting-timespanhelper/</link>
      <pubDate>Wed, 20 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-20-presenting-timespanhelper/</guid>
      <description>
        
          &lt;p&gt;A &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.timespan.aspx&#34;&gt;TimeSpan&lt;/a&gt; is a structure that represents a time interval or a duration. To make the everything as clear as possible, a well designed system should not only know the quantity, but also the unit of that quantity. In order to create a TimeSpan that represents the right value, you will probably use one of the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.timespan_methods.aspx&#34;&gt;FromXXX (Hours, Days, Minutes, Seconds) methods&lt;/a&gt; as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; unit = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Day&amp;#34;&lt;/span&gt;;

TimeSpan actual;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (unit == &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Day&amp;#34;&lt;/span&gt;)
{
	actual = TimeSpan.FromDays(&lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (unit == &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hour&amp;#34;&lt;/span&gt;)
{
	actual = TimeSpan.FromHours(&lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;);
}
&lt;span style=&#34;color:#75715e&#34;&gt;// more else if statements...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After a while you get bored of writing that same if-else (or switch) construct and you end up wishing for something like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; unit = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Day&amp;#34;&lt;/span&gt;;

TimeUnit timeUnit = EnumHelper.Parse&amp;lt;timeUnit&amp;gt;(unit);
TimeSpan actual = TimeSpanHelper.Create(&lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;, timeUnit);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well, from now on you can find it in &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>.NET 2.0 Wrox Box: Professional ASP.NET 2.0, Professional C# 2005, Professional .NET 2.0 Generics, and Professional .NET Framework 2.0</title>
      <link>/post/2008-08-16-net-20-wrox-box-professional-aspnet-20-professional-c-2005-professional-net-20-generics-and-professional-net-framework-20/</link>
      <pubDate>Sat, 16 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-16-net-20-wrox-box-professional-aspnet-20-professional-c-2005-professional-net-20-generics-and-professional-net-framework-20/</guid>
      <description>
        
          &lt;p&gt;The books in the &lt;a href=&#34;http://www.amazon.com/NET-2-0-Wrox-Box-Professional/dp/0470048409&#34;&gt;.NET 2.0 Wrox Box: Professional ASP.NET 2.0, Professional C# 2005, Professional .NET 2.0 Generics, and Professional .NET Framework 2.0&lt;/a&gt; were the first books i bought as a .NET developer. I can recommend each and every book in that box.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>CLR via C#</title>
      <link>/post/2008-08-16-clr-via-c/</link>
      <pubDate>Sat, 16 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-16-clr-via-c/</guid>
      <description>
        
          &lt;p&gt;I find that &lt;a href=&#34;http://www.amazon.com/CLR-via-Second-Pro-Developer/dp/0735621632&#34;&gt;CLR via C#, Second Edition&lt;/a&gt; is another book that every .NET developer should read at least twice. (It&amp;rsquo;s sitting on my bookshelf waiting for that second reading.)&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Deploying .NET Applications: Learning MSBuild and ClickOnce</title>
      <link>/post/2008-08-16-deploying-net-applications-learning-msbuild-and-clickonce/</link>
      <pubDate>Sat, 16 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-16-deploying-net-applications-learning-msbuild-and-clickonce/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Deploying-NET-Applications-Learning-ClickOnce/dp/1590596528&#34;&gt;Deploying .NET Applications: Learning MSBuild and ClickOnce&lt;/a&gt; is a book that will help you grasp the core concepts of MSBuild. This book is a great headstart if you&amp;rsquo;re starting out with MSBuild and find the documentation confusing. The second part of the book, about clickonce, was less interesting. I&amp;rsquo;m still waiting for &lt;a href=&#34;http://www.sedodream.com/&#34;&gt;Sayed Ibrahim Hashimi&lt;/a&gt; to release a book that only convers MSBuild.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Domain-Driven Design: Tackling Complexity in the Heart of Software</title>
      <link>/post/2008-08-16-domain-driven-design-tackling-complexity-in-the-heart-of-software/</link>
      <pubDate>Sat, 16 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-16-domain-driven-design-tackling-complexity-in-the-heart-of-software/</guid>
      <description>
        
          &lt;p&gt;A couple of weeks ago i&amp;rsquo;ve re-read &lt;a href=&#34;http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&#34;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;. Just like &lt;a href=&#34;http://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional/dp/0201633612&#34;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt; and &lt;a href=&#34;http://www.amazon.com/Enterprise-Application-Architecture-Addison-Wesley-Signature/dp/0321127420&#34;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt; this is a book that i consider to b e required literature for every developer.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Foundations of WF: an Introduction to Windows Workflow Foundation</title>
      <link>/post/2008-08-16-foundations-of-wf-an-introduction-to-windows-workflow-foundation/</link>
      <pubDate>Sat, 16 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-16-foundations-of-wf-an-introduction-to-windows-workflow-foundation/</guid>
      <description>
        
          &lt;p&gt;Last month i found out that &lt;a href=&#34;http://www.amazon.com/Foundations-WF-Introduction-Workflow-Foundation/dp/1590597184&#34;&gt;Foundations of WF: an Introduction to Windows Workflow Foundation&lt;/a&gt; is a little book that does nothing more than guide you through visual studio wizards. Since i was expecting a book that would introduce me to the concepts and architectural decisions of wf i was disappointed. Not recommended.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Professional Visual Studio 2005 Team System</title>
      <link>/post/2008-08-16-professional-visual-studio-2005-team-system/</link>
      <pubDate>Sat, 16 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-16-professional-visual-studio-2005-team-system/</guid>
      <description>
        
          &lt;p&gt;I received my copy of &lt;a href=&#34;http://www.amazon.com/Professional-Visual-Studio-System-Programmer/dp/0764584367&#34;&gt;Professional Visual Studio 2005 Team System&lt;/a&gt; at a &lt;a href=&#34;http://www.visug.be&#34;&gt;Visug&lt;/a&gt; event but i can&amp;rsquo;t say that i found it really interesting. It is simply impossible to cover everything on Team System in one book.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Programming WCF Services</title>
      <link>/post/2008-08-16-programming-wcf-services/</link>
      <pubDate>Sat, 16 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-16-programming-wcf-services/</guid>
      <description>
        
          &lt;p&gt;Having seen Juval Loway deliver a session on WCF for the x-th time this year i found it was time to read &lt;a href=&#34;http://www.amazon.com/Programming-WCF-Services-Juval-Lowy/dp/0596526997&#34;&gt;Programming WCF Services&lt;/a&gt;. This book is a reference work loaded with architectural advice.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>The Art of Agile Development</title>
      <link>/post/2008-08-16-the-art-of-agile-development/</link>
      <pubDate>Sat, 16 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-16-the-art-of-agile-development/</guid>
      <description>
        
          &lt;p&gt;A couple of months ago i&amp;rsquo;ve read &lt;a href=&#34;http://www.amazon.com/Art-Agile-Development-James-Shore/dp/0596527675/ref=pd_bbs_sr_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1218864880&amp;amp;sr=1-1&#34;&gt;The Art of Agile Development&lt;/a&gt;. Like most books on agile, this book uses the &lt;a href=&#34;http://en.wikipedia.org/wiki/Extreme_programming&#34;&gt;XP&lt;/a&gt; methodology to provide guidance for agile development. I especially liked the last chapter, seek technical excellence, where the authors remind the reader that what ultimately matters is success and that the practices, principles and values are merely guides along the way.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>The never ending race</title>
      <link>/post/2008-08-16-the-never-ending-rac/</link>
      <pubDate>Sat, 16 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-16-the-never-ending-rac/</guid>
      <description>
        
          &lt;p&gt;You are probably wondering what all these short book reviews are all about. A little longer than two years ago i graduated and became a passionate .NET developer. During these two years i have learned quite a lot (only to find out that there is so much more out there that i know nothing about). Under &lt;a href=&#34;http://www.timvw.be/category/book-reviews/&#34;&gt;Book reviews&lt;/a&gt; you can find a list of books that have found a place on my bookshelf the last two years. Despite the reading of numerous e-books, articles and blog posts combined with a good portion of experiments i still have the feeling that i have got some catching up to do. Sigh. (Luckily enough i do realize that this is a feeling that will never go away when you have a job in information technology.)&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting UriHelper</title>
      <link>/post/2008-08-09-presenting-urihelper/</link>
      <pubDate>Sat, 09 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-09-presenting-urihelper/</guid>
      <description>
        
          &lt;p&gt;Adding parameters to an &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.uri.aspx&#34;&gt;Uri&lt;/a&gt; is an example where my &lt;a href=&#34;http://www.timvw.be/presenting-namevaluecollectionhelper/&#34;&gt;NameValueCollectionHelper&lt;/a&gt; comes in handy. Although &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.uritemplate.aspx&#34;&gt;UriTemplate&lt;/a&gt; allows us to bind parameters, it doesn&amp;rsquo;t really support add/remove/fail on duplicate parameters. Here is an example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestMethod]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; TestAddParametersReplaceWithReplaceOfExistingParameters()
{
	Uri originalUri = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.example.com/path/?key1=val1&amp;amp;key2=val2#abcd&amp;#34;&lt;/span&gt;)

	NameValueCollection parameters = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NameValueCollection();
	parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;newval&amp;#34;&lt;/span&gt;);
	parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;val3&amp;#34;&lt;/span&gt;);

	Uri expected = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.example.com/path/?key1=newval&amp;amp;key2=val2&amp;amp;key3=val3#abcd&amp;#34;&lt;/span&gt;);

	Uri actual = UriHelper.AddParameters(originalUri, parameters, DuplicateKeyBehavior.Replace);
	Assert.AreEqual(expected, actual);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once again, source of this class can be found at &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Pro ASP.NET 2.0 Website Programming</title>
      <link>/post/2008-08-09-pro-aspnet-20-website-programming/</link>
      <pubDate>Sat, 09 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-09-pro-aspnet-20-website-programming/</guid>
      <description>
        
          &lt;p&gt;A couple of weeks ago i&amp;rsquo;ve read &lt;a href=&#34;http://www.amazon.com/Pro-ASP-NET-2-0-Website-Programming/dp/1590595467&#34;&gt;Pro ASP.NET 2.0 Website Programming&lt;/a&gt;. The book contains a couple of nice ideas. I really appreciated the recommendation to use parameter binding when you manually compose queries. My biggest disappointment lies in the fact that the book doesn&amp;rsquo;t practice what it preaches. Many code samples use a stringbuilder to generate sql queriers 🙁&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting NameValueCollectionHelper</title>
      <link>/post/2008-08-08-presenting-namevaluecollectionhelper/</link>
      <pubDate>Fri, 08 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-08-presenting-namevaluecollectionhelper/</guid>
      <description>
        
          &lt;p&gt;Here are a couple functions that i find extremely useful when i&amp;rsquo;m working with a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.collections.specialized.namevaluecollection.aspx&#34;&gt;NameValueCollection&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NameValueCollectionHelper&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AddOrIgnoreOnDuplicateKey(NameValueCollection collection, NameValueCollection nameValuesToAdd);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AddOrReplaceOnDuplicateKey(NameValueCollection collection, NameValueCollection nameValuesToAdd);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AddOrCombineOnDuplicateKey(NameValueCollection collection, NameValueCollection nameValuesToAdd);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AddOrFailOnDuplicateKey(NameValueCollection collection, NameValueCollection nameValuesToAdd);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All these methods provide a specific scenario of the more generic Add operation&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NameValueCollectionHelper&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Dictionary&amp;lt;duplicateKeyBehavior, Action&amp;lt;nameValueCollection, NameValueCollection&amp;gt;&amp;gt; duplicateKeyBehaviors;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; NameValueCollectionHelper()
	{
		duplicateKeyBehaviors = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;duplicateKeyBehavior, Action&amp;lt;nameValueCollection, NameValueCollection&amp;gt;&amp;gt;();
		duplicateKeyBehaviors.Add(DuplicateKeyBehavior.Ignore, NameValueCollectionHelper.AddOrIgnoreOnDuplicateKey);
		duplicateKeyBehaviors.Add(DuplicateKeyBehavior.Replace, NameValueCollectionHelper.AddOrReplaceOnDuplicateKey);
		duplicateKeyBehaviors.Add(DuplicateKeyBehavior.Combine, NameValueCollectionHelper.AddOrCombineOnDuplicateKey);
		duplicateKeyBehaviors.Add(DuplicateKeyBehavior.Fail, NameValueCollectionHelper.AddOrFailOnDuplicateKey);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Add(NameValueCollection collection, NameValueCollection nameValuesToAdd, DuplicateKeyBehavior duplicateKeyBehavior)
	{
		duplicateKeyBehaviors[duplicateKeyBehavior](collection, nameValuesToAdd);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should already know that the source is available at &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting EnumerableHelper</title>
      <link>/post/2008-08-06-presenting-enumerablehelper/</link>
      <pubDate>Wed, 06 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-06-presenting-enumerablehelper/</guid>
      <description>
        
          &lt;p&gt;I noticed (eg: &lt;a href=&#34;http://derek-says.blogspot.com/2008/08/generic-collections-and-inheritance.html&#34;&gt;here&lt;/a&gt;) that i&amp;rsquo;m not the only one that has experienced some annoyances when working with generics. Here are a couple of methods that i find extremely helpful when i&amp;rsquo;m working with &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/9eekhta0.aspx&#34;&gt;IEnumerable&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;IEnumerable&amp;lt;tbase&amp;gt; Convert&amp;lt;tderived, TBase&amp;gt;(IEnumerable&amp;lt;tderived&amp;gt; enumerable) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; TDerived : TBase;
IEnumerable&amp;lt;t&amp;gt; Convert&amp;lt;t&amp;gt;(IEnumerable enumerable);
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; HaveSameElements&amp;lt;t&amp;gt;(IEnumerable&amp;lt;t&amp;gt; enumerable1, IEnumerable&amp;lt;t&amp;gt; enumerable2, Func&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;, T, T&amp;gt; areEqual);
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; HaveSameElements(IEnumerable enumerable1, IEnumerable enumerable2, Func&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;&amp;gt; areEqual);
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; HaveSameElements(IEnumerable enumerable1, IEnumerable enumerable2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can download the actual implementation of this Be.Timvw.Framework.Collections.Generic.EnumerableHelper class in &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries</title>
      <link>/post/2008-08-04-framework-design-guidelines-conventions-idioms-and-patterns-for-reusable-net-libraries/</link>
      <pubDate>Mon, 04 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-04-framework-design-guidelines-conventions-idioms-and-patterns-for-reusable-net-libraries/</guid>
      <description>
        
          &lt;p&gt;I finally found some time to read &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321246756&#34;&gt;Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries&lt;/a&gt; this week. The book is loaded with annotations for the do and do not lists that this book contains. There is almost no code&amp;hellip; I&amp;rsquo;m looking forward to the &lt;a href=&#34;http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321545613/ref=sr_1_2?ie=UTF8&amp;amp;s=books&amp;amp;qid=1217864039&amp;amp;sr=1-2&#34;&gt;second edition&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting the SortableBindingList&lt;T&gt; (take two)</title>
      <link>/post/2008-08-02-presenting-the-sortablebindinglistt-take-two/</link>
      <pubDate>Sat, 02 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-08-02-presenting-the-sortablebindinglistt-take-two/</guid>
      <description>
        
          &lt;p&gt;I&amp;rsquo;m in the progress of adding classes that i find interesting to the &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt; project. The original implementation of my &lt;a href=&#34;http://www.timvw.be/presenting-the-sortablebindinglistt/&#34;&gt;SortableBindingList&lt;!-- raw HTML omitted --&gt;&lt;/a&gt; relied on &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.icomparable.aspx&#34;&gt;IComparable&lt;/a&gt; to implement ApplySortCore(PropertyDescriptor property, ListSortDirection direction). I received some good feedback and &lt;a href=&#34;http://www.timvw.be/improvements-for-the-sortablebindinglist-and-typedlist/&#34;&gt;blogged about those improvements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Because some of my classes only implement &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/4d7sx9hd.aspx&#34;&gt;IComparable&lt;!-- raw HTML omitted --&gt;&lt;/a&gt; i needed support for this too. My first thought was to use Comparer&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;IComparer comparer = Comparer&amp;lt;t&amp;gt;.Default;
itemsList.Sort(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(T t1, T t2)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; property1 = prop.GetValue(t1);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; property2 = prop.GetValue(t2);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reverse * comparer.Compare(property1, property2);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Obviously that didn&amp;rsquo;t work. The problem is that i received the default Comparer for T, instead of the Comparer for the type of the property. Anyway, with a bit of reflection i got access to that Comparer&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;Type comparablePropertyType = &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(Comparer&amp;lt;&amp;gt;).MakeGenericType(property.PropertyType);
IComparer comparer = (IComparer)comparablePropertyType.InvokeMember(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Default&amp;#34;&lt;/span&gt;, BindingFlags.Static | BindingFlags.GetProperty | BindingFlags.Public, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After a bit of refactoring i ended up with a PropertyComparer&lt;!-- raw HTML omitted --&gt; which allowed me to implement the sorting as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;Type propertyType = property.PropertyType;

&lt;span style=&#34;color:#75715e&#34;&gt;// this cache minimizes the cost of reflection in the PropertyComparer constructor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;PropertyComparer&amp;lt;t&amp;gt; comparer;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comparers.TryGetValue(propertyType, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; comparer))
{
	comparer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PropertyComparer&amp;lt;t&amp;gt;(property, direction);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comparers.Add(propertyType, comparer);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
{
	comparer.SetListSortDirection(direction);
}

itemsList.Sort(comparer);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to write unittests, i needed a way to get instances of a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.componentmodel.propertydescriptor.aspx&#34;&gt;PropertyDescriptor&lt;/a&gt;. This was achieved by using the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.componentmodel.typedescriptor_methods.aspx&#34;&gt;TypeDescriptor&lt;/a&gt; as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;PropertyDescriptor GetPropertyDescriptor(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; component, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; propertyName)
{
	PropertyDescriptorCollection propertyDescriptors = TypeDescriptor.GetProperties(component);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (PropertyDescriptor propertyDescriptor &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; propertyDescriptors)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (propertyDescriptor.Name == propertyName)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; propertyDescriptor;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArgumentException(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The property &amp;#39;{0}&amp;#39; was not found.&amp;#34;&lt;/span&gt;, propertyName));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to download the updated demo application: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/SortableBindingList.zip&#34;&gt;sortablebindinglist.zip&lt;/a&gt;. There are even real applications that use this class, eg: &lt;a href=&#34;http://vstrac.devjavu.com/&#34;&gt;VSTrac&lt;/a&gt; and &lt;a href=&#34;http://monotorrent.com/&#34;&gt;MonoTorrent&lt;/a&gt;. If you&amp;rsquo;re interested in the unittests you&amp;rsquo;ll have to get the code at &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>NHibernate SessionFactory configuration</title>
      <link>/post/2008-07-28-nhibernate-sessionfactory-configuration/</link>
      <pubDate>Mon, 28 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-07-28-nhibernate-sessionfactory-configuration/</guid>
      <description>
        
          &lt;p&gt;My preferred way for configuring &lt;a href=&#34;http://www.nhibernate.org&#34;&gt;NHibernate&lt;/a&gt; is as following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a hibernate.cfg.xml file for session-factory settings.&lt;/li&gt;
&lt;li&gt;Add mapping files, named type.hbm.xml, as embedded resources to the library project that implements the repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When i looked at the &lt;a href=&#34;http://www.hibernate.org/hib_docs/nhibernate/1.2/reference/en/html_single/#configuration-programmatic&#34;&gt;documentation&lt;/a&gt; i found the following&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Another alternative (probably the best) way is to let NHibernate load all of the mapping files contained in an Assembly:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;Configuration cfg = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Configuration(); 
cfg.AddAssembly( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NHibernate.Auction&amp;#34;&lt;/span&gt; );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Whenever i tried that code i received an InvalidOperationException: Could not find the dialect in the configuration. In order to make the configuration work the way i prefer you have to do the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;Configuration cfg = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Configuration().Configure();
cfg.AddAssembly(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(MyRepository).Assembly);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another attention point is the fact that i believe that all connectionStrings belong in App.Config. This can be realised by using the connection.connection_string_name attribute&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34; ?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;hibernate-configuration&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;urn:nhibernate-configuration-2.2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;session-factory&amp;gt;&lt;/span&gt; 
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;connection.provider&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;NHibernate.Connection.DriverConnectionProvider&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dialect&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;NHibernate.Dialect.MsSql2005Dialect&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt; 
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;connection.driver_class&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;NHibernate.Driver.SqlClientDriver&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt; 
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;connection.connection_string_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;AdventureWorks&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt; 
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/session-factory&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/hibernate-configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Error loading testrunconfig: Failed to instantiate type Microsoft.VisualStudio.TestTools.WebStress.WebTestRunConfig</title>
      <link>/post/2008-07-26-error-loading-testrunconfig-failed-to-instantiate-type-microsoftvisualstudiotesttoolswebstresswebtestrunconfig/</link>
      <pubDate>Sat, 26 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-07-26-error-loading-testrunconfig-failed-to-instantiate-type-microsoftvisualstudiotesttoolswebstresswebtestrunconfig/</guid>
      <description>
        
          &lt;p&gt;Earlier this week i ran into the following exception when opening a solution: &amp;ldquo;Error loading TestRunConfig1.testrunconfig: Failed to instantiate type Microsoft.VisualStudio.TestTools.WebStress.WebTestRunConfig&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/testrunconfig_notexpectedformat.gif&#34; alt=&#34;screenshot of testrunconfig not expected format dialog box&#34;&gt;&lt;/p&gt;
&lt;p&gt;Apparently (&lt;a href=&#34;http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=228438&amp;amp;SiteID=1&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=425717&amp;amp;SiteID=1&#34;&gt;here&lt;/a&gt;) the VS2005 Developer edition is missing a couple of libraries that the VS2005 Tester edition adds to the testrunconfig. If your tests don&amp;rsquo;t depend on these, the simplest way to solve this problem is to remove all the values nodes, and their childnodes, where the type is defined in the Microsoft.VisualStudio.QualityTools.LoadTest, Microsoft.VisualStudio.QualityTools.WebTest and Microsoft.VisualStudio.QualityTools.LoadTest.WebStress assemblies.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>About the Specification pattern</title>
      <link>/post/2008-07-22-about-the-specification-pattern/</link>
      <pubDate>Tue, 22 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-07-22-about-the-specification-pattern/</guid>
      <description>
        
          &lt;p&gt;A couple of days ago i mentionned &lt;a href=&#34;http://www.goeleven.com&#34;&gt;Yves Goeleven&amp;rsquo;s blog&lt;/a&gt; as a reference for solutions using &lt;a href=&#34;http://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;DDD&lt;/a&gt; principles. Let&amp;rsquo;s have a look at his implementation of the AndSpecification and OrSpecification in &lt;a href=&#34;http://www.goeleven.com/blog/entryDetail.aspx?entry=57&#34;&gt;Design Patterns &amp;ndash; The Specification Pattern &amp;ndash; Part I&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AndSpecification&lt;/span&gt;&amp;lt;T&amp;gt; : CompositeSpecification&amp;lt;T&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsSatisfiedBy(T candidate)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; isSatisfied = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;( ISpecification&amp;lt;T&amp;gt; spec &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; Specifications)
		{
			isSatisfied &amp;amp;= spec.IsSatisfiedBy(candidate);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; isSatisfied;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OrSpecification&lt;/span&gt;&amp;lt;T&amp;gt; : CompositeSpecification&amp;lt;T&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsSatisfiedBy(T obj)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; isSatisfied = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;( ISpecification&amp;lt;T&amp;gt; spec &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; Specifications)
		{
			isSatisfied |= spec.IsSatisfiedBy(obj);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; isSatisfied;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I believe that it would be better if the implementations had the same lazy evaluation behaviour as the C# &amp;amp;&amp;amp; and || operators. Eg: in C# one can write (a &amp;amp;&amp;amp; b) and if a evaluates to false, then b is not evaluated anymore. Consider the following code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; person.Age &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;) { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s rewrite that same code using Specifications&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotNullSpecification&lt;/span&gt;&amp;lt;T&amp;gt; : ISpecification&amp;lt;T&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; T : &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsSatisfiedBy(T item)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; item != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OlderThanSpecification&lt;/span&gt; : ISpecification&amp;lt;person&amp;gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; age;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; OlderThanSpecification(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; age)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.age = age;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsSatisfiedBy(Person person)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; person.Age &amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.age;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonNotNullAndOlderThan18Specification&lt;/span&gt; : AndSpecification&amp;lt;person&amp;gt; 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PersonNotNullAndOlderThan18Specification()
	: &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NotNullSpecification&amp;lt;person&amp;gt;(), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OlderThanSpecification(&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;))
	{
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the mentionned AndSpecification implementation the following unittest will fail&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestMethod]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; TestPersonNotNullAndOlderThan18Specification()
{
	Person person = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;

	ISpecification&amp;lt;person&amp;gt; specification = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonNotNullAndOlderThan18Specifictation();
	Assert.IsFalse(specification.IsSatisfiedBy(person));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to make that test pass we could rewrite the specifications as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CompositeSpecification&lt;/span&gt;&amp;lt;T&amp;gt; : ISpecification&amp;lt;T&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; IEnumerable&amp;lt;ispecification&amp;lt;T&amp;gt;&amp;gt; specifications;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CompositeSpecification(IEnumerable&amp;lt;ispecification&amp;lt;T&amp;gt;&amp;gt; specifications)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.specifications = specifications;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; IEnumerable&amp;lt;ispecification&amp;lt;T&amp;gt;&amp;gt; Specifications
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.specifications; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsSatisfiedBy(T item);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AndSpecification&lt;/span&gt;&amp;lt;T&amp;gt; : CompositeSpecification&amp;lt;T&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AndSpecification(IEnumerable&amp;lt;ispecification&amp;lt;T&amp;gt;&amp;gt; specifications)
	:&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(specifications)
	{ }

	&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsSatisfiedBy(T item)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (ISpecification&amp;lt;T&amp;gt; specification &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Specifications)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!specification.IsSatisfiedBy(item))
			{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
			}
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OrSpecification&lt;/span&gt;&amp;lt;T&amp;gt; : CompositeSpecification&amp;lt;T&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; OrSpecification(IEnumerable&amp;lt;ispecification&amp;lt;T&amp;gt;&amp;gt; specifications)
	: &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(specifications)
	{ }

	&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsSatisfiedBy(T item)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (ISpecification&amp;lt;T&amp;gt; specification &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Specifications)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (specification.IsSatisfiedBy(item))
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
			}
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>.NET Domain-Driven Design with C#: Problem -- Design -- Solution</title>
      <link>/post/2008-07-19-net-domain-driven-design-with-c-problem-design-solution/</link>
      <pubDate>Sat, 19 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-07-19-net-domain-driven-design-with-c-problem-design-solution/</guid>
      <description>
        
          &lt;p&gt;Since i didn&amp;rsquo;t find many reviews on &lt;a href=&#34;http://blogs.interknowlogy.com/timmccarthy/&#34;&gt;Tim McCarthy&amp;rsquo;s&lt;/a&gt; book: &lt;a href=&#34;http://www.amazon.com/dp/0470147563?tag=timcsbl-20&amp;amp;camp=14573&amp;amp;creative=327641&amp;amp;linkCode=as1&amp;amp;creativeASIN=0470147563&amp;amp;adid=0G2QZKFS5TEKWFYAGKWG&amp;amp;&#34;&gt;.NET Domain-Driven Design with C#: Problem &amp;ndash; Design &amp;ndash; Solution&lt;/a&gt;, i&amp;rsquo;ve decided to write a short one myself:&lt;/p&gt;
&lt;p&gt;This book offers a real-world example of a project using &lt;a href=&#34;http://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;DDD&lt;/a&gt;. If you already have experience with DDD you will read pretty quickly through the chapters.&lt;/p&gt;
&lt;p&gt;Here are a couple of items in the book i found noteworthy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The IAggregateRoot marker interface that is used as a constraint on the IRepository&lt;!-- raw HTML omitted --&gt; interface.&lt;/li&gt;
&lt;li&gt;Code that demonstrated the power of WPF through the implementation of &lt;a href=&#34;http://blogs.msdn.com/dancre/archive/2006/10/11/datamodel-view-viewmodel-pattern-series.aspx&#34;&gt;Model-View-ViewModel&lt;/a&gt; and usage of the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.windows.input.icommand.aspx&#34;&gt;ICommand&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Used the &lt;a href=&#34;http://martinfowler.com/eaaCatalog/unitOfWork.html&#34;&gt;IUnitOfWork.Commit&lt;/a&gt; method to plug a Synchronization Service into the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in all, the book is worth the 26$. In case that you&amp;rsquo;re looking for more examples, i would recommend &lt;a href=&#34;http://www.goeleven.com/blog/entryDetail.aspx?entry=89&#34;&gt;Domain Driven Design &amp;ndash; Table of contents and source code&lt;/a&gt; as another source of inspiration&amp;hellip;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting a generic DiscreteValuesRange</title>
      <link>/post/2008-07-16-presenting-a-generic-discreterange/</link>
      <pubDate>Wed, 16 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-07-16-presenting-a-generic-discreterange/</guid>
      <description>
        
          &lt;p&gt;Let me start with a real world example demonstrating the usefulness of a generic DiscreteValuesRange. Imagine that i run a grid computing business and my clients want to book capacity on the grid for a given period. Before their booking is approved, i have to verify that the client has contracts that allow him to use the system for each day of the booking period. Usually, such a check is implemented as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; CheckEachDayIsCovered(Booking booking, Client client)
{
	DateRange periodToCheck = booking.Period;
	DateTime endOfTime = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;);

	DateTime dayToCheck = periodToCheck.Begin;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (dayToCheck &amp;lt;= periodToCheck.End) 
	{ 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; dayIsCovered = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;; 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Contract contract &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; client.Contracts) 
		{ 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (contract.Period.Includes(dayToCheck)) 
			{ 
				dayIsCovered = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (contract.Period.End &amp;lt; endOfTime) 
				{ 
					dayToCheck = contract.Period.End.AddDays(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); 
				} 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; 
				{ 
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; 
				} 
			} 
		} 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!dayIsCovered) 
		{ 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;; 
		} 
	} 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After a while clients want to buy licenses for only a couple of hours instead of a full day. I realise that my check can remain the same, but that the concept &amp;ldquo;EndOfTime&amp;rdquo; has become DateTime(9999, 12, 31, 23, 59, 59) and that i can advance only an hour instead of a day. Since i want to reuse my code i define the IDiscreteValueProvider&lt;!-- raw HTML omitted --&gt; interface (See &lt;a href=&#34;http://en.wikipedia.org/wiki/Discrete_space&#34;&gt;Discrete Space&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IDiscreteValuesProvider&amp;lt;T&amp;gt;
{
	T GetNextValue(T &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;);
	T MaxValue { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this i&amp;rsquo;m able to implement a DiscreteValuesRange&lt;!-- raw HTML omitted --&gt; that implements the following interface (See: &lt;a href=&#34;http://www.timvw.be/presenting-a-generic-range/&#34;&gt;Generic Range&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IDiscreteValuesRange&amp;lt;T&amp;gt; : IRange&amp;lt;T&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsCoveredByRanges(IEnumerable&amp;lt;idiscreteValuesRange&amp;lt;T&amp;gt;&amp;gt; ranges);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, with all this infrastructure i can rewrite my original method as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; CheckEachDayIsCovered(Booking booking, Client client)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; booking.Period.IsCoveredByRanges(client.GetContractPeriods());
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;
{
	...
	IEnumerable&amp;lt;range&amp;lt;dateTime&amp;gt;&amp;gt; GetContractPeriods()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Contract contract &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Contracts)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; contract.Period;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to download all this infrastructure: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DiscreteRange.zip&#34;&gt;DiscreteRange.zip&lt;/a&gt; and use it for your next coverage check.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting HtmlClipboard</title>
      <link>/post/2008-06-30-presenting-htmlclipboard/</link>
      <pubDate>Mon, 30 Jun 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-06-30-presenting-htmlclipboard/</guid>
      <description>
        
          &lt;p&gt;Very often i need to encode/decode the contents of my Clipboard so i decided to write a little tray application to help me&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/htmlclipboard.gif&#34; alt=&#34;screenshot of htmlclipboard tray application&#34;&gt;&lt;/p&gt;
&lt;p&gt;With the aid of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.windows.forms.clipboard.aspx&#34;&gt;Clipboard&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.web.httputility.aspx&#34;&gt;HttpUtility&lt;/a&gt; this is quite easy to implement&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; toolStripMenuItemDecode_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; original = Clipboard.GetText();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; decodedHtml = HttpUtility.HtmlDecode(original);
	Clipboard.SetText(decodedHtml);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; toolStripMenuItemEncode_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; original = Clipboard.GetText();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; encodedHtml = HttpUtility.HtmlEncode(original);
	Clipboard.SetText(encodedHtml);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Anyway, feel free to download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/HtmlClipboard.zip&#34;&gt;HtmlClipboard.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Example implementation of a callback method for use in the Asynchronous Programming Model</title>
      <link>/post/2008-06-28-example-usage-of-the-asynchronous-programming-model/</link>
      <pubDate>Sat, 28 Jun 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-06-28-example-usage-of-the-asynchronous-programming-model/</guid>
      <description>
        
          &lt;p&gt;I always seem to forget about the mechanics of implementing a Callback method that can be used in the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms228963(VS.80).aspx&#34;&gt;Asynchronous Programming Model (APM)&lt;/a&gt;. So here is a simple example in C# 3.0 using the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb549151.aspx&#34;&gt;Func&amp;lt;T, TResult&amp;gt;&lt;/a&gt; delegate&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Program&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
	{
		Func&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; echoDelegate = Echo;
		IAsyncResult asyncResult = echoDelegate.BeginInvoke(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some input&amp;#34;&lt;/span&gt;, EchoCallback, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;);

		WaitHandle.WaitAll(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WaitHandle[] {asyncResult.AsyncWaitHandle});

		Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine);
		Console.ReadKey();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Echo(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; input)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Echoing {0}&amp;#34;&lt;/span&gt;, input);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; EchoCallback(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; state)
	{
		IAsyncResult r = (IAsyncResult)state;
		Debug.Assert(r.AsyncState == &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;);

		AsyncResult asyncResult = (AsyncResult)state;
		Func&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; echoDelegate = (Func&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;)asyncResult.AsyncDelegate;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; echoResult = echoDelegate.EndInvoke(asyncResult);
		Debug.Assert(echoResult == &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Echoing some input&amp;#34;&lt;/span&gt;);

		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EchoCallback completed.&amp;#34;&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>MCTS&#43;&#43;</title>
      <link>/post/2008-06-26-mcts/</link>
      <pubDate>Thu, 26 Jun 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-06-26-mcts/</guid>
      <description>
        
          &lt;p&gt;Today i passed Exam &lt;a href=&#34;http://www.microsoft.com/learning/en/us/exams/70-529.mspx&#34;&gt;70-529&lt;/a&gt; and thus became a &lt;a href=&#34;http://www.microsoft.com/learning/mcp/mcts/distapps/default.mspx&#34;&gt;MCTS: .NET Framework 2.0 Distributed Applications&lt;/a&gt;. This means that there is only one exam left, &lt;a href=&#34;http://www.microsoft.com/learning/en/us/exams/70-549.mspx&#34;&gt;70-549&lt;/a&gt;, in order to become a &lt;a href=&#34;http://www.microsoft.com/learning/mcp/mcpd/entapp/default.mspx&#34;&gt;MCPD: Enterprise Applications Developer on Visual Studio 2005&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Note about makecert.exe</title>
      <link>/post/2008-06-21-note-about-makecertexe/</link>
      <pubDate>Sat, 21 Jun 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-06-21-note-about-makecertexe/</guid>
      <description>
        
          &lt;p&gt;A couple of days ago i didn&amp;rsquo;t have a binary version of &lt;a href=&#34;http://www.openssl.org&#34;&gt;OpenSSL&lt;/a&gt; around so i decided to use &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bfsktky3(VS.80).aspx&#34;&gt;Makecert.exe&lt;/a&gt;. I generated a couple of test certificates and started playing around with them.&lt;/p&gt;
&lt;p&gt;Whenever i tried to decrypt an instance of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.security.cryptography.xml.encryptedxml(VS.80).aspx&#34;&gt;EncryptedXml&lt;/a&gt; a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.security.cryptography.cryptographicexception.aspx&#34;&gt;CryptographicException&lt;/a&gt; (&amp;ldquo;Bad Key.&amp;quot;) was thrown and when i tried to use a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa529579.aspx&#34;&gt;mutualCertificate11Security&lt;/a&gt; assertion (&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa139619.aspx&#34;&gt;WSE 3.0&lt;/a&gt;) the same CryptographicException (&amp;ldquo;WSE600: Unable to unwrap a symmetric key using the private key of an X.509 certificate. Please check if the account &amp;lsquo;ASPNET&amp;rsquo; has permissions to read the private key of certificate with subject name&amp;hellip; &amp;ldquo;) was thrown.&lt;/p&gt;
&lt;p&gt;The problem is that by default, makecert.exe generates a key type that is suited for signature. If you want to use the key for other purposes than signing (eg: SSL authentication) you have to use the -sky exchange option. The following commands made my problems disappear:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;makecert -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CN=Client&amp;#34;&lt;/span&gt; -pe -ss My -sr CurrentUser -sky exchange client.cer
makecert -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CN=Host&amp;#34;&lt;/span&gt; -pe -ss My -sr LocalMachine -sky exchange host.cer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>PInvoke Interop Assistant released</title>
      <link>/post/2008-06-17-pinvoke-interop-assistant-released/</link>
      <pubDate>Tue, 17 Jun 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-06-17-pinvoke-interop-assistant-released/</guid>
      <description>
        
          &lt;p&gt;Earlier at &lt;a href=&#34;http://www.microsoft.com/events/TechEd2008/default.mspx&#34;&gt;Tech Ed North America&lt;/a&gt; i heared how &lt;a href=&#34;&#34;&gt;Jesse Kaplan&lt;/a&gt;, program Manager for Extensibility and add-ins for the CLR team, announced a new tool to help us with PInvoke signatures. Today i noticed that the tool, &lt;a href=&#34;http://www.codeplex.com/clrinterop&#34;&gt;PInvoke Interop Assistant&lt;/a&gt; has now been made available at CodePlex.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Enumerate all properties and their value of an object</title>
      <link>/post/2008-06-14-get-a-list-of-all-properties-and-their-values-of-an-object/</link>
      <pubDate>Sat, 14 Jun 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-06-14-get-a-list-of-all-properties-and-their-values-of-an-object/</guid>
      <description>
        
          &lt;p&gt;Earlier today someone asked me how to generate a List with all the properties (and their respective value) that an object has. With C# 2.0 i would have created a class to represent a single element, PropertyRow, with a Name and a Value property and a class that is IEnumerable&lt;!-- raw HTML omitted --&gt; to hold all PropertyRows.&lt;/p&gt;
&lt;p&gt;With C# 3.0 we can take advantage of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb397696.aspx&#34;&gt;anonymous types&lt;/a&gt; and the code we have to write is fairly minimal&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;Person angelina = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Angelina&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jolie&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0275198123&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CloseToMe blv 12&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; propertyRows =
	&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; propertyInfo &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; angelina.GetType().GetProperties()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; { Name = propertyInfo.Name, Value = propertyInfo.GetValue(angelina, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) };

BindingSource bs = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingSource();
bs.DataSource = propertyRows;

&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = bs;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just as with anonymous delegates, as soon as you notice that you define the same anonymous class more than once, you may want to consider to take it out of the anonymousity.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Became Microsoft Certified Technology Specialist...</title>
      <link>/post/2008-06-09-became-microsoft-certificate-technology-specialist/</link>
      <pubDate>Mon, 09 Jun 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-06-09-became-microsoft-certificate-technology-specialist/</guid>
      <description>
        
          &lt;p&gt;Not that i really care, but &lt;a href=&#34;http://wimvdd.blogspot.com&#34;&gt;my manager&lt;/a&gt; seems to do, last week, during a couple of dead moments at Tech-Ed North America (I&amp;rsquo;ll blog about that later on this week) i decided to take a couple of exams (&lt;a href=&#34;http://www.microsoft.com/learning/en/us/exams/70-536.mspx&#34;&gt;70-536&lt;/a&gt;, &lt;a href=&#34;http://www.microsoft.com/learning/en/us/exams/70-526.mspx&#34;&gt;70-526&lt;/a&gt; and &lt;a href=&#34;http://www.microsoft.com/learning/en/us/exams/70-528.mspx&#34;&gt;70-528&lt;/a&gt;) and passed them 😉&lt;/p&gt;
&lt;p&gt;This means that i&amp;rsquo;m now a &lt;a href=&#34;http://www.microsoft.com/learning/mcp/mcts/winapps/default.mspx&#34;&gt;MCTS: .NET Framework 2.0 Windows Applications&lt;/a&gt; and a &lt;a href=&#34;http://www.microsoft.com/learning/mcp/mcts/webapps/default.mspx&#34;&gt;MCTS: .NET Framework 2.0 Web Applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to check out &lt;a href=&#34;http://www.microsoft.com/learning/mcp/transcripts&#34;&gt;my transcript&lt;/a&gt; with Transcript&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring the Microsoft Sync Framework</title>
      <link>/post/2008-05-24-exploring-the-microsoft-sync-framework/</link>
      <pubDate>Sat, 24 May 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-05-24-exploring-the-microsoft-sync-framework/</guid>
      <description>
        
          &lt;p&gt;Earlier this week i&amp;rsquo;ve been experimenting with the &lt;a href=&#34;http://msdn.microsoft.com/en-us/sync/default.aspx&#34;&gt;Microsoft Sync Framework&lt;/a&gt;. In a typical n-tier architecture the client can&amp;rsquo;t access the remote database directly but uses a proxy instead. The available [Earlier this week i&amp;rsquo;ve been experimenting with the &lt;a href=&#34;http://msdn.microsoft.com/en-us/sync/default.aspx&#34;&gt;Microsoft Sync Framework&lt;/a&gt;. In a typical n-tier architecture the client can&amp;rsquo;t access the remote database directly but uses a proxy instead. The available](&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/microsoft.synchronization.data.serversyncproviderproxy(SQL.100).aspx&#34;&gt;http://msdn.microsoft.com/en-us/library/microsoft.synchronization.data.serversyncproviderproxy(SQL.100).aspx&lt;/a&gt;) has only one constructor which accepts an object. With reflector i found out that the proxy simply uses reflection to call some methods. Here are a couple of helper classes that help you prevent runtime errors due to this approach&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[ServiceContract(Namespace = &amp;#34;http://www.timvw.be/Synchronization&amp;#34;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IServerSyncProvider
{
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[OperationContract]&lt;/span&gt;
	SyncServerInfo GetServerInfo(SyncSession syncSession);
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[OperationContract]&lt;/span&gt;
	SyncSchema GetSchema(Collection&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; tableNames, SyncSession syncSession);
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[OperationContract]&lt;/span&gt;
	SyncContext GetChanges(SyncGroupMetadata groupMetadata, SyncSession syncSession);
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[OperationContract]&lt;/span&gt;
	SyncContext ApplyChanges(SyncGroupMetadata groupMetadata, DataSet dataSet, SyncSession syncSession);
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyServerSyncProviderProxy&lt;/span&gt; : ServerSyncProviderProxy
{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MyServerSyncProviderProxy(IServerSyncProvider serverSyncProvider)
		: &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(serverSyncProvider)
		{
		}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now you can easily consume a ServerSyncProviderProxy as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;SyncAgent syncAgent = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SyncAgent();
EndpointAddress address = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EndpointAddress(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://somewhere/Be.Timvw.Demo.Host/ServerSyncProvider.svc&amp;#34;&lt;/span&gt;);
BasicHttpBinding binding = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BasicHttpBinding();
ChannelFactory&amp;lt;iserverSyncProvider&amp;gt; factory = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ChannelFactory&amp;lt;iserverSyncProvider&amp;gt;(binding, address);
IServerSyncProvider serverSyncProvider = factory.CreateChannel();
syncAgent.RemoteProvider = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SafeServerSyncProviderProxy(serverSyncProvider);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Presenting a generic Effectivity</title>
      <link>/post/2008-05-19-presenting-a-generic-effectivity/</link>
      <pubDate>Mon, 19 May 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-05-19-presenting-a-generic-effectivity/</guid>
      <description>
        
          &lt;p&gt;Very often we have to manage objects and their changes over time. Usually we implement this by adding a &lt;a href=&#34;http://www.timvw.be/presenting-a-generic-range/&#34;&gt;Range&lt;!-- raw HTML omitted --&gt;&lt;/a&gt; to the data. &lt;a href=&#34;http://martinfowler.com/&#34;&gt;Martin Fowler&lt;/a&gt; has a name for this pattern: &lt;a href=&#34;http://martinfowler.com/ap2/effectivity.html&#34;&gt;Effectivity&lt;/a&gt; and i have an implementation for the following interface&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IEffectivity&amp;lt;T&amp;gt; : IComparable&amp;lt;ieffectivity&amp;lt;T&amp;gt;&amp;gt;
{
	T Element { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; }
	IRange&amp;lt;dateTime&amp;gt; ValidityPeriod { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsEffectiveOn(DateTime validityDate);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/IEffectivity.txt&#34;&gt;IEffectivity.txt&lt;/a&gt;, &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/Effectivity.txt&#34;&gt;Effectivity.txt&lt;/a&gt; and &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/EffectivityTester.txt&#34;&gt;EffectivityTester.txt&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting a generic EffectivityManager</title>
      <link>/post/2008-05-19-presenting-a-generic-effectivitymanager/</link>
      <pubDate>Mon, 19 May 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-05-19-presenting-a-generic-effectivitymanager/</guid>
      <description>
        
          &lt;p&gt;I&amp;rsquo;ve already presented a &lt;a href=&#34;http://www.timvw.be/presenting-a-generic-effectivity/&#34;&gt;Generic Effectivity&lt;/a&gt;. Offcourse, managing all these effectivities (versions of data) can be handled in a generic way too. A bit of experience mixed with &lt;a href=&#34;http://martinfowler.com/ap2/timeNarrative.html&#34;&gt;Patterns for things that change with time&lt;/a&gt; allowed me to come up with the following interface&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IEffectivityManager&amp;lt;T&amp;gt; : IList&amp;lt;ieffectivity&amp;lt;T&amp;gt;&amp;gt;
{
	IEffectivity&amp;lt;T&amp;gt; Add(T t, DateTime begin);
	IEffectivity&amp;lt;T&amp;gt; GetSnapshot(DateTime validityDate);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; TryGetSnapshot(DateTime validityDate, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; IEffectivity&amp;lt;T&amp;gt; effectivity);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/IEffectivityManager.txt&#34;&gt;IEffectivityManager.txt&lt;/a&gt;, &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/EffectivityManager.txt&#34;&gt;EffectivityManager.txt&lt;/a&gt; and &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/EffectivityManagerTester.txt&#34;&gt;EffectivityManagerTester.txt&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting a generic Range</title>
      <link>/post/2008-05-17-presenting-a-generic-range/</link>
      <pubDate>Sat, 17 May 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-05-17-presenting-a-generic-range/</guid>
      <description>
        
          &lt;p&gt;Quite often i&amp;rsquo;m writing code that compares one value against a range of other values. Most implementations compare the value against the boundaries (smallest and largest in the collection of other values). Having written this sort of code way too much i&amp;rsquo;ve decided to generalize the problem and distill an interface&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IRange&amp;lt;T&amp;gt;
{
	T Begin { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
	T End { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Includes(T t);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Includes(IRange&amp;lt;T&amp;gt; range);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Overlaps(IRange&amp;lt;T&amp;gt; range);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Offcourse, i&amp;rsquo;ve also written implementation. Feel free to download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/IRange.txt&#34;&gt;IRange.txt&lt;/a&gt;, &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/Range.txt&#34;&gt;Range.txt&lt;/a&gt; and &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/RangeTester.txt&#34;&gt;RangeTester.txt&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Build OpenSSL with Visual Studio 2008</title>
      <link>/post/2008-04-21-build-openssl-with-visual-studio-2008/</link>
      <pubDate>Mon, 21 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-04-21-build-openssl-with-visual-studio-2008/</guid>
      <description>
        
          &lt;p&gt;These days building &lt;a href=&#34;http://www.openssl.org&#34;&gt;OpenSSL&lt;/a&gt; with Visual Studio 2008 has become really easy. I don&amp;rsquo;t like to edit .cnf files so i decided to patch the code a little so that the default configuration file becomes openssl.config&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; basePath = &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;C:\src\openssl-0.9.8g&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; originalConfigfile = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;openssl.cnf&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; updatedConfigfile = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;openssl.config&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; filename &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; Directory.GetFiles(basePath, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\*.\*&amp;#34;&lt;/span&gt;, SearchOption.AllDirectories))
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; contents = File.ReadAllText(filename);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (contents.Contains(originalConfigfile))
	{
		Console.WriteLine(filename);
		File.WriteAllText(filename, contents.Replace(originalConfigfile, updatedConfigfile));
	}
}

File.WriteAllText(basePath + &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;\apps\&amp;#34;&lt;/span&gt; + updatedConfigfile, File.ReadAllText(basePath + &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;\apps\&amp;#34;&lt;/span&gt; + originalConfigfile));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Open a Visual Studio 2008 Command prompt and add references to the &lt;a href=&#34;http://blogs.msdn.com/windowssdk&#34;&gt;Microsoft SDK&lt;/a&gt; as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;SET PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;%PATH%;C:&lt;span style=&#34;color:#ae81ff&#34;&gt;\P&lt;/span&gt;rogram Files&lt;span style=&#34;color:#ae81ff&#34;&gt;\M&lt;/span&gt;icrosoft SDKs&lt;span style=&#34;color:#ae81ff&#34;&gt;\W&lt;/span&gt;indows&lt;span style=&#34;color:#ae81ff&#34;&gt;\v&lt;/span&gt;6.0A&lt;span style=&#34;color:#ae81ff&#34;&gt;\b&lt;/span&gt;in
SET LIB&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;%LIB%;C:&lt;span style=&#34;color:#ae81ff&#34;&gt;\P&lt;/span&gt;rogram Files&lt;span style=&#34;color:#ae81ff&#34;&gt;\M&lt;/span&gt;icrosoft SDKs&lt;span style=&#34;color:#ae81ff&#34;&gt;\W&lt;/span&gt;indows&lt;span style=&#34;color:#ae81ff&#34;&gt;\v&lt;/span&gt;6.0A&lt;span style=&#34;color:#ae81ff&#34;&gt;\L&lt;/span&gt;ib
SET INCLUDE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;%INCLUDE%;C:&lt;span style=&#34;color:#ae81ff&#34;&gt;\P&lt;/span&gt;rogram Files&lt;span style=&#34;color:#ae81ff&#34;&gt;\M&lt;/span&gt;icrosoft SDKs&lt;span style=&#34;color:#ae81ff&#34;&gt;\W&lt;/span&gt;indows&lt;span style=&#34;color:#ae81ff&#34;&gt;\v&lt;/span&gt;6.0A&lt;span style=&#34;color:#ae81ff&#34;&gt;\I&lt;/span&gt;nclude
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we simply have to follow the tasks listed in INSTALL.W32:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;perl Configure VC-WIN32 --prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c:/openssl
ms&lt;span style=&#34;color:#ae81ff&#34;&gt;\d&lt;/span&gt;o_masm
nmake -f ms&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;tdll.mak
nmake -f ms&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;tdll.mak test
nmake -f ms&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;tdll.mak install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Happy OpenSSL&amp;rsquo;ing!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Easily switching between configuration files with MSBuild</title>
      <link>/post/2008-03-22-easily-switching-between-configuration-files-with-msbuild/</link>
      <pubDate>Sat, 22 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-03-22-easily-switching-between-configuration-files-with-msbuild/</guid>
      <description>
        
          &lt;p&gt;A couple of days ago i wrote about &lt;a href=&#34;http://www.timvw.be/easily-switching-between-appconfig-files-with-msbuild/&#34;&gt;Easily switching between App.Config files with MSBuild&lt;/a&gt;. Christophe Gijbels, a fellow &lt;a href=&#34;http://www.compuware.be/root/Careers/index.asp&#34;&gt;compuwarrior&lt;/a&gt;, pointed out that developers usually need to copy more than a single App.Config file&amp;hellip; I would propose to add a Folder for each Customer that contains all the specific configuration files. Eg&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/customerconfigurations.gif&#34; alt=&#34;screenshot of solution explorer with proposed folder structures&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now i have to configure MSBuild so that the right files are copied into the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/bb629394.aspx&#34;&gt;OutDir&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Define the CustomerPath depending on the choosen Configuration --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;propertyGroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $(Configuration) == &amp;#39;Customer1 Debug&amp;#39; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;customerPath&amp;gt;&lt;/span&gt;Customer1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/customerPath&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/propertyGroup&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;propertyGroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $(Configuration) == &amp;#39;Customer2 Debug&amp;#39; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;customerPath&amp;gt;&lt;/span&gt;Customer2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/customerPath&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/propertyGroup&amp;gt;&lt;/span&gt; 

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Define AppConfig in the CustomerPath  --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;propertyGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;appConfig&amp;gt;&lt;/span&gt;$(CustomerPath)\App.config&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/appConfig&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/propertyGroup&amp;gt;&lt;/span&gt; 

&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Find all files in CustomerPath, excluding AppConfig --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;itemGroup&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;customerFiles&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(CustomerPath)\*.*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exclude=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(CustomerPath)\App.config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/itemGroup&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AfterBuild&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;copy&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SourceFiles=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@(CustomerFiles)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DestinationFolder=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(OutDir)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SkipUnchangedFiles=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Why doesn&#39;t Visual Studio display my MSBuild message texts?</title>
      <link>/post/2008-03-22-why-doesnt-visual-studio-display-my-msbuild-message-texts/</link>
      <pubDate>Sat, 22 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-03-22-why-doesnt-visual-studio-display-my-msbuild-message-texts/</guid>
      <description>
        
          &lt;p&gt;In order to debug an &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/wea2sca5.aspx&#34;&gt;MSBuild&lt;/a&gt; script i added a couple of &lt;!-- raw HTML omitted --&gt; tasks, but when i asked Visual Studio to Build i didn&amp;rsquo;t get to see the output&amp;hellip; By default Visual Studio will use &amp;ldquo;Minimal&amp;rdquo; as &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/ms164311.aspx&#34;&gt;verbosity&lt;/a&gt; level. You can change this via Tools -&amp;gt; Options -&amp;gt; Projects and Solutions -&amp;gt; Build and Run.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/msbuildverbosity.gif&#34; alt=&#34;screenshot of configuration dialog in visual studio that allows the user to set the verbosity of msbuild&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Easily switching between App.Config files with MSBuild</title>
      <link>/post/2008-03-17-easily-switching-between-appconfig-files-with-msbuild/</link>
      <pubDate>Mon, 17 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-03-17-easily-switching-between-appconfig-files-with-msbuild/</guid>
      <description>
        
          &lt;p&gt;Imagine the following situation: One codebase, two customers with different &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/kkz9kefa(VS.80).aspx&#34;&gt;Application Configuration files&lt;/a&gt;. How can we easily switch between the different configurations? By taking advantage of the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/kkz9kefa(VS.80).aspx&#34;&gt;Build Configurations&lt;/a&gt; functionality in Visual Studio we can easily switch between different configurations&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/vsconfigurationmanager.gif&#34; alt=&#34;screenshot of the configuration manager in visual studio&#34;&gt;&lt;/p&gt;
&lt;p&gt;A brute-force solution would be to add a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/42x5kfw4(VS.80).aspx&#34;&gt;Post-build Event&lt;/a&gt; that copies the desired App.Config file to the destination directory. In the Microsoft.Common.targets file (usually at C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727) around line 725 you can read how &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/wea2sca5.aspx&#34;&gt;MSBuild&lt;/a&gt; chooses the App.Config that is copied to the destination folder&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Choose exactly one app.config to be the main app.config that is copied to the destination folder.&lt;br&gt;
The search order is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose the value $(AppConfig) set in the main project.&lt;/li&gt;
&lt;li&gt;Choose @(None) App.Config in the same folder as the project.&lt;/li&gt;
&lt;li&gt;Choose @(Content) App.Config in the same folder as the project.&lt;/li&gt;
&lt;li&gt;Choose @(None) App.Config in any subfolder in the project.&lt;/li&gt;
&lt;li&gt;Choose @(Content) App.Config in any subfolder in the project.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus, simply setting $(AppConfig) should be enough to make sure that MSBuild chooses the appropriate App.Config file. Here is an example of a csproj section that defines $(AppConfig) as App.Customer1.Config or App.Customer2.Config depending on the choosen Build configuration&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;propertyGroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#39;$(Configuration)|$(Platform)&amp;#39; == &amp;#39;Debug Customer1|AnyCPU&amp;#39; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;debugSymbols&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/debugSymbols&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;debugType&amp;gt;&lt;/span&gt;full&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/debugType&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;optimize&amp;gt;&lt;/span&gt;false&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/optimize&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;outputPath&amp;gt;&lt;/span&gt;bin\Debug\&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/outputPath&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;defineConstants&amp;gt;&lt;/span&gt;DEBUG;TRACE&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/defineConstants&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;errorReport&amp;gt;&lt;/span&gt;prompt&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/errorReport&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;warningLevel&amp;gt;&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/warningLevel&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;appConfig&amp;gt;&lt;/span&gt;App.Customer1.Config&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/appConfig&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/propertyGroup&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;propertyGroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#39;$(Configuration)|$(Platform)&amp;#39; == &amp;#39;Debug Customer2|AnyCPU&amp;#39; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;debugSymbols&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/debugSymbols&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;outputPath&amp;gt;&lt;/span&gt;bin\Debug Customer2\&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/outputPath&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;defineConstants&amp;gt;&lt;/span&gt;DEBUG;TRACE&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/defineConstants&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;debugType&amp;gt;&lt;/span&gt;full&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/debugType&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;platformTarget&amp;gt;&lt;/span&gt;AnyCPU&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/platformTarget&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;codeAnalysisUseTypeNameInSuppression&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/codeAnalysisUseTypeNameInSuppression&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;codeAnalysisModuleSuppressionsFile&amp;gt;&lt;/span&gt;GlobalSuppressions.cs&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/codeAnalysisModuleSuppressionsFile&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;errorReport&amp;gt;&lt;/span&gt;prompt&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/errorReport&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;appConfig&amp;gt;&lt;/span&gt;App.Customer2.Config&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/appConfig&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/propertyGroup&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Heroes happened {Here}</title>
      <link>/post/2008-03-14-heroes-happened-here/</link>
      <pubDate>Fri, 14 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-03-14-heroes-happened-here/</guid>
      <description>
        
          &lt;p&gt;I&amp;rsquo;m back from &lt;a href=&#34;http://www.microsoft.com/belux/heroeshappenhere/default.aspx&#34;&gt;Heroes Happen Here&lt;/a&gt;. Even with a fullhouse this convention was well organized and evertyhing went pretty smooth (In my experience that is true for all events organised by Microsoft). One suggestion though: Reduce the sugar buffet (although the cake and muffins are very tasty) and add some healthy fruit 😉&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m glad to notice, despite the fact that the main reason seems to be &lt;a href=&#34;http://en.wikipedia.org/wiki/Search_engine_optimisation&#34;&gt;SEO&lt;/a&gt;, web developers are encouraged to develop websites that work without JavaScript and that they add it afterwards as a real usability enhancement.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Using Linq for statically-typed reflection</title>
      <link>/post/2008-03-14-using-linq-for-statically-typed-reflection/</link>
      <pubDate>Fri, 14 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-03-14-using-linq-for-statically-typed-reflection/</guid>
      <description>
        
          &lt;p&gt;I discovered the &lt;a href=&#34;http://www.codeplex.com/Release/ProjectReleases.aspx?ProjectName=clarius&amp;amp;ReleaseId=9495&#34;&gt;TypedReflector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;on &lt;a href=&#34;http://www.clariusconsulting.net/blogs/kzu/archive/2007/12/30/49063.aspx&#34;&gt;Daniel Cazzulino&amp;rsquo;s Blog&lt;/a&gt;. In essence, a simplified version of the code looks like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reflector&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PropertyInfo GetProperty&amp;lt;t, TRet&amp;gt;(Expression&amp;lt;func&amp;lt;t, TRet&amp;gt;&amp;gt; expression)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GetMemberInfo(expression) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PropertyInfo;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; FieldInfo GetField&amp;lt;t, TRet&amp;gt;(Expression&amp;lt;func&amp;lt;t, TRet&amp;gt;&amp;gt; expression)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GetMemberInfo(expression) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; FieldInfo;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; MethodInfo GetMethod&amp;lt;t, TRet&amp;gt;(Expression&amp;lt;func&amp;lt;t, TRet&amp;gt;&amp;gt; expression)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GetMemberInfo(expression) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; MethodInfo;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; MemberInfo GetMemberInfo(Expression memberInfoExpression)
	{
		Expression lambdaBodyExpression = ((LambdaExpression)memberInfoExpression).Body;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (lambdaBodyExpression.NodeType)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; ExpressionType.MemberAccess:
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ((MemberExpression)lambdaBodyExpression).Member;
			
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; ExpressionType.Call:
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ((MethodCallExpression)lambdaBodyExpression).Method;
			
			&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
			&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArgumentException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unsupported NodeType&amp;#34;&lt;/span&gt;);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This class allows me to write the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;PropertyInfo namePropertyInfo = Reflector.GetProperty&amp;lt;person, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;(p =&amp;gt; p.Surname);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Not only can i be sure that the lambda (and thus the namePropertyInfo.Invoke) will always return a string, i can also use it to avoid &amp;lsquo;hardcoded&amp;rsquo; propertynames&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//const string SurnameProperty = &amp;#34;Surname&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//comboBox1.DisplayMember = SurnameProperty;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;comboBox1.DisplayMember = Reflector.GetProperty&amp;lt;person, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;(p =&amp;gt; p.Surname).Name;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Using System.DirectoryServices.AccountManagement to find the members of an AD group</title>
      <link>/post/2008-03-08-using-systemdirectoryservicesaccountmanagement-to-find-the-members-of-an-ad-group/</link>
      <pubDate>Sat, 08 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-03-08-using-systemdirectoryservicesaccountmanagement-to-find-the-members-of-an-ad-group/</guid>
      <description>
        
          &lt;p&gt;A while ago i posted some code that demonstrated how to &lt;a href=&#34;http://www.timvw.be/find-the-members-of-an-ad-group/&#34;&gt;find the members of an AD group&lt;/a&gt;. If you&amp;rsquo;re using the brandnew .Net 3.5 framework you can take advantage of the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.directoryservices.accountmanagement.aspx&#34;&gt;System.DirectoryServices.AccountManagement&lt;/a&gt; library which is an abstraction for AD (DS, LDS) and SAM accounts. Using this new library my method can be simplified&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; FindUsernames(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; groupname)
{
	PrincipalContext principalContext = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PrincipalContext(ContextType.Domain, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mydomain&amp;#34;&lt;/span&gt;);
	GroupPrincipal groupPrincipal = GroupPrincipal.FindByIdentity(principalContext, groupname);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Principal principal &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; groupPrincipal.Members)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; principal.DistinguishedName;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re looking for more information i would recommend that you read &lt;a href=&#34;http://msdn2.microsoft.com/en-us/magazine/cc135979.aspx&#34;&gt;Managing Directory Security Principals in the .NET Framework 3.5&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring alternative input: ActiveHome</title>
      <link>/post/2008-03-06-exploring-alternative-input-activehome/</link>
      <pubDate>Thu, 06 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-03-06-exploring-alternative-input-activehome/</guid>
      <description>
        
          &lt;p&gt;A while ago i bought &lt;a href=&#34;http://www.easycomputing.com/product.asp?ref=3655&#34;&gt;Media Centerkit&lt;/a&gt; for an euro or two. I wouldn&amp;rsquo;t recommend the product because it comes with crappy software. Anyway, i was only interested in playing with the hardware (RF Remote and USB Receiver) so i downloaded the &lt;a href=&#34;http://www.activehomepro.com/sdk/sdk-info.html&#34;&gt;ActiveHome Professional SDK&lt;/a&gt;. Once you install this you can add a reference to &amp;ldquo;ActiveHomeScript 1.0 Type Library&amp;rdquo; under the COM tab in Visual Studio. I wrote a little library so that i can consume the ActiveHomeClass.RecvAction in a Type-safe way&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/activehomelibrary.png&#34; alt=&#34;class diagram of activehome library&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is some sample code that demonstrates how you can use the Notifier to receive Notifications&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// register our eventhandler and tell the notifier to start raising events
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Notifier.Instance.NotificationReceived += &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Instance_NotificationReceived;
Notifier.Instance.Enable();

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Instance_NotificationReceived(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, NotificationReceivedEventArgs e)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// for more complex logic i would recommend that you apply a Filter pattern...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	RadioFrequencyNotification rfNotification = e.Notification &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; RadioFrequencyNotification;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rfNotification.IsKeyPressed)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rfNotification.Command == RadioFrequencyCommand.Menu)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.RaiseToolStripMenuItemClicked(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.MenuClicked, EventArgs.Empty);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As always feel free to download the library and sample application: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ActiveHome.zip&#34;&gt;ActiveHome.zip&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Find the members of an AD group</title>
      <link>/post/2008-03-05-find-the-members-of-an-ad-group/</link>
      <pubDate>Wed, 05 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-03-05-find-the-members-of-an-ad-group/</guid>
      <description>
        
          &lt;p&gt;Because i always seem to forget about the syntax of LDAP Search Filters (&lt;a href=&#34;http://www.ietf.org/rfc/rfc2254.txt&#34;&gt;RFC 2254: The String Representation of LDAP Search Filters&lt;/a&gt; and &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/ms675768(VS.85).aspx&#34;&gt;Creating a Query Filter&lt;/a&gt;) i&amp;rsquo;m going to post a basic demo of &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.directoryservices.directorysearcher.aspx&#34;&gt;DirectorySearcher&lt;/a&gt; that returns the members that are part of a given AD group&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; member &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; FindUsernames(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CWBE-PS-.NetDev&amp;#34;&lt;/span&gt;))
	{
		Console.WriteLine(member);
	}

	Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine);
	Console.ReadKey();
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; FindUsernames(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; groupname)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; filter = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;amp;(&amp;amp;(objectCategory=Group)(objectClass=Group))(name={0}))&amp;#34;&lt;/span&gt;;
	filter = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Format(filter, groupname);

	DirectoryEntry directoryEntry = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryEntry();
	DirectorySearcher searcher = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectorySearcher(directoryEntry);
	searcher.SearchScope = SearchScope.Subtree;
	searcher.Filter = filter;

	DirectoryEntry groupEntry = searcher.FindOne().GetDirectoryEntry();
	PropertyValueCollection members = (PropertyValueCollection)groupEntry.Properties[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;member&amp;#34;&lt;/span&gt;];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ConvertAll&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[])members.Value);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;to&amp;gt; ConvertAll&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;, To&amp;gt;(IEnumerable&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;&amp;gt; elements)
{
	Type toType = &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(To);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (From element &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; elements)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (To)Convert.ChangeType(element, toType);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Display WorkItems in a WinForms application</title>
      <link>/post/2008-02-29-display-workitems-in-a-winforms-application/</link>
      <pubDate>Fri, 29 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-02-29-display-workitems-in-a-winforms-application/</guid>
      <description>
        
          &lt;p&gt;Using the Microsoft.TeamFoundation.WorkItemTracking.Controls assembly it is possibe to display WorkItems. Here is a little demo application that will display all the WorkItems that have been changed by one of the given users in the given range&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/workitemtracker.gif&#34; alt=&#34;screenshot of workitemtracker application&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the source: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/WorkItemTracker.zip&#34;&gt;WorkItemTracker.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit (05/03/2008):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Refactored the code a little and added some features like sortable columns, loading default tfsserver and users from App.Config, &amp;hellip;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Find WorkItems that have been changed between two dates</title>
      <link>/post/2008-02-28-find-workitems-that-have-been-changed-between-two-dates/</link>
      <pubDate>Thu, 28 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-02-28-find-workitems-that-have-been-changed-between-two-dates/</guid>
      <description>
        
          &lt;p&gt;Sometimes i want to know which WorkItems i have closed (or completed) between two dates. According to &lt;a href=&#34;http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=2528099&amp;amp;SiteID=1&#34;&gt;Amit Ghosh&lt;/a&gt; it&amp;rsquo;s not possible to write such a query so i wrote some code that uses the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/bb130146(VS.80).aspx&#34;&gt;TFS SDK&lt;/a&gt; to get that list&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
{
	TeamFoundationServer tfs = TeamFoundationServerFactory.GetServer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tfsrtm08&amp;#34;&lt;/span&gt;);
	WorkItemStore wis = (WorkItemStore)tfs.GetService(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(WorkItemStore));

	DateTime begin = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2008&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	DateTime end = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2008&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; username = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Darren&amp;#34;&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (WorkItem workItem &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; FindChangesByUserInRange(wis, username, begin, end))
	{
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[{0:00000}] {1}&amp;#34;&lt;/span&gt;, workItem.Id, workItem.Title);
	}

	Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Press any key to continue...&amp;#34;&lt;/span&gt;);
	Console.ReadKey();
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; List&amp;lt;workItem&amp;gt; FindChangesByUserInRange(WorkItemStore workItemStore, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; username, DateTime begin, DateTime end)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; query = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT System.ID, System.Title FROM workitems WHERE [Changed By] EVER &amp;#39;{0}&amp;#39; AND [State] IN (&amp;#39;Closed&amp;#39;, &amp;#39;Resolved&amp;#39;) AND [Changed Date] &amp;gt;= &amp;#39;{1}&amp;#39;&amp;#34;&lt;/span&gt;;
	query = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Format(query, username, begin.Date.ToShortDateString());

	List&amp;lt;workItem&amp;gt; result = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;workItem&amp;gt;();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (WorkItem workItem &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; workItemStore.Query(query))
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (IsChangedByUserInRange(workItem, username, begin, end))
		{
			result.Add(workItem);
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsChangedByUserInRange(WorkItem workItem, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; username, DateTime begin, DateTime end)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Revision rev &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; workItem.Revisions)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; changedBy = (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)rev.Fields[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Changed By&amp;#34;&lt;/span&gt;].Value;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (changedBy == username)
		{
			DateTime changedDate = (DateTime)rev.Fields[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Changed Date&amp;#34;&lt;/span&gt;].Value;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (begin &amp;lt;= changedDate &amp;amp;&amp;amp; changedDate &amp;lt;= end) 
			{ 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; 
			} 
		} 
	} 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Writing Xml without the XmlDeclaration</title>
      <link>/post/2008-02-26-writing-xml-without-the-xmldeclaration/</link>
      <pubDate>Tue, 26 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-02-26-writing-xml-without-the-xmldeclaration/</guid>
      <description>
        
          &lt;p&gt;Consider the following xml file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34; ?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- some comment --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;root&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- another comment --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you look at the &lt;a href=&#34;http://www.w3.org/TR/REC-xml/#sec-well-formed&#34;&gt;Well-Formed XML Documents&lt;/a&gt; section in the &lt;a href=&#34;http://www.w3.org/TR/REC-xml/&#34;&gt;XML specification&lt;/a&gt; you see that a well-formed document is defined as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[1] document ::= &lt;a href=&#34;http://www.w3.org/TR/REC-xml/#NT-prolog&#34;&gt;prolog&lt;/a&gt; &lt;a href=&#34;http://www.w3.org/TR/REC-xml/#NT-element&#34;&gt;element&lt;/a&gt; &lt;a href=&#34;http://www.w3.org/TR/REC-xml/#NT-Misc&#34;&gt;Misc*&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since there is only 1 root element (ever), i assumed that if you &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.xml.xmldocument.load.aspx&#34;&gt;Load&lt;/a&gt; this file with &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.xml.xmldocument.aspx&#34;&gt;XmlDocument&lt;/a&gt; their would be only one &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.xml.xmlnode.aspx&#34;&gt;XmlNode&lt;/a&gt; in the document &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.xml.xmlnode.childnodes.aspx&#34;&gt;ChildNodes&lt;/a&gt;. In reality there ChildNodes.Count returns 4.&lt;/p&gt;
&lt;p&gt;The simplest way to write this XmlDocument without the declaration would be as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;XmlWriterSettings xmlWriterSettings = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; XmlWriterSettings();
xmlWriterSettings.OmitXmlDeclaration = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
xmlWriterSettings.Encoding = Encoding.UTF8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (XmlWriter writer = XmlWriter.Create(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;result.xml&amp;#34;&lt;/span&gt;, xmlWriterSettings))
{
	xmlDoc.WriteTo(writer);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Introducing DeferredExecutionHelper</title>
      <link>/post/2008-02-23-introducing-deferredexecutionhelper/</link>
      <pubDate>Sat, 23 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-02-23-introducing-deferredexecutionhelper/</guid>
      <description>
        
          &lt;p&gt;Sometimes i don&amp;rsquo;t want a costly function to be performed unless it&amp;rsquo;s really necessary. In Patterns of Enterprise Application Architecture it&amp;rsquo;s described as &lt;a href=&#34;http://www.martinfowler.com/eaaCatalog/lazyLoad.html&#34;&gt;Lazy Load&lt;/a&gt;. Anyway, in order to achieve that i&amp;rsquo;ve written a wrapper for &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.runtime.remoting.proxies.realproxy.aspx&#34;&gt;RealProxy&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DeferredExecutionHelper&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IList&amp;lt;Tresult&amp;gt; GetListHelper&amp;lt;T, TResult&amp;gt;(Func&amp;lt;T, IList&amp;lt;Tresult&amp;gt;&amp;gt; costlyFunction, T t)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Proxy&amp;lt;T, IList&amp;lt;Tresult&amp;gt;&amp;gt;(costlyFunction, t).ResultProxy;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; TResult GetHelper&amp;lt;T, TResult&amp;gt;(Func&amp;lt;T, TResult&amp;gt; costlyFunction, T t) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; TResult : MarshalByRefObject
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Proxy&amp;lt;T, TResult&amp;gt;(costlyFunction, t).ResultProxy;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are a couple of unittests that demonstrate how the wrapper can be used for MarshalByRefObjects&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestMethod]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GetHelperTestDeferredExecution()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; expectedParameter = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;;
	Order expectedResult = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Order(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;amount&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Amount[] { &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Amount(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) }));

	&lt;span style=&#34;color:#75715e&#34;&gt;// DeferredExecutionHelper.GetHelper&amp;lt;T, TResult&amp;gt; where TResult : MarshalByRefObject
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	Order actualResult = DeferredExecutionHelper.GetHelper&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, Order&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; actualParameter)
	{
		Assert.AreEqual(expectedParameter, actualParameter);
		Assert.Fail(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Should not perform this method.&amp;#34;&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; expectedResult;
	}, expectedParameter);
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestMethod]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GetHelperTestDeferredExecutionResult()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; expectedParameter = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;;
	Order expectedResult = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Order(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;amount&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Amount[] { &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Amount(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) }));

	Order actualResult = DeferredExecutionHelper.GetHelper&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, Order&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; actualParameter)
	{
		Assert.AreEqual(expectedParameter, actualParameter);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; expectedResult;
	}, expectedParameter);

	Assert.AreEqual(expectedResult.Id, actualResult.Id);
	Assert.AreEqual(expectedResult.Amounts, actualResult.Amounts);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve also added a helper method that allows you to defer execution of methods that return an IList of T. Here are some tests that demonstrate it&amp;rsquo;s usage&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestMethod]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GetListHelperTestDeferredExecution()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; expectedParameter = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	IList&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; expectedResult = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; });

	IList&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; actualResult = DeferredExecutionHelper.GetListHelper&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; actualParameter)
	{
		Assert.AreEqual(expectedParameter, actualParameter);
		Assert.Fail(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Should not perform this method.&amp;#34;&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; expectedResult;
	}, expectedParameter);
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[TestMethod]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GetListHelperTestDeferredExecutionResult()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; expectedParameter = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	IList&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; expectedResult = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; });

	IList&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; actualResult = DeferredExecutionHelper.GetListHelper&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; actualParameter)
	{
		Assert.AreEqual(expectedParameter, actualParameter);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; expectedResult;
	}, expectedParameter);

	Assert.AreEqual(expectedResult.Count, actualResult.Count);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; expectedResult.Count; ++i) { Assert.AreEqual(expectedResult[i], actualResult[i]); } 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DeferredExecution.zip&#34;&gt;DeferredExecution.zip&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Generating Artifacts By Using Text Templates</title>
      <link>/post/2008-02-21-generating-artifacts-by-using-text-templates/</link>
      <pubDate>Thu, 21 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-02-21-generating-artifacts-by-using-text-templates/</guid>
      <description>
        
          &lt;p&gt;Since i remember myself thinking &amp;ldquo;I should look up that .tt templating thing&amp;rdquo; already a couple of times and always forgot to actually do so, i&amp;rsquo;m posting it here: &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/bb126445.aspx&#34;&gt;Generating Artifacts By Using Text Templates&lt;/a&gt;. The tools comes with the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/bb166441(VS.80).aspx&#34;&gt;Visual Studio SDK&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>How the name of an embedded resource is generated in a C# project</title>
      <link>/post/2008-02-20-how-the-name-of-an-embedded-resource-is-generated-in-a-c-project/</link>
      <pubDate>Wed, 20 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-02-20-how-the-name-of-an-embedded-resource-is-generated-in-a-c-project/</guid>
      <description>
        
          &lt;p&gt;A while ago i was wondering how the name of an embedded resource is generated in a C# project. Earlier today i was looking in Microsoft.CSharp.targets and found the answer&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The CreateManifestResourceNames target create the manifest resource names from the .RESX files.&lt;/p&gt;
&lt;p&gt;[IN]
@(ResxWithNoCulture) - The names the non-culture .RESX files.
@(ResxWithCulture) - The names the culture .RESX files.
@(NonResxWithNoCulture) - The names of the non-culture non-RESX files (like bitmaps, etc).
@(NonResxWithCulture) - The names of the culture non-RESX files (like bitmaps, etc).&lt;/p&gt;
&lt;p&gt;[OUT]
@(ManifestResourceWithNoCultureName) - The corresponding manifest resource name (.RESOURCE)
@(ManifestResourceWithCultureName) - The corresponding manifest resource name (.RESOURCE)
@(ManifestNonResxWithNoCulture) - The corresponding manifest resource name.
@(ManifestNonResxWithCulture) - The corresponding manifest resource name.&lt;/p&gt;
&lt;p&gt;For C# applications the transformation is like:&lt;/p&gt;
&lt;p&gt;Resources1.resx =&amp;gt; RootNamespace.Resources1 =&amp;gt; Build into main assembly
SubFolder\Resources1.resx =&amp;gt; RootNamespace.SubFolder.Resources1 =&amp;gt; Build into main assembly
Resources1.fr.resx =&amp;gt; RootNamespace.Resources1.fr =&amp;gt; Build into satellite assembly
Resources1.notaculture.resx =&amp;gt; RootNamespace.Resources1.notaculture =&amp;gt; Build into main assembly&lt;/p&gt;
&lt;p&gt;For other project systems, this transformation may be different.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With &lt;a href=&#34;http://www.attrice.info/msbuild/index.htm&#34;&gt;Attrice Corporation Microsoft Build Sidekick v2&lt;/a&gt; you can easily visualize the flow throughout the targets via Tools -&amp;gt; View Targets Diagram.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Updating Assembly References with TFS</title>
      <link>/post/2008-02-18-updating-assembly-references-with-tfs/</link>
      <pubDate>Mon, 18 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-02-18-updating-assembly-references-with-tfs/</guid>
      <description>
        
          &lt;p&gt;A while ago i &lt;a href=&#34;http://www.timvw.be/programming-the-csproj-file/&#34;&gt;posted some code that allows you to update the Assembly references&lt;/a&gt;. Here is some code that uses the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/bb130146(VS.80).aspx&#34;&gt;Team Foundation Server SDK&lt;/a&gt; that checks the csproj files out and updates their references. Afterwards it&amp;rsquo;s possible to check the modified csproj files in with a reference to a WorkItem (or to undo the checkout in case no modifications were made).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; tfsServerName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tfsrtm08&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; projectsPath = &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;D:\Projects&amp;#34;&lt;/span&gt;;

	Console.WriteLine( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connecting to TFS [&amp;#34;&lt;/span&gt; + tfsServerName + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]...&amp;#34;&lt;/span&gt; );
	TeamFoundationServer teamFoundationServer = TeamFoundationServerFactory.GetServer( tfsServerName );

	Console.WriteLine( Environment.NewLine + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Modified ProjectFiles:&amp;#34;&lt;/span&gt; );
	List&amp;lt;workspace&amp;gt; workSpacesWithUpdatedProjectFiles = UpdateReferencesInProjectFiles( teamFoundationServer, projectsPath );

	Console.WriteLine( Environment.NewLine + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Modified Workspaces: &amp;#34;&lt;/span&gt; );
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;( Workspace workSpace &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; workSpacesWithUpdatedProjectFiles )
	{
		Console.WriteLine( workSpace.Name );
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;//int workItemId = -1;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//CheckInPendingChanges( teamFoundationServer, workItemId, workSpacesWithUpdatedProjectFiles );
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	Console.Write( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine );
	Console.ReadKey();
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; List&amp;lt;workspace&amp;gt; UpdateReferencesInProjectFiles( TeamFoundationServer teamFoundationServer, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; projectsPath )
{
	VersionControlServer versionControlServer = (VersionControlServer) teamFoundationServer.GetService( &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;( VersionControlServer ) );

	List&amp;lt;workspace&amp;gt; workSpacesWithUpdatedProjectFiles = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;workspace&amp;gt;();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; projectFileName &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; ProjectFile.Find( projectsPath ) )
	{
		Workspace workSpace = versionControlServer.GetWorkspace( Path.GetFullPath( projectFileName ) );
		workSpace.PendEdit( projectFileName );

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( UpdateReferencesInProjectFile( projectFileName ) )
		{
			Console.WriteLine( projectFileName );
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( !workSpacesWithUpdatedProjectFiles.Contains( workSpace ) )
			{
				workSpacesWithUpdatedProjectFiles.Add( workSpace );
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		{
			workSpace.Undo( projectFileName );
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; workSpacesWithUpdatedProjectFiles;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; CheckInPendingChanges( TeamFoundationServer teamFoundationServer, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; workItemId, List&amp;lt;workspace&amp;gt; workSpacesWithUpdatedProjectFiles )
{
	WorkItemStore workItemStore = (WorkItemStore) teamFoundationServer.GetService( &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;( WorkItemStore ) );

	WorkItem workItem = workItemStore.GetWorkItem( workItemId );
	WorkItemCheckinInfo[] workItemChanges = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WorkItemCheckinInfo[] { &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WorkItemCheckinInfo( workItem, WorkItemCheckinAction.Associate ) };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;( Workspace workSpace &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; workSpacesWithUpdatedProjectFiles )
	{
		PendingChange[] pendingChanges = workSpace.GetPendingChanges();
		workSpace.CheckIn( pendingChanges, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, workItemChanges, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; );
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to download the code: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ReferenceManager.zip&#34;&gt;ReferenceManager.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Programming the csproj file</title>
      <link>/post/2008-01-25-programming-the-csproj-file/</link>
      <pubDate>Fri, 25 Jan 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-01-25-programming-the-csproj-file/</guid>
      <description>
        
          &lt;p&gt;Imagine that you have a couple of project files that reference framework libraries that are on a buildserver. Upgrading to a newer version requires that you update all the references&amp;hellip; I wrote some wrapper classes (&lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ProjectFile.txt&#34;&gt;ProjectFile&lt;/a&gt;, &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/AssemblyReference.txt&#34;&gt;AssemblyReference&lt;/a&gt;) that make this tedious task a breeze. Here is an example of their usage&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; path = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D:\\Projects\\MyProject&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] projectFileNames = ProjectFile.Find(path);
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; projectFileName &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; projectFileNames)
{
	ProjectFile projectFile = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProjectFile(projectFileName);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; updated = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (AssemblyReference assemblyReference &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; projectFile.AssemblyReferences)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (assemblyReference.HintPath.ToLower().StartsWith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\\\buildserver\\framework\\2.0&amp;#34;&lt;/span&gt;))
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; newHintPath = assemblyReference.HintPath.Replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\2.0\\&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\2.1\\&amp;#34;&lt;/span&gt;);
			assemblyReference.HintPath = newHintPath;

			AssemblyName assemblyName = AssemblyName.GetAssemblyName(assemblyReference.HintPath);
			assemblyReference.AssemblyName = assemblyName.FullName + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, processorArchitecture=&amp;#34;&lt;/span&gt; + assemblyName.ProcessorArchitecture;

			updated = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (updated)
	{
		projectFile.Save();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Be careful because it might be possible that the code changes the encoding of your csproj file (and it seems that the TFS 2005 merge tool doesn&amp;rsquo;t like that). Currently files are written as UTF-8, which is the default for VS2005 csproj files.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Build your own netstat.exe with c#</title>
      <link>/post/2007-09-09-build-your-own-netstatexe-with-c/</link>
      <pubDate>Sun, 09 Sep 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-09-09-build-your-own-netstatexe-with-c/</guid>
      <description>
        
          &lt;p&gt;Earlier today i wrote ManagedIpHelper, a wrapper for &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/aa366073.aspx&#34;&gt;IP Helper API&lt;/a&gt; it&amp;rsquo;s &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/aa365928.aspx&#34;&gt;GetExtendedTcpTable&lt;/a&gt;. Using this wrapper i could easily create my own version of netstat.exe. The following code generates the same output (but much faster) than &amp;ldquo;netstat.exe -anvbp tcp&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
{
	Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Active Connections&amp;#34;&lt;/span&gt;);
	Console.WriteLine();

	Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; Proto Local Address Foreign Address State PID&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (TcpRow tcpRow &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; ManagedIpHelper.GetExtendedTcpTable(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;))
	{
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; {0,-7}{1,-23}{2, -23}{3,-14}{4}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TCP&amp;#34;&lt;/span&gt;, tcpRow.LocalEndPoint, tcpRow.RemoteEndPoint, tcpRow.State, tcpRow.ProcessId);

		Process process = Process.GetProcessById(tcpRow.ProcessId);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (process.ProcessName != &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System&amp;#34;&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (ProcessModule processModule &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; process.Modules)
			{
				Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; {0}&amp;#34;&lt;/span&gt;, processModule.FileName);
			}

			Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; [{0}]&amp;#34;&lt;/span&gt;, Path.GetFileName(process.MainModule.FileName));
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		{
			Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; -- unknown component(s) --&amp;#34;&lt;/span&gt;);
			Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; [{0}]&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System&amp;#34;&lt;/span&gt;);
		}

		Console.WriteLine();
	}

	Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine);
	Console.ReadKey();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As always, feel free to download the code for the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/managediphelperanddemo.zip&#34;&gt;ManagedIpHelper and demo&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting SqlCeClientFactory</title>
      <link>/post/2007-09-09-presenting-sqlceclientfactory/</link>
      <pubDate>Sun, 09 Sep 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-09-09-presenting-sqlceclientfactory/</guid>
      <description>
        
          &lt;p&gt;Apart from Microsoft.SqlServerCe.Client.SqlCeClientFactory in Microsoft.SqlServerCe.Client (an undocumented and unsupported library) there is no DbProviderFactory for System.Data.SqlServerCe. Today i decided to write a SqlCeClientFactory&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SqlCeClientFactory&lt;/span&gt; : DbProviderFactory
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; SqlCeClientFactory Instance = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlCeClientFactory();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; DbCommand CreateCommand()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlCeCommand();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; DbCommandBuilder CreateCommandBuilder()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlCeCommandBuilder();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; DbConnection CreateConnection()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlCeConnection();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; DbDataAdapter CreateDataAdapter()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlCeDataAdapter();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; DbParameter CreateParameter()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SqlCeParameter();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, the implementation is trivial, so i still wonder why microsoft didn&amp;rsquo;t provide it. Anyway, here is how our App.config would look like if we wanted to register and use the SqlCeClientFactory (we could also install the assembly in the GAC and edit machine.config so that all applications can take advantage of it)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;connectionStrings&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;add&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localdb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;providerName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System.Data.SqlServerCe&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connectionString=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Data Source=&amp;#39;localdb.sdf&amp;#39;;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/connectionStrings&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;system.data&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dbProviderFactories&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;add&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SQL Server Everywhere Edition Data Provider&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;invariant=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System.Data.SqlServerCe&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;description=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.NET Framework Data Provider for Microsoft SQL Server Everywhere Edition&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SqlCeApplication.SqlCeClientFactory, SqlCeApplication&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dbProviderFactories&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/system.data&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can use the &lt;a href=&#34;http://www.timvw.be/helper-methods-for-dbconnection/&#34;&gt;DbConnectionHelper&lt;/a&gt; to create a DbConnection and do some work&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (DbConnection conn = DbConnectionHelper.GetConnection(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localdb&amp;#34;&lt;/span&gt;))
	{
		conn.Open();
		&lt;span style=&#34;color:#75715e&#34;&gt;// do some work...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}

	Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine);
	Console.ReadKey();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Query a Web Service hosted outside IIS with it&#39;s DNS name</title>
      <link>/post/2007-09-08-host-a-web-service-outside-iis/</link>
      <pubDate>Sat, 08 Sep 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-09-08-host-a-web-service-outside-iis/</guid>
      <description>
        
          &lt;p&gt;Yesterday someone asked the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;My first attempt was to simulate the problem. I added an entry in my hosts file so that example.com resolves to 192.168.10.1 (My machine&amp;rsquo;s IP address) and wrote the following code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;EndpointReference epr = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EndpointReference(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;soap.tcp://example.com:9090/BookService&amp;#34;&lt;/span&gt;));
SoapReceivers.Add(epr, &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(BookService));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When i tried to run this code i received an ArgumentException: &amp;ldquo;WSE813: The following transport address could not be mapped to a local network interface: soap.tcp://example.com:9090/BookService&amp;rdquo;. My intuition said that i should help the infrastructure a little&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;EndpointReference epr = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EndpointReference(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;soap.tcp://192.168.10.1:9090/BookService&amp;#34;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The application started fine this time, but when i used wsewsdl3.exe to generate the proxy i received the following error: Destination Unreachable. Anyway, after a lot of experimenting i found that the following method allows me to generate a proxy using the DNS name&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; EndpointReference GetEndpointReference(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; host, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; port, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; path)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// we happy:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// for the Address part we use the DNS name
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// infrastructure happy:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// for the Via par we use the first IP that maps to the provided DNS name
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	Uri address = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;soap.tcp://{0}:{1}/{2}&amp;#34;&lt;/span&gt;, host, port, path));
	Uri via = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;soap.tcp://{0}:{1}/{2}&amp;#34;&lt;/span&gt;, Dns.GetHostEntry(host).AddressList[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], port, path));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EndpointReference(address, via);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
{
	EndpointReference epr = GetEndpointReference(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9090&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BookService&amp;#34;&lt;/span&gt;);
	SoapReceivers.Add(epr, &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(BookService));

	Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine);
	Console.ReadKey();

	SoapReceivers.Remove(epr);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As always, you can download a sample solution with a windows service that hosts the webservice, and a console application that consumes the webservice: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/MsdnSoapExample.zip&#34;&gt;MsdnSoapExample.zip&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Using DateTimePicker and Custom Format</title>
      <link>/post/2007-08-29-using-datetimepicker-and-custom-format/</link>
      <pubDate>Wed, 29 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-29-using-datetimepicker-and-custom-format/</guid>
      <description>
        
          &lt;p&gt;Today we ran into a nasty problem with &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datetimepickerformat.aspx&#34;&gt;DateTimePickerFormat&lt;/a&gt;.Custom. We allow the user to input a month/date with a DateTimePicker as following (nothing fancy)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_Load(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTimePicker1.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTimePicker1.Format = DateTimePickerFormat.Custom;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTimePicker1.CustomFormat = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MM/yyyy&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, change to 09/2007 and notice that you get an Exception, because the control tries to create an unrepresentable new DateTime(2007, 8+1, 31). Thus, if you&amp;rsquo;re going to use the DateTimePicker for MM/yyyy input make sure to set it&amp;rsquo;s value to a DateTimeTime with a day component that exists for all months/years (thus a value between 1 and 28).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Addendum:&lt;/strong&gt; As usual, super moderator and MVP &lt;a href=&#34;https://mvp.support.microsoft.com/default.aspx/profile=6c93adc6-026f-42bf-823c-8e65ca732af2&#34;&gt;Hans Passant&lt;/a&gt; provided a nice workaround for the problem:)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MonthPicker&lt;/span&gt; : DateTimePicker 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MonthPicker() 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Format = DateTimePickerFormat.Custom;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.CustomFormat = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MM/yyyy&amp;#34;&lt;/span&gt;;
		DateTime now = DateTime.Now;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(now.Year, now.Month, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	}
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; WndProc(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; Message m) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m.Msg == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;x204e) 
		{
			NMHDR hdr = (NMHDR)m.GetLParam(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(NMHDR));
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hdr.code == -&lt;span style=&#34;color:#ae81ff&#34;&gt;759&lt;/span&gt;) 
				{
					NMDATETIMECHANGE dt = (NMDATETIMECHANGE)m.GetLParam(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(NMDATETIMECHANGE));
					&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(dt.st.wYear, dt.st.wMonth, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
				}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.WndProc(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; m);
	}
	
	&lt;span style=&#34;color:#75715e&#34;&gt;// P/Invoke declarations
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[StructLayout(LayoutKind.Sequential)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NMHDR&lt;/span&gt; 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IntPtr hWnd;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IntPtr id;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; code;
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;	
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NMDATETIMECHANGE&lt;/span&gt; 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; NMHDR nmhdr;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dwFlags;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SYSTEMTIME st;
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;	
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[StructLayout(LayoutKind.Sequential)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SYSTEMTIME&lt;/span&gt; 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wYear;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wMonth;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wDayOfWeek;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wDay;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wHour;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wMinute;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wSecond;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; wMilliseconds;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>ClickOnce Deployment is not user-friendly!</title>
      <link>/post/2007-08-26-clickonce-deployment-is-not-user-friendly/</link>
      <pubDate>Sun, 26 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-26-clickonce-deployment-is-not-user-friendly/</guid>
      <description>
        
          &lt;p&gt;Today i was experimenting with &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/t71a733d(VS.80).aspx&#34;&gt;ClickOnce Deployment&lt;/a&gt;. Some people have warned for the elevation of permissions: &lt;a href=&#34;http://www.leastprivilege.com/BewareBeAwareOfClickOnceDefaultSettings.aspx&#34;&gt;Be aware of ClickOnce default settings&lt;/a&gt;. What i find even more annoying is the fact that all you get to see are the following dialogs&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/clickonce-permissions-01.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/clickonce-permissions-02.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If the user has to make an informed decision about the permissions he&amp;rsquo;s going to grant to an application he should have atleast an easily accessible dialog that displays the PermissionSet that is being request. &lt;strong&gt;Having to browse to the manifest file to find the PermissionSet is NOT user-friendly!&lt;/strong&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>WordPress: Import Blogroll from Sage</title>
      <link>/post/2007-08-25-wordpress-import-blogroll-from-sage/</link>
      <pubDate>Sat, 25 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-25-wordpress-import-blogroll-from-sage/</guid>
      <description>
        
          &lt;p&gt;Earlier today i exported the list with blogs i read from &lt;a href=&#34;http://sage.mozdev.org/&#34;&gt;Sage&lt;/a&gt; and tried to import them into &lt;a href=&#34;http://wordpress.org&#34;&gt;WordPress&lt;/a&gt;. Although all the entries had been processed but none of them appeared. Apparently you have to rename the xmlUrl attribute to htmlUrl in the &lt;a href=&#34;http://en.wikipedia.org/wiki/OPML&#34;&gt;OPML&lt;/a&gt; file. With Vim that&amp;rsquo;s as simple as &amp;ldquo;:%s/xmlUrl/htmlUrl/g&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Anyway, feel free to see if you find anything interesting in the &lt;a href=&#34;http://www.timvw.be/wp-links-opml.php&#34;&gt;list of blogs i&amp;rsquo;m reading&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Bending the code generation of IExtenderProvider to your will</title>
      <link>/post/2007-08-21-bending-the-code-generation-of-iextenderprovider-to-your-will/</link>
      <pubDate>Tue, 21 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-21-bending-the-code-generation-of-iextenderprovider-to-your-will/</guid>
      <description>
        
          &lt;p&gt;In &lt;a href=&#34;http://www.timvw.be/exploring-codedomserializer/&#34;&gt;Exploring CodeDomSerializer&lt;/a&gt; i already explained how we can modify the code that the Visual Studio designer generates for us. With a typical &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.iextenderprovider.aspx&#34;&gt;IExtenderProvider&lt;/a&gt; the designer generates an initializer, SetXXX methods and a variable declaration, which looks like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.constantsExtenderProvider1 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WindowsApplication1.ConstantsExtenderProvider();

&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.constantsExtenderProvider1.SetConstants(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.button1, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] {
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Operation1&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Operation5&amp;#34;&lt;/span&gt;});

&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.constantsExtenderProvider1.SetConstants(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ConstantsExtenderProvider constantsExtenderProvider1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, what if we&amp;rsquo;re not happy with those generated SetXXX methods on each Component? The problem is that this code is not generated by the serializer for the ConstantsExtenderProvider but by the serializers for the Components. An easy workaround for this problem is to set the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.designerserializationvisibilityattribute.aspx&#34;&gt;DesignerSerializationVisibilityAttribute&lt;/a&gt; on the GetXXX method in our IExtenderProvider to &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.designerserializationvisibility.aspx&#34;&gt;Hidden&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With those ugly SetXXX methods out of the way it&amp;rsquo;s up to us to do it better. We do this by implementing a custom serializer for our ConstantsExtenderProvider&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConstantsSerializer&lt;/span&gt;&amp;lt;T&amp;gt; : CodeDomSerializer
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; Serialize(IDesignerSerializationManager manager, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
	{
		ConstantsExtenderProvider provider = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ConstantsExtenderProvider;

		CodeDomSerializer baseClassSerializer = manager.GetSerializer(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(ConstantsExtenderProvider).BaseType, &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(CodeDomSerializer)) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CodeDomSerializer;
		CodeStatementCollection statements = baseClassSerializer.Serialize(manager, &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CodeStatementCollection;

		IDesignerHost host = (IDesignerHost)manager.GetService(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(IDesignerHost));
		ComponentCollection components = host.Container.Components;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.SerializeExtender(manager, provider, components, statements);

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; statements;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SerializeExtender(IDesignerSerializationManager manager, ConstantsExtenderProvider provider, ComponentCollection components, CodeStatementCollection statements)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (IComponent component &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; components)
		{
			Control control = component &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Control;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (control != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; (control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Form == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;))
			{
				CodeMethodInvokeExpression methodcall = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeMethodInvokeExpression(&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.SerializeToExpression(manager, provider), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SetConstants&amp;#34;&lt;/span&gt;);
				methodcall.Parameters.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeFieldReferenceExpression(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeThisReferenceExpression(), control.Name));

				&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] constants = provider.GetConstants(control);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (constants != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
				{
					StringBuilder sb = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuilder();
					sb.Append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new string[] { &amp;#34;&lt;/span&gt;);

					&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; constant &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; constants)
					{
						sb.Append(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T).FullName);
						sb.Append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;);
						sb.Append(constant);
						sb.Append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;);
					}

					sb.Remove(sb.Length -- &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
					sb.Append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; }&amp;#34;&lt;/span&gt;);

					methodcall.Parameters.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeSnippetExpression(sb.ToString()));
				}
				&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
				{
					methodcall.Parameters.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodePrimitiveExpression(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;));
				}

				statements.Add(methodcall);
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now the generated code looks like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.constantsExtenderProvider1.SetConstants(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.button1, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { WindowsApplication1.Constants.Operation1, WindowsApplication1.Constants.Operation5 });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As always, feel free to download the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ConstantsExtenderProvider.zip&#34;&gt;ConstantsExtenderProvider&lt;/a&gt; source.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring CodeDomSerializer</title>
      <link>/post/2007-08-17-exploring-codedomserializer/</link>
      <pubDate>Fri, 17 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-17-exploring-codedomserializer/</guid>
      <description>
        
          &lt;p&gt;Sometimes we want absolute control over the code that the visual studio designer generates. Imagine that we have a UserControl with a Number property and instead of the default &amp;ldquo;this.userControl1.Number = 27;&amp;rdquo; code that the designer would generate we want it like &amp;ldquo;this.userControl1.Number = 1 + 3 + 23&amp;rdquo;. In order to achieve this we first have to inform the designer that we want custom serialization. This is done by adding a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.design.serialization.designerserializerattribute.aspx&#34;&gt;DesignerSerializerAttribute&lt;/a&gt; to our UserControl&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[DesignerSerializer(typeof(PrimeSerializer), typeof(CodeDomSerializer))]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserControl1&lt;/span&gt; : UserControl
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; number;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Number
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.number; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.number = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now it&amp;rsquo;s time to implement the PrimeSerializer for the custom assignment code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrimeSerializer&lt;/span&gt; : CodeDomSerializer
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; Serialize(IDesignerSerializationManager manager, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
	{
		UserControl1 uc = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; UserControl1;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (uc == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;; }

		&lt;span style=&#34;color:#75715e&#34;&gt;// Instead of implementing all the serialization code, we&amp;#39;ll rely on the implementation of the baseclass, namely UserControl
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		CodeDomSerializer baseClassSerializer = manager.GetSerializer(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(UserControl1).BaseType, &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(CodeDomSerializer)) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CodeDomSerializer;
		Object codeObject = baseClassSerializer.Serialize(manager, &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;);

		&lt;span style=&#34;color:#75715e&#34;&gt;// The only thing we have to do is find the statement where the assigment to the Number property is made, and replace that...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		CodeStatementCollection codeStatements = codeObject &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CodeStatementCollection;
		CodeAssignStatement numberAssignmentStatement = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.FindNumberCodeStatement(codeStatements) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CodeAssignStatement;
		numberAssignmentStatement.Right = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeSnippetExpression(GetNumberAsSumOfPrimes(uc.Number));

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; codeObject;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; CodeStatement FindNumberCodeStatement(CodeStatementCollection codeStatements)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (CodeStatement codeStatement &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; codeStatements)
		{
			CodeAssignStatement codeAssignment = codeStatement &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CodeAssignStatement;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (codeAssignment != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
			{
				CodePropertyReferenceExpression left = codeAssignment.Left &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; CodePropertyReferenceExpression;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (left != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; left.PropertyName == &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number&amp;#34;&lt;/span&gt;)
				{
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; codeStatement;
				}
			}
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Exception(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The CodeStatement for Number was not found&amp;#34;&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetNumberAsSumOfPrimes(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; number)
	{
		StringBuilder sb = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuilder();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] primes = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; };
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = primes.Length -- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; number &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; --i)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (primes[i] &amp;lt;= number) 
			{ 
				sb.Insert(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, primes[i]); sb.Insert(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; + &amp;#34;&lt;/span&gt;); 
				number -= primes[i]; 
			} 
		} 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sb.ToString().Substring(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;); 
	} 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can look at the generated code in Form1.Designer.cs to verify everything works as expected&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// userControl1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.userControl1.BackColor = System.Drawing.Color.Maroon;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.userControl1.Location = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; System.Drawing.Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.userControl1.Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;userControl11&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.userControl1.Number = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; + &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; + &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.userControl1.Size = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; System.Drawing.Size(&lt;span style=&#34;color:#ae81ff&#34;&gt;686&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;294&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.userControl1.TabIndex = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ll leave the implementation of the Deserialize method up to you. By adding the DesignerSerializer attribute to our &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.iextenderprovider.aspx&#34;&gt;IExtenderProvider&lt;/a&gt; implementations we can get full control over their code generation too 🙂&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>StreamHelper</title>
      <link>/post/2007-08-17-streamhelper/</link>
      <pubDate>Fri, 17 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-17-streamhelper/</guid>
      <description>
        
          &lt;p&gt;The following is an example of a classic mistake for people that read from a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;Stream&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;Offcourse, if you look at the documentation for the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.io.stream.read.aspx&#34;&gt;Read&lt;/a&gt; method it clearly says that the function returns the number of bytes that were actually read. Here is a little helper function that keeps you from writing the same code over and over again&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Copy(Stream input, Stream output, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bufferSize)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] buffer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[bufferSize];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bytesRead;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;((bytesRead = input.Read(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, bufferSize)) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	{
		output.Write(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, bytesRead);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And as usual, a little demo of it&amp;rsquo;s use&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DownloadFile(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; url, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; path)
{
	WebRequest req = WebRequest.Create(url);
	WebResponse rsp = req.GetResponse();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (Stream input = rsp.GetResponseStream())
	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (Stream output = File.Open(path, FileMode.Create))
	{
		StreamHelper.Copy(input, output, &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
{
	DownloadFile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ftp://example.com/pub/test.bin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;c:\test.bin&amp;#34;&lt;/span&gt;);

	Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine);
	Console.ReadKey();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>List string resources</title>
      <link>/post/2007-08-11-list-string-resources/</link>
      <pubDate>Sat, 11 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-11-list-string-resources/</guid>
      <description>
        
          &lt;p&gt;Earlier today someone asked how he could list the string resources (name, value and comment) in a Resource file. Here is some code that generates a nice list of the information&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
{
	DislayResourceStrings(GetResourceStrings(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;C:\Resource1.resx&amp;#34;&lt;/span&gt;));

	Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine);
	Console.ReadKey();
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; List&amp;lt;resourceString&amp;gt; GetResourceStrings(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; path)
{
	List&amp;lt;resourceString&amp;gt; resourceStrings = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;resourceString&amp;gt;();

	XPathDocument doc = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; XPathDocument(path);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (XPathNavigator node &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; doc.CreateNavigator().Select(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//data&amp;#34;&lt;/span&gt;))
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; type = node.GetAttribute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type == &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty)
		{
			XPathNavigator nav;

			&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name = node.GetAttribute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty);
			nav = node.SelectSingleNode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./value&amp;#34;&lt;/span&gt;);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; = nav != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; ? nav.Value : &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty;

			nav = node.SelectSingleNode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./comment&amp;#34;&lt;/span&gt;);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; comment = nav != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; ? nav.Value : &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty;

			resourceStrings.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ResourceString(name, &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;, comment));
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; resourceStrings;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DisplayResourceStrings(List&amp;lt;resourceString&amp;gt; resourceStrings)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; format = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0, -25} {1, -25} {2, -25}&amp;#34;&lt;/span&gt;;
	Console.WriteLine(format, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Value&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Comment&amp;#34;&lt;/span&gt;);
	Console.WriteLine(format, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;---&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;----&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-----&amp;#34;&lt;/span&gt;);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (ResourceString resourceString &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; resourceStrings)
	{
		Console.WriteLine(format, resourceString.Name, resourceString.Value, resourceString.Comment);
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceString&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Value;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Comment;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ResourceString(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; comment)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Name = name;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Comment = comment;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Debugging custom UITypeEditors</title>
      <link>/post/2007-08-10-debugging-custom-uitypeeditors/</link>
      <pubDate>Fri, 10 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-10-debugging-custom-uitypeeditors/</guid>
      <description>
        
          &lt;p&gt;If you read this you&amp;rsquo;re probably gonna think: What a moron! Anyway, i&amp;rsquo;m sharing this in the hope that i&amp;rsquo;ll be the last to undergo the following. In order to test my custom &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.drawing.design.uitypeeditor.aspx&#34;&gt;UITypeEditor&lt;/a&gt; i did the following&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.usercontrol.aspx&#34;&gt;UserControl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add a property to the control&lt;/li&gt;
&lt;li&gt;Add an &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.editorattribute.aspx&#34;&gt;Editor&lt;/a&gt; attribute to the property&lt;/li&gt;
&lt;li&gt;Build&lt;/li&gt;
&lt;li&gt;Drag a UserControl on the designer form&lt;/li&gt;
&lt;li&gt;Test via Visual Studio&amp;rsquo;s Property Window if the UITypeEditor works as expected&lt;/li&gt;
&lt;li&gt;Everytime i changed some code: &lt;strong&gt;Restart Visual Studio&lt;/strong&gt;, load the project and repeat 6.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A tedious task to say the least. Yesterday i figured out that i could &lt;strong&gt;drag a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.propertygrid.aspx&#34;&gt;PropertyGrid&lt;/a&gt; on the designer form, and set it&amp;rsquo;s SelectedObject property to a class with a property that uses the custom UITypeEditor; Instead of having to reload visual studio i can simply start a debug session, and click on the property in the PropertyGrid.&lt;/strong&gt; Now it&amp;rsquo;s a breeze to develop custom UITypeEditors.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/uitypeeditor.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_Load(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// display an instance of PersonEntry,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// a class with a property that should use the custom UITypeEditor i want to test
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.propertyGrid1.SelectedObject = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonEntry(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tim&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Van Wassenhove&amp;#34;&lt;/span&gt;));
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonEntry&lt;/span&gt;
{
	...

	&lt;span style=&#34;color:#75715e&#34;&gt;// instruct the PropertyGrid to use my custom PersonUITypeEditor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[Editor(typeof(PersonUITypeEditor), typeof(UITypeEditor))]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person Person
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.person; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.person = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonUITypeEditor&lt;/span&gt; : UITypeEditor
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; UITypeEditorEditStyle.Modal;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; EditValue(ITypeDescriptorContext context, IServiceProvider provider, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
	{
		Person person = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Person;

		IWindowsFormsEditorService svc = context.GetService(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(IWindowsFormsEditorService)) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; IWindowsFormsEditorService;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (svc != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (PersonEditorForm personEditorForm = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonEditorForm(person))
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (svc.ShowDialog(personEditorForm) == DialogResult.OK)
				{
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; personEditorForm.Person;
				}
			}
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Helper methods for DbProviderFactory</title>
      <link>/post/2007-08-07-helper-methods-for-dbconnection/</link>
      <pubDate>Tue, 07 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-07-helper-methods-for-dbconnection/</guid>
      <description>
        
          &lt;p&gt;Here are a couple of functions that make it easier to take advantage of the DbProviderFactory to create DbConnections&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DbConnection GetDbConnection(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; connectionStringName)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GetDbConnection(ConfigurationManager.ConnectionStrings[connectionStringName]);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DbConnection GetDbConnection(ConnectionStringSettings connectionStringSettings)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GetDbConnection(connectionStringSettings.ProviderName, connectionStringSettings.ConnectionString);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DbConnection GetDbConnection(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; providerInvariantName, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; connectionString)
{
	DbConnection connection = DbProviderFactories.GetFactory(providerInvariantName).CreateConnection();
	connection.ConnectionString = connectionString;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; connection;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using these functions, the pattern for querying a database could be something as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (DbConnection conn = GetDbConnection(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Local_Northwind&amp;#34;&lt;/span&gt;))
{
	conn.Open();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (DbCommand cmd = conn.CreateCommand())
	{
		cmd.CommandText = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT EmployeeID, FirstName, LastName FROM Employees&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (DbDataReader reader = cmd.ExecuteReader())
		{
			&lt;span style=&#34;color:#75715e&#34;&gt;// process the result
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Professional SQL Server 2005 Reporting Services</title>
      <link>/post/2007-08-04-professional-sql-server-2005-reporting-services/</link>
      <pubDate>Sat, 04 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-08-04-professional-sql-server-2005-reporting-services/</guid>
      <description>
        
          &lt;p&gt;Last couple of days i&amp;rsquo;ve been reading &lt;a href=&#34;http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764568787.html&#34;&gt;Professional SQL Server Reporting Services&lt;/a&gt;. Today i wanted to display some images so i decided to use the Northwind database which has an Employees table that contains photos.. I set the MIMEType to image/bmp, Source to Database and Value to =Fields!Photo.Value but i kept getting a red cross instead of the image&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/reportingservices-01.gif&#34; alt=&#34;image of a sql server reporting service report where an error box appears instead of the image&#34;&gt;&lt;/p&gt;
&lt;p&gt;After a lot of searching, i found the following in &lt;a href=&#34;http://www.sqlreportingservices.net/BookSrs2000/default.aspx&#34;&gt;Hitchhiker&amp;rsquo;s Guide to SQL Server 2000 Reporting Services&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  And yes, once i used this as value for the image, everything worked as expected:
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  &amp;lt;img src=&amp;quot;http://www.timvw.be/wp-content/images/reportingservices-02.gif&amp;quot; alt=&amp;quot;image of a sql server reporting service report where an image is correctly displayed&amp;quot; /&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring formatting...</title>
      <link>/post/2007-07-28-exploring-formatting/</link>
      <pubDate>Sat, 28 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-07-28-exploring-formatting/</guid>
      <description>
        
          &lt;p&gt;In the documentation you can read the following for &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.globalization.cultureinfo.aspx&#34;&gt;CultureInfo&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;First i&amp;rsquo;ll initialize an instance of a customized CultureInfo and install it in the current thread:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;CultureInfo appCultureInfo = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CultureInfo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en-US&amp;#34;&lt;/span&gt;);
appCultureInfo.NumberFormat.NumberDecimalSeparator = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;;
appCultureInfo.NumberFormat.NumberGroupSeparator = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
appCultureInfo.NumberFormat.NumberDecimalDigits = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
appCultureInfo.NumberFormat.CurrencySymbol = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;€&amp;#34;&lt;/span&gt;;
Thread.CurrentThread.CurrentCulture = appCultureInfo;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The culture in Thread.CurrentThread.CurrentUICulture is only used by the Resource Manager to lookup culture-specific resources at run-time. Since we&amp;rsquo;re not playing with resources, we don&amp;rsquo;t have to care about this one.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t provide the desired format specifier, you will get the generic format specifier &amp;ldquo;G&amp;rdquo; ( Standard &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/dwhawy9k(VS.71).aspx&#34;&gt;Numeric&lt;/a&gt;, &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/az4se3k1(VS.71).aspx&#34;&gt;DateTime&lt;/a&gt;, &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/c3s1ez6e(VS.71).aspx&#34;&gt;Enumeration&lt;/a&gt; Format Strings) And now it&amp;rsquo;s time for a little demo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; SomeValue
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12345.6789&lt;/span&gt;; }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_Load(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	label1.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default to generic format: &amp;#34;&lt;/span&gt; + SomeValue.ToString();
	label2.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;numeric format: &amp;#34;&lt;/span&gt; + SomeValue.ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;);
	label3.Text = String.Format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;currency format: {0:C}&amp;#34;&lt;/span&gt;, SomeValue);
	label4.DataBindings.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SomeValue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, DataSourceUpdateMode.Never, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column1.DefaultCellStyle.Format = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E1&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column1.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SomeValue&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Form1[] { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/formatting-01.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another important interface for formatting is &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.IFormattable.aspx&#34;&gt;IFormattable&lt;/a&gt; which provides functionality to format the value of an object into a string representation. Put simply, it allows you to define your own format specifiers. Here is an example that allows the user to build his own representation of a Person&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; : IFormattable
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// omitted the code for 4 properties: Id, Name, Title and Birthday
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; ToString()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{Id}, {Name}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; ToString(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; format, IFormatProvider formatProvider)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; actualFormat = format;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] replacements = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Title&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Birthday&amp;#34;&lt;/span&gt; };
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; replacements.Length; ++i) 
		{ 
			actualFormat = actualFormat.Replace(replacements[i], i.ToString()); 
		} 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Format(actualFormat, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.title, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.birthday); 
	} 
} 

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_Load(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e) 
{ 
	List&amp;lt;person&amp;gt; persons = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;person&amp;gt;();
	persons.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1980&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tim&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sir&amp;#34;&lt;/span&gt;));
	persons.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1974&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jenna&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Miss&amp;#34;&lt;/span&gt;));

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox1.FormatString = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{Name} born on {Birthday}&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox1.FormattingEnabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox1.DataSource = persons;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/formatting-02.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Using interfaces with Drag and Drop</title>
      <link>/post/2007-07-26-using-interfaces-with-drag-and-drop/</link>
      <pubDate>Thu, 26 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-07-26-using-interfaces-with-drag-and-drop/</guid>
      <description>
        
          &lt;p&gt;Earlier today i was refactoring some graphical components. I wanted to use an interface instead of concrete implementations for my drag and drop code&amp;hellip; Although i was using an instance of Foo, and thus IFoo, the following code never allowed me to drop&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IFoo { }
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; : IFoo { }

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; label1_MouseDown(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, MouseEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.DoDragDrop(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Foo(), DragDropEffects.All);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_DragEnter(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DragEventArgs e)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// for an instance of Foo it returns false,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// if you use typeof(Foo) it returns true though...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e.Data.GetDataPresent(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(IFoo)))
	{
		e.Effect = DragDropEffects.All;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simply wrapping the concrete instance in a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.dataobject(VS.80).aspx&#34;&gt;DataObject&lt;/a&gt; results in the desired behaviour&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; label1_MouseDown(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, MouseEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.DoDragDrop(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataObject(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(IFoo).FullName,&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Foo()), DragDropEffects.All);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Pondering about DateTime and it&#39;s Ticks...</title>
      <link>/post/2007-07-18-pondering-about-datetime-and-its-ticks/</link>
      <pubDate>Wed, 18 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-07-18-pondering-about-datetime-and-its-ticks/</guid>
      <description>
        
          &lt;p&gt;Recently someone was able to convince me that there is no problem with using &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/System.Datetime.aspx&#34;&gt;System.DateTime&lt;/a&gt; for the storage of localtimes (even if DST is in effect), because it works with &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.datetime.ticks.aspx&#34;&gt;Ticks&lt;/a&gt; and i bought into his base + offset story&amp;hellip;. The following table explains his reasoning&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;th style=&amp;quot;width: 33%&amp;quot;&amp;gt;
  Localtime
&amp;lt;/th&amp;gt;

&amp;lt;th style=&amp;quot;width: 33%&amp;quot;&amp;gt;
  Ticks (Localtime)
&amp;lt;/th&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  2007-10-28 01:59:59
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  63329133&amp;lt;b&amp;gt;599&amp;lt;/b&amp;gt;0000000
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  2007-10-28 02:00:00
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  63329133&amp;lt;b&amp;gt;600&amp;lt;/b&amp;gt;0000000
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  2007-10-28 02:00:01
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  63329133&amp;lt;b&amp;gt;601&amp;lt;/b&amp;gt;0000000
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  2007-10-28 02:59:59
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  63329137&amp;lt;b&amp;gt;199&amp;lt;/b&amp;gt;0000000
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  2007-10-28 02:00:00
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  63329133&amp;lt;b&amp;gt;200&amp;lt;/b&amp;gt;0000000
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  2007-10-28 02:00:01
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  63329133&amp;lt;b&amp;gt;201&amp;lt;/b&amp;gt;0000000
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This reasoning gives you the impression that for each second &lt;strong&gt;1&lt;/strong&gt;0000000 is added to the ticks.. However, this is faulty and in reality you get the following&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;th style=&amp;quot;width: 33%&amp;quot;&amp;gt;
  Localtime
&amp;lt;/th&amp;gt;

&amp;lt;th style=&amp;quot;width: 33%&amp;quot;&amp;gt;
  Ticks (Localtime)
&amp;lt;/th&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  2007-10-28 01:59:59
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  63329133&amp;lt;b&amp;gt;599&amp;lt;/b&amp;gt;0000000
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  2007-10-28 02:00:00
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  63329133&amp;lt;b&amp;gt;600&amp;lt;/b&amp;gt;0000000
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  2007-10-28 02:00:01
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  63329133&amp;lt;b&amp;gt;601&amp;lt;/b&amp;gt;0000000
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  2007-10-28 02:59:59
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  63329137&amp;lt;b&amp;gt;199&amp;lt;/b&amp;gt;0000000
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  2007-10-28 02:00:00
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  63329133&amp;lt;span style=&amp;quot;color: red&amp;quot;&amp;gt;&amp;lt;b&amp;gt;600&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;0000000
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  2007-10-28 02:00:01
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  63329133&amp;lt;b&amp;gt;601&amp;lt;/b&amp;gt;0000000
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;As you can see, instead of adding &lt;strong&gt;1&lt;/strong&gt;0000000 to the ticks between 2007-10-27 00:59:59 and 01:00:00 in UTC there is a &lt;!-- raw HTML omitted --&gt;reduction of ticks in the localtime&lt;!-- raw HTML omitted --&gt; instead&amp;hellip;. Because of this new DateTime(633291336000000000, DateTimeKind.Local) could represent both 2007-10-27 00:00:00 UTC and 2007-10-27 01:00:00 UTC&amp;hellip; So if you want to keep out of trouble you&amp;rsquo;d better start storing your dates as UTC&amp;hellip; If you don&amp;rsquo;t believe me, run the test yourself&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;List&amp;lt;dateTime&amp;gt; localTimes = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;dateTime&amp;gt;();

&lt;span style=&#34;color:#75715e&#34;&gt;// start at 2007-10-27 23:59:59 UTC, which is 2007-28-10 01:59:59 localtime
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;DateTime utcBase = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, DateTimeKind.Utc);
localTimes.Add(utcBase.ToLocalTime());

&lt;span style=&#34;color:#75715e&#34;&gt;// add 1 second to the base, which is 2007-28-10 02:00:00 localtime (first time)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;localTimes.Add(utcBase.AddSeconds(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).ToLocalTime());

&lt;span style=&#34;color:#75715e&#34;&gt;// add 2 seconds to the base, which is 2007-28-10 02:00:01 localtime (first time)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;localTimes.Add(utcBase.AddSeconds(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).ToLocalTime());

&lt;span style=&#34;color:#75715e&#34;&gt;// add 60 minutes to the base, which is 2007-28-10 02:59:59 localtime (first time)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;localTimes.Add(utcBase.AddMinutes(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;).ToLocalTime());

&lt;span style=&#34;color:#75715e&#34;&gt;// add 60 minutes and 1 second to the base, which is 2007-28-10 02:00:00 localtime (second time)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;localTimes.Add(utcBase.AddMinutes(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;).AddSeconds(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).ToLocalTime());

&lt;span style=&#34;color:#75715e&#34;&gt;// add 60 minutes and 2 second to the base, which is 2007-28-10 02:00:01 localtime (second time)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;localTimes.Add(utcBase.AddMinutes(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;).AddSeconds(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).ToLocalTime());

&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (DateTime localTime &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; localTimes)
{
	Console.WriteLine(localTime.ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;&lt;/span&gt;));
	Console.WriteLine(localTime.Ticks);
	Console.WriteLine();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Update from localtime to UTC or any other timezone with Oracle</title>
      <link>/post/2007-07-17-update-from-localtime-to-utc-with-oracle/</link>
      <pubDate>Tue, 17 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-07-17-update-from-localtime-to-utc-with-oracle/</guid>
      <description>
        
          &lt;p&gt;Imagine that you have a table with a column of the type DATETIME. You&amp;rsquo;ve been storing data as localtime and after a while you need to convert these datetimes to UTC. Here&amp;rsquo;s a possible approach&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; events &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SYS_EXTRACT_UTC(FROM_TZ(&lt;span style=&#34;color:#66d9ef&#34;&gt;start&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Europe/Brussels&amp;#39;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You get a more generic variant using the AT TIME ZONE clause&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; events &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FROM_TZ(&lt;span style=&#34;color:#66d9ef&#34;&gt;start&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Europe/Brussels&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AT&lt;/span&gt; TIME &lt;span style=&#34;color:#66d9ef&#34;&gt;ZONE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;America/Denver&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>About Authorization</title>
      <link>/post/2007-07-06-about-authorization/</link>
      <pubDate>Fri, 06 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-07-06-about-authorization/</guid>
      <description>
        
          &lt;p&gt;Yesterday i visited an evening session about authentication and authorization at &lt;a href=&#34;http://www.compuware.be&#34;&gt;Compuware&lt;/a&gt; (Yes, i&amp;rsquo;ve got interesting collegues that are willing to share their knowledige). Anyway, i left the meeting with a couple of questions&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does System.Security.Principal.PrincipalPolicy work under &lt;a href=&#34;http://www.mono-project.com/Main_Page&#34;&gt;Mono&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, NoPrincipal and UnauthenticatedPrincipal behave exactly the same way as they do in the Microsoft implementation. For the WindowsPrincipal the unix groups are used to determine the result of IsInRole. eg&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//lists the groups the user timvw is part of:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//timvw@debian:~$ groups
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//timvw dialout cdrom floppy audio video plugdev
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);
IPrincipal principal = Thread.CurrentPrincipal;

&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] roles = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;floppy&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wheel&amp;#34;&lt;/span&gt; };
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; role &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; roles)
{
	Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0} is in the {1} role: {2}.&amp;#34;&lt;/span&gt;, principal.Identity.Name, role, principal.IsInRole(role));
}

&lt;span style=&#34;color:#75715e&#34;&gt;// the output:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//timvw@debian:~$ ./Main.exe
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//timvw is in the floppy role: True.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//timvw is in the wheel role: False.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;How are instances of IPrincipal propgated into other threads?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A bit of research learned me that BeginInvoke and Thread.Start copy the Thread.CurrentPrincipal into the new thread and that ThreadPool.QueueUserWorkItem and System.Threading.Timer don&amp;rsquo;t copy the Thread.CurrentPrincipal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How can i use the &lt;a href=&#34;http://blogs.msdn.com/azman/&#34;&gt;Authorization Manager&lt;/a&gt; without Windows Identity?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A possible solution would be the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetSid()
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// modify this so that it contains an application and user id
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S-1-9-1-1&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// By passing in 1 as the second parameter, no verification of the SID against the AD is performed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IAzClientContext cctx = app.InitializeClientContextFromStringSid(GetSid(), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// Because the MMC does not allow you to add custom SIDs you&amp;#39;ll have to edit to add these manually (eg: by using the API)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IAzApplicationGroup &lt;span style=&#34;color:#66d9ef&#34;&gt;group&lt;/span&gt; = app.OpenApplicationGroup(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DemoApplicationUsers&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;group&lt;/span&gt;.AddMember(GetSid(), &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;group&lt;/span&gt;.Submit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// And now you can verify is the custom SID has access to a given operation:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Console.WriteLine(HasAccess(cctx, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }));

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; HasAccess(IAzClientContext context, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] scopeNames, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] operationIds)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; subject = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;audit&amp;#34;&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; scopes;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (scopeNames == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; || scopeNames.Length == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	{
		scopes = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; };
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		scopes = Array.ConvertAll&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;&amp;gt;(scopeNames, &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; scopeName) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; scopeName; });
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] operations = Array.ConvertAll&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;&amp;gt;(operationIds, &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; operationId) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; operationId; });
	&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] results = (&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[])context.AccessCheck(subject, scopes, operations, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; result &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; results)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)result != &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>About additional precision and unpredicted behaviour...</title>
      <link>/post/2007-06-26-about-additional-precision-and-unpredicted-behaviour/</link>
      <pubDate>Tue, 26 Jun 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-06-26-about-additional-precision-and-unpredicted-behaviour/</guid>
      <description>
        
          &lt;p&gt;Earlier today someone posted the following code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; a = &lt;span style=&#34;color:#ae81ff&#34;&gt;0.12f&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; b = a * &lt;span style=&#34;color:#ae81ff&#34;&gt;100f&lt;/span&gt;;
Console.WriteLine((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) b); &lt;span style=&#34;color:#75715e&#34;&gt;// prints 12
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Console.WriteLine((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(a * &lt;span style=&#34;color:#ae81ff&#34;&gt;100f&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// prints 11 !!!!!!!!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An (extensive) explanation for this strange behaviour can be found at &lt;a href=&#34;http://blogs.msdn.com/davidnotario/archive/2005/08/08/449092.aspx&#34;&gt;CLR and floating point: Some answers to common questions&lt;/a&gt;&amp;hellip; A possible way to force the compiler and runtime to get rid of the additional precision would be the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;Console.WriteLine((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;)(a * &lt;span style=&#34;color:#ae81ff&#34;&gt;100f&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Improvements for the SortableBindingList (and TypedList)</title>
      <link>/post/2007-05-10-improvements-for-the-sortablebindinglist-and-typedlist/</link>
      <pubDate>Thu, 10 May 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-05-10-improvements-for-the-sortablebindinglist-and-typedlist/</guid>
      <description>
        
          &lt;p&gt;I found out that the sorting didn&amp;rsquo;t work for &amp;lsquo;Expression&amp;rsquo; properties. My first thought was to add another switch to the logic of the already existing code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; value1 = t1;
&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; value2 = t2;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (prop.Name.StartsWith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;||&amp;#34;&lt;/span&gt;))
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// do something to find the &amp;#39;ExpressionProperty&amp;#39; values
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; property &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; prop.Name.Split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;))
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// navigate through the relations
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		PropertyInfo propertyInfo = value1.GetType().GetProperty(property);
		value1 = propertyInfo.GetValue(value1, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
		value2 = propertyInfo.GetValue(value2, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since i already have a PropertyDescriptor it seems a lot smarter to use it&amp;rsquo;s GetValue instead&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; value1 = prop.GetValue(t1);
&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; value2 = prop.GetValue(t2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At &lt;a href=&#34;http://blog.developpez.com/index.php?blog=121&amp;amp;title=typedlistalt_tagt&amp;amp;more=1&amp;amp;c=1&amp;amp;tb=1&amp;amp;pb=1&#34;&gt;Matthieu MEZIL&lt;/a&gt;&amp;rsquo;s blog i found a suggestion to use &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/cfttsh47(VS.80).aspx&#34;&gt;Comparer&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;. This allowed me to reduce&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;IComparable comparable = value1 &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; IComparable;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (comparable != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reverse * comparable.CompareTo(value2);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
{
	comparable = value2 &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; IComparable;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (comparable != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;* reverse &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;* comparable.CompareTo(value1);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Notice that this requires that atleast value1 or value2 are an instance of a type that implements IComparable
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reverse * Comparer.Default.Compare(value1, value2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to get yet another version of &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/TypedList.zip&#34;&gt;TypedList.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>About .Net events in Belgium</title>
      <link>/post/2007-05-09-about-net-events-in-belgium/</link>
      <pubDate>Wed, 09 May 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-05-09-about-net-events-in-belgium/</guid>
      <description>
        
          &lt;p&gt;Earlier this evening i visited &amp;ldquo;Visual C++ &amp;lsquo;Orcas&amp;rsquo; and a Microsoft C++ Strategy&amp;rdquo;, an &lt;a href=&#34;http://www.microsoft.com/belux/msdn/nl/default.mspx&#34;&gt;MSDN Belux&lt;/a&gt; event. Since the events are for free, time would be the only thing you can loose&amp;hellip;. But as always with these events, they are worth the time. I even liked the jokes this time ;)) The speaker, Ronald Laeremans, now the Program Unit Manager for Visual C++ talked and kept talking about his passion 🙂 30 minutes after his session &lt;a href=&#34;http://blogs.msdn.com/tommer/&#34;&gt;Tom&lt;/a&gt; eventually found a way to stop him.. I can only recommend that you visit these events too&amp;hellip; Scheduled&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;May 10th, &lt;a href=&#34;http://www.visug.be/Default.aspx&#34;&gt;Introduction on IIS7&lt;/a&gt; (I won&amp;rsquo;t be there since i already saw the presentation at DevDays)&lt;/li&gt;
&lt;li&gt;June 6th, &lt;a href=&#34;http://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032340308&amp;amp;Culture=en-US&#34;&gt;Securing ASP.NET AJAX enabled web applications, lessons from the field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting the ExpressionDescriptor</title>
      <link>/post/2007-05-08-presenting-the-expressiondescriptor/</link>
      <pubDate>Tue, 08 May 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-05-08-presenting-the-expressiondescriptor/</guid>
      <description>
        
          &lt;p&gt;A couple of days ago i presented you the &lt;a href=&#34;http://www.timvw.be/presenting-the-typedlistt/&#34;&gt;TypedList&lt;/a&gt; which supports navigation through subproperties. Another common feature request is the possibility to add a column that has a value based on other values in the row (like a DataColumn with it&amp;rsquo;s Expression property set). With the plumbing code i&amp;rsquo;ve written it&amp;rsquo;s as simple as implementing the following interface&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IExpressionProvider&amp;lt;componentType, PropertyType&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; }
	PropertyType GetValue(ComponentType component);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An example implementation could be an expression that represents the duration of an Appointment&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DurationExpressionProvider&lt;/span&gt; : IExpressionProvider&amp;lt;appointment, TimeSpan&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;||Duration&amp;#34;&lt;/span&gt;; } }

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TimeSpan GetValue(Appointment component)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; component.DateTimeRange.End -- component.DateTimeRange.Start;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve changed the constructor of TypedList a bit so that it accepts an enumeration of PropertyDescriptors. In my example you can initialise the list as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;List&amp;lt;propertyDescriptor&amp;gt; propertyDescriptors = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;propertyDescriptor&amp;gt;();

&lt;span style=&#34;color:#75715e&#34;&gt;// create the subpropertydescriptors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] propertyNames = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patient.Name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patient.Address.Municipality&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTimeRange.Start&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTimeRange.End&amp;#34;&lt;/span&gt; };
propertyDescriptors.AddRange(Array.ConvertAll&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, SubPropertyDescriptor&amp;lt;appointment&amp;gt;&amp;gt;(propertyNames, &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; propertyName) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SubPropertyDescriptor&amp;lt;appointment&amp;gt;(propertyName); }));

&lt;span style=&#34;color:#75715e&#34;&gt;// add an expressiondescriptor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;IExpressionProvider&amp;lt;appointment, TimeSpan&amp;gt; expressionProvider = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DurationExpressionProvider();
ExpressionDescriptor&amp;lt;appointment, TimeSpan&amp;gt; durationDescriptor = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ExpressionDescriptor&amp;lt;appointment, TimeSpan&amp;gt;(expressionProvider);
propertyDescriptors.Add(durationDescriptor);

TypedBindingList&amp;lt;appointment&amp;gt; appointments = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TypedBindingList&amp;lt;appointment&amp;gt;(propertyDescriptors);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this is how it looks like at runtime&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/typedlist-3.gif&#34; alt=&#34;image of the typedlist&#34;&gt;&lt;/p&gt;
&lt;p&gt;As always, feel free to download the code: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/TypedList.zip&#34;&gt;TypedList.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting the TypedList&lt;T&gt;</title>
      <link>/post/2007-05-05-presenting-the-typedlistt/</link>
      <pubDate>Sat, 05 May 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-05-05-presenting-the-typedlistt/</guid>
      <description>
        
          &lt;p&gt;A while ago i presented the &lt;a href=&#34;http://www.timvw.be/presenting-the-sortablebindinglistt/&#34;&gt;SortableBindingList&lt;/a&gt;. One of the nice features you get with DataSets is that you can use relations to navigate through the data. Business Objects don&amp;rsquo;t give you this functionality by default. Today i implemented a BindingList that supports navigation through relations. First i&amp;rsquo;ll present you the Business Objects&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/typedlist-1.gif&#34; alt=&#34;screenshot of business objects&#34;&gt;&lt;/p&gt;
&lt;p&gt;We would like to create an overview of the appointments using a datagridview&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/typedlist-2.gif&#34; alt=&#34;screenshot of wanted ui&#34;&gt;&lt;/p&gt;
&lt;p&gt;I drag a datagridview on the designer form, add columns, and then i set the datapropertynames as following: (Notice how i use a . to navigate the relations)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnId.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPatient.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patient.Name&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnMunicipality.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patient.Address.Municipality&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnStart.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTimeRange.Start&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnEnd.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTimeRange.End&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First we need to implement a method that allows us to find a PropertyInfo for the given property name&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PropertyInfo Resolve(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; propertyName)
{
	Type t = &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T);
	PropertyInfo propertyInfo = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] subPropertyNames = propertyName.Split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (subPropertyNames.Length == &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// a regular property
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		propertyInfo = t.GetProperty(propertyName);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// navigate through the subproperties
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; subPropertyNames.Length - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; ++i) 
		{ 
			propertyInfo = t.GetProperty(subPropertyNames[i]); 
			t = propertyInfo.PropertyType; 
		} 
	} 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; propertyInfo; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we are ready to implement the ITypedList.GetItemProperties method in our TypedList&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors)
{
	PropertyDescriptorCollection propertyDescriptors = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PropertyDescriptorCollection(listAccessors);

	&lt;span style=&#34;color:#75715e&#34;&gt;// add the regular property descriptors T has
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (PropertyDescriptor propertyDescriptor &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; TypeDescriptor.GetProperties(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T)))
	{
		propertyDescriptors.Add(propertyDescriptor);
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// add the subproperties
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; subPropertyName &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.subPropertyNames)
	{
		propertyDescriptors.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SubPropertyDescriptor&amp;lt;t&amp;gt;(subPropertyName));
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; propertyDescriptors;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using this class is as simple as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// create a TypedList that holds Appointments
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;TypedBindingList&amp;lt;appointment&amp;gt; appointments = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TypedBindingList&amp;lt;appointment&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patient.Name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patient.Address.Municipality&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTimeRange.Start&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTimeRange.End&amp;#34;&lt;/span&gt; });

&lt;span style=&#34;color:#75715e&#34;&gt;// Initialise two patients
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Patient patient = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Patient(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tim&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Address(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MyStreet&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1820&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Melsbroek&amp;#34;&lt;/span&gt;));
Patient patient2 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Patient(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Address(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;His Street&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Leuven&amp;#34;&lt;/span&gt;));

&lt;span style=&#34;color:#75715e&#34;&gt;// Add appointsments to the list
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;appointments.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Appointment(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, patient, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTimeRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))));
appointments.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Appointment(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, patient2, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTimeRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))));
appointments.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Appointment(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, patient, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTimeRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))));
appointments.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Appointment(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, patient, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTimeRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))));
appointments.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Appointment(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, patient2, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTimeRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))));
appointments.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Appointment(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, patient, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTimeRange(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))));

&lt;span style=&#34;color:#75715e&#34;&gt;// Assign this list to the datagridview datasource
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = appointments;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty cool, don&amp;rsquo;t you think? As always, feel free to download the code: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/TypedList.zip&#34;&gt;TypedList.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Today, May 8th 2007, i discovered a but in SubPropertyDescriptor.SetValue and uploaded a newer version of the code.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring DataGridViewComboBoxColumn databinding (part2)</title>
      <link>/post/2007-05-03-exploring-datagridviewcomboboxcolumn-databinding-part2/</link>
      <pubDate>Thu, 03 May 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-05-03-exploring-datagridviewcomboboxcolumn-databinding-part2/</guid>
      <description>
        
          &lt;p&gt;A while ago i wrote about &lt;a href=&#34;http://www.timvw.be/exploring-datagridviewcomboboxcolumn-databinding/&#34;&gt;Exploring DataGridViewComboBoxColumn databinding&lt;/a&gt; using Business Objects. Some people asked me to give an example using DataSets&amp;hellip;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll start with creating a DataSet, add two DataTables, and create a relation on PersonType.Id (int32). In the designer this looks like&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-dataset1.gif&#34; alt=&#34;screenshot of dataset designer displaying person and persontype&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next i create a DataSetDac that will return an instance of a Filled PersonDataSet (In real life you would probably use a TableAdapter and get the data from a database) The code is as simple as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PersonsDataSet Find()
{
	PersonsDataSet personsDataSet = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonsDataSet();

	personsDataSet.PersonType.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A geeky person&amp;#34;&lt;/span&gt; });
	personsDataSet.PersonType.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A coward&amp;#34;&lt;/span&gt; });
	personsDataSet.PersonType.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Feeling hot hot hot&amp;#34;&lt;/span&gt; });
	personsDataSet.PersonType.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(None)&amp;#34;&lt;/span&gt; });

	personsDataSet.Person.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Timvw&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; });
	personsDataSet.Person.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; });
	personsDataSet.Person.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An Onymous&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; });
	personsDataSet.Person.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jenna Jameson&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; });
	personsDataSet.Person.Rows.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Null Able&amp;#34;&lt;/span&gt;, -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; });

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; personsDataSet;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now comes the important stuff: Bind the data to the DataGridView and DataGridViewComboBoxColumn&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
	InitializeComponent();

	PersonsDataSet personsDataSet = DataSetDac.Find();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnName.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PersonTypeId&amp;#34;&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Label&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.ValueMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataSource = personsDataSet.PersonType;

	BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingSource();
	bindingSource.DataSource = personsDataSet.Person;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = bindingSource;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Geeks are doomed to stay Geeks forever. When you try change a Person that is a Geek, the values in ComboBox should be limited to Geek and (None). The following code takes care of that&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_EditingControlShowing(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewEditingControlShowingEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.CurrentCell.ColumnIndex == &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.Index)
	{
		BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; BindingSource;
		PersonsDataSet.PersonRow person = (bindingSource.Current &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DataRowView).Row &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PersonsDataSet.PersonRow;

		&lt;span style=&#34;color:#75715e&#34;&gt;// this method returns the allowed persontypes for the given person
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		PersonsDataSet.PersonTypeDataTable personTypeDataTable = DataSetDac.FindPersonTypes(person);

		DataGridViewComboBoxEditingControl comboBox = e.Control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DataGridViewComboBoxEditingControl;
		comboBox.DataSource = personTypeDataTable;

		comboBox.SelectionChangeCommitted -= &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox_SelectionChangeCommitted;
		comboBox.SelectionChangeCommitted += &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox_SelectionChangeCommitted;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PersonsDataSet.PersonTypeDataTable FindPersonTypes(PersonsDataSet.PersonRow person)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// by default, all persons simply have one of the available persontypecodes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	PersonsDataSet personsDataSet = Find();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person.PersonTypeId.Equals(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// geeks are doomed to stay geeks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		personsDataSet.PersonType.Rows.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
		personsDataSet.PersonType.Rows.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; personsDataSet.PersonType;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; comboBox_SelectionChangeCommitted(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.EndEdit();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As always, feel free to download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DataGridViewComboBoxBinding2.zip&#34;&gt;DataGridViewComboBoxBinding2.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting the MultiPanel</title>
      <link>/post/2007-04-29-presenting-the-multipanel/</link>
      <pubDate>Sun, 29 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-04-29-presenting-the-multipanel/</guid>
      <description>
        
          &lt;p&gt;A while ago i was thinking that i would be nice to have a control that exposes multiple designer panels, but only shows one at a time&amp;hellip; Somewhat like a TabControl, but without the header.. Anyway, i found out (&lt;a href=&#34;http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=1518961&amp;amp;SiteID=1&#34;&gt;here&lt;/a&gt;) that a TabControl can be tweaked into that behaviour&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MultiPanel&lt;/span&gt; : TabControl
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; WndProc(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; Message m)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m.Msg == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;x1328 &amp;amp;&amp;amp; !DesignMode)
		{
			m.Result = (IntPtr) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.WndProc(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; m);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the designer it appears as following&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/MultiPanel1.gif&#34; alt=&#34;screenshot of MultiPanel at designtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/MultiPanel2.gif&#34; alt=&#34;screenshot of MultiPanel at designtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;And at runtime it appears as following&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/MultiPanel3.gif&#34; alt=&#34;screenshot of MultiPanel at designtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/MultiPanel4.gif&#34; alt=&#34;screenshot of MultiPanel at designtime&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Performing long running tasks in a Windows Application</title>
      <link>/post/2007-04-27-performing-long-running-tasks-in-a-windows-application/</link>
      <pubDate>Fri, 27 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-04-27-performing-long-running-tasks-in-a-windows-application/</guid>
      <description>
        
          &lt;p&gt;A while ago i blogged about &lt;a href=&#34;http://www.timvw.be/about-thread-safe-gui/&#34;&gt;Thread Safe UI&lt;/a&gt;. Today someone asked the following&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first thing i do is define a delegate (void Performer()) that will do the work of a long running operation. The reason i do this is because the compiler generates a class Performer that inherits from System.MulticastDelegate and exposes Begin- and EndInvoke methods.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/performerdelegate.gif&#34; alt=&#34;screenshot of ildasm displaying generated performer class&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since i want to disable my form before each run of a Performer and enable it after each run i implement a method Perform as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Perform(Performer performer, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; message)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PrePerform(message);
	performer.BeginInvoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PostPerform, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it&amp;rsquo;s simply a matter of implemeting Pre- and PostPerform&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; PrePerform(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; message)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.InvokeRequired)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.EndInvoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.BeginInvoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MethodInvoker(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PrePerform(message); })));
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Enabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.toolStripStatusLabel1.Text = message;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.toolStripStatusLabel1.Visible = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.toolStripProgressBar1.Visible = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; PostPerform(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; state)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.InvokeRequired)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.EndInvoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.BeginInvoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MethodInvoker(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PostPerform(state); })));
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.toolStripProgressBar1.Visible = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.toolStripStatusLabel1.Visible = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.toolStripStatusLabel1.Text = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Enabled = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have all the infrastructure i implement an eventhandler for a button click&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; button1_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// remove previously retrieved results
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateResultLabel(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Perform(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// simulate the effect of a blocking operation that takes a while to complete
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// eg: remoting, webrequests, database queries, ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		Thread.Sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;);

		&lt;span style=&#34;color:#75715e&#34;&gt;// display the result of the long running operation
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateResultLabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Value was retrieved...&amp;#34;&lt;/span&gt;);
	}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Retrieving value...&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are a couple of screenshots of the running program&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/performerdelegate2.gif&#34; alt=&#34;screenshot of application not doing anything&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/performerdelegate3.gif&#34; alt=&#34;screenshot of application performing long running task&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/performerdelegate4.gif&#34; alt=&#34;screenshot of application after completion of long running task&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/AsyncDemo.zip&#34;&gt;AsyncDemo.zip&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Get the complement of a Color</title>
      <link>/post/2007-04-26-get-the-complement-of-a-color/</link>
      <pubDate>Thu, 26 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-04-26-get-the-complement-of-a-color/</guid>
      <description>
        
          &lt;p&gt;Here is a simple function that returns the complement of a given Color&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GetComplement(Color color)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Color.FromArgb(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;.MaxValue -- color.ToArgb());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Get hexadecimal RGB value from System.Drawing.Color</title>
      <link>/post/2007-04-17-get-hexadecimal-rgb-value-from-systemdrawingcolor/</link>
      <pubDate>Tue, 17 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-04-17-get-hexadecimal-rgb-value-from-systemdrawingcolor/</guid>
      <description>
        
          &lt;p&gt;Here&amp;rsquo;s a simple function that returns the &lt;a href=&#34;http://en.wikipedia.org/wiki/Hexadecimal&#34;&gt;hexadecimal&lt;/a&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Rgb&#34;&gt;RGB&lt;/a&gt; value of a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.drawing.color.aspx&#34;&gt;System.Drawing.Color&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; ToHexadecimalRgb(Color color)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; color.ToArgb().ToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;).Substring(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; Apparently there is also a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.drawing.colortranslator.aspx&#34;&gt;ColorTranslator&lt;/a&gt; with methods &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.drawing.colortranslator.tohtml.aspx&#34;&gt;ToHtml&lt;/a&gt; and &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.drawing.colortranslator.fromhtml.aspx&#34;&gt;FromHtml&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Programming .NET Components</title>
      <link>/post/2007-04-07-programming-net-components/</link>
      <pubDate>Sat, 07 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-04-07-programming-net-components/</guid>
      <description>
        
          &lt;p&gt;I couple of weeks ago i got a copy of &lt;a href=&#34;http://www.oreilly.com/catalog/pnetcomp2/&#34;&gt;Programming .NET Components&lt;/a&gt;&amp;hellip; I can only suggest to read it yourself because i found it really good 😉 Anyway, in one of the chapters &lt;a href=&#34;http://www.oreillynet.com/pub/au/741&#34;&gt;Juval Lowy&lt;/a&gt; talks about context and interception (&lt;a href=&#34;http://msdn.microsoft.com/msdnmag/issues/03/03/ContextsinNET/default.aspx&#34;&gt;msdnmag article&lt;/a&gt;). I got inspired and implemented my own log4net LoggingSink&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoggingSink&lt;/span&gt; : IMessageSink
{
	...

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; IMessage SyncProcessMessage(IMessage msg)
	{
		IMethodMessage methodMessage = msg &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; IMethodMessage;
		ILog log = LogManager.GetLogger(methodMessage.TypeName);
		log.Debug(methodMessage);

		IMessage message = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.nextSink.SyncProcessMessage(msg);

		IMethodReturnMessage methodReturnMessage = message &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; IMethodReturnMessage;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (methodReturnMessage != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
		{
			log.Debug(methodReturnMessage);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; message;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I also implemented my own MethodMessageRenderer and MethodReturnMessageRenderer using an ObjectRenderer that was inspired on the ObjectDumper that comes with the &lt;a href=&#34;http://blogs.msdn.com/charlie/archive/2007/03/01/february-ctp-now-available.aspx&#34;&gt;LINQ CTP samples&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MethodReturnMessageRenderer&lt;/span&gt; : IObjectRenderer
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MethodReturnMessageRenderer()
	{
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RenderObject(RendererMap rendererMap, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; obj, TextWriter writer)
	{
		IMethodReturnMessage methodReturnMessage = obj &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; IMethodReturnMessage;
		writer.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Called: {1}{2}Params:&amp;#34;&lt;/span&gt;, Environment.NewLine, methodReturnMessage.MethodName, Environment.NewLine);
		ObjectRenderer.RenderObject(methodReturnMessage.Args, writer);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (methodReturnMessage.MethodName != &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ctor&amp;#34;&lt;/span&gt;)
		{
			writer.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}ReturnValue:&amp;#34;&lt;/span&gt;, Environment.NewLine);
			ObjectRenderer.RenderObject(methodReturnMessage.ReturnValue, writer);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (methodReturnMessage.Exception != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
		{
			writer.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Exception:&amp;#34;&lt;/span&gt;, Environment.NewLine);
			ObjectRenderer.RenderObject(methodReturnMessage.Exception, writer);
		}
		writer.WriteLine();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Adding an [assembly: XmlConfigurator(Watch = true)] attribute to the AssemblyInfo.cs of projects that use log4Net seems the easiest way to get the configuration right. In your configuration you still have to register the IObjectRenderers&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;renderer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderingClass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EndPointTools.MethodReturnMessageRenderer, EndPointTools&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderedClass=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System.Runtime.Remoting.Messaging.IMethodReturnMessage, mscorlib&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Have a look at the generated &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/log4net.txt&#34;&gt;log&lt;/a&gt; and feel free to download the complete solution: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ContextBoundSamples.zip&#34;&gt;ContextBoundSamples.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>DataGridView to Excel</title>
      <link>/post/2007-04-05-datagridview-to-excel/</link>
      <pubDate>Thu, 05 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-04-05-datagridview-to-excel/</guid>
      <description>
        
          &lt;p&gt;The &lt;a href=&#34;http://www.carlosag.net/Tools/ExcelXmlWriter/Default.aspx&#34;&gt;CarlosAg Excel Xml Writer Library&lt;/a&gt; does not require &lt;a href=&#34;http://office.microsoft.com/en-us/excel/default.aspx&#34;&gt;Excel&lt;/a&gt; in order to generate Excel Workbooks. I already presented a method to print a DataGridView (&lt;a href=&#34;http://www.timvw.be/print-a-control/&#34;&gt;here&lt;/a&gt;) and now i present you a method that allows you to export a DataGridView to an Excel Workbook: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DataGridViewToExcel.zip&#34;&gt;DataGridViewToExcel.zip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridview-to-excel-1.gif&#34; alt=&#34;screenshot of the source datagridview&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridview-to-excel-2.gif&#34; alt=&#34;screenshot of the generated excel workbook&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Developer &amp; IT Pro Days 2007</title>
      <link>/post/2007-03-29-developer-it-pro-days-2007/</link>
      <pubDate>Thu, 29 Mar 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-03-29-developer-it-pro-days-2007/</guid>
      <description>
        
          &lt;p&gt;Last days i&amp;rsquo;ve visited a couple of interesting sessions at the &lt;a href=&#34;http://www.microsoft.com/belux/devitprodays/&#34;&gt;Developer &amp;amp; IT Pro Days 2007&lt;/a&gt;. All in all the event was pretty well organised&amp;hellip; In the closing word of the event, &lt;a href=&#34;http://blogs.msdn.com/czhower/&#34;&gt;Chad Z. Hower&lt;/a&gt; found himself quite funny when he set the title of a form in an exception throwing application to &amp;lsquo;Java Application&amp;rsquo;. Unlike the rest of the crowd i didn&amp;rsquo;t see the humor in it&amp;hellip; Anyway, when his Visual Studio Orcas started choking i wet my pants too 😉&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Simulate AutoIncrement</title>
      <link>/post/2007-03-24-simulate-autoincrement/</link>
      <pubDate>Sat, 24 Mar 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-03-24-simulate-autoincrement/</guid>
      <description>
        
          &lt;p&gt;Earlier today someone asked the following&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is a possible answer: (Don&amp;rsquo;t forget to wrap these queries in a transaction if your MySQL Engine supports it)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- Some demo tables (and data)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- CREATE TABLE table1 (id INT(10), name VARCHAR(20), PRIMARY KEY(id));
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- CREATE TABLE table2 (id INT(10), name VARCHAR(20), PRIMARY KEY(id));
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- INSERT INTO table1 VALUES (1, &amp;#34;tim&amp;#34;), (2, &amp;#34;mike&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;id :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MAX&lt;/span&gt;(id) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; table2);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; table2 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;id :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;id &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, table1.name &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;id) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; id, table1 &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; table1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Little INotifyPropertyChanged helper</title>
      <link>/post/2007-03-19-little-inotifypropertychanged-helper/</link>
      <pubDate>Mon, 19 Mar 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-03-19-little-inotifypropertychanged-helper/</guid>
      <description>
        
          &lt;p&gt;Most implementations of INotifyPropertyChanged look as following (notice that you have to make sure that the hardcoded PropertyName is spelled correctly)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyClass&lt;/span&gt; : INotifyPropertyChanged
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; X
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.x; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.x != &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.x = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.OnPropertyChanged(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;);
			}
		}
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[MethodImpl(MethodImplOptions.NoInlining)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Fire(Delegate del, &lt;span style=&#34;color:#66d9ef&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] args)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (del != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Delegate sink &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; del.GetInvocationList())
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; { sink.DynamicInvoke(args); }
				&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; { }
			}
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnPropertyChanged( &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; propertyName )
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Fire( &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PropertyChanged, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PropertyChangedEventArgs( propertyName ) );
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Everytime you refactor a property you also have to make sure to refactor the string with it&amp;rsquo;s name in the setter method. Here&amp;rsquo;s a helper method that makes life a little easier&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnPropertyChanged()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.OnPropertyChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StackTrace(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;).GetFrame(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).GetMethod().Name.Substring(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This makes the implementation of a property as simple as (No more hardcoded strings to maintain)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; X
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.x; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.x != &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.x = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.OnPropertyChanged();
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Presenting the SortableBindingList&lt;T&gt;</title>
      <link>/post/2007-02-22-presenting-the-sortablebindinglistt/</link>
      <pubDate>Thu, 22 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-02-22-presenting-the-sortablebindinglistt/</guid>
      <description>
        
          &lt;p&gt;If you are databinding your custom objects (in a Bindinglist of &lt;!-- raw HTML omitted --&gt;) to a DataGridView you will notice that the users can&amp;rsquo;t sort the rows by clicking on the columnheaders&amp;hellip; Unlike an unbound DataGridView, the SortCompare event is not raised. Here is a class that uses IComparer to implement a BindingList that supports Sorting:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please read the &lt;a href=&#34;http://www.timvw.be/presenting-the-sortablebindinglistt-take-two/&#34;&gt;follow up article&lt;/a&gt; to find the updated source code.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using this SortableBindingList is as easy as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
	InitializeComponent();

	SortableBindingList&amp;lt;person&amp;gt; persons = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SortableBindingList&amp;lt;person&amp;gt;();
	persons.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timvw&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1980&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)));
	persons.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, DateTime.Now));

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnId.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnName.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnBirthday.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Birthday&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = persons;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/sortablebindinglist.gif&#34; alt=&#34;the sortablebindinglist at work&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the source and demoproject: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/SortableBindingList.zip&#34;&gt;SortableBindingList.zip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; You can find the latest implementation at &lt;a href=&#34;http://www.codeplex.com/BeTimvwFramework&#34;&gt;BeTimvwFramework&lt;/a&gt;, a project where i will keep classes that i find interesting.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Don&#39;t wait until the DateTimePicker has lost focus to write back the values</title>
      <link>/post/2007-02-07-dont-wait-until-the-datetimepicker-has-lost-focus-to-write-back-the-values/</link>
      <pubDate>Wed, 07 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-02-07-dont-wait-until-the-datetimepicker-has-lost-focus-to-write-back-the-values/</guid>
      <description>
        
          &lt;p&gt;Drag a TextBox and a DateTimePicker control on a Form and databind them to a DateTime property, eg&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
	{
		InitializeComponent();

		SimpleObject simpleObject = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SimpleObject();
		simpleObject.Birthday = DateTime.Now;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTimePicker1.DataBindings.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Value&amp;#34;&lt;/span&gt;, simpleObject, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Birthday&amp;#34;&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.textBox1.DataBindings.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;, simpleObject, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Birthday&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, DataSourceUpdateMode.OnPropertyChanged);
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SimpleObject&lt;/span&gt; : INotifyPropertyChanged
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; DateTime birthday;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DateTime Birthday
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.birthday; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;
		{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.birthday = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.OnPropertyChanged(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Birthday&amp;#34;&lt;/span&gt;);
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnPropertyChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; propertyName)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PropertyChanged != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.PropertyChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PropertyChangedEventArgs(propertyName));
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The annoying bit is that every time the user picks a datetime, he has to move the focus before the changes in the DateTimePicker control are written back to the datasource&amp;hellip; You can circumvent this by handling the CloseUp event of the DataTimePicker as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dateTimePicker1_CloseUp(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	DateTimePicker dateTimePicker = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DateTimePicker;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dateTimePicker != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Binding binding &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; dateTimePicker.DataBindings)
		{
			binding.WriteValue();
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I think mosts users will appreciate this new behaviour 🙂 We can also apply this technique on a ComboBox (using the SelectionChangeCommitted event). Instead of manually hooking up to all these events, i&amp;rsquo;ve implemented an IExtenderProvider that takes care of this tedious task (only showing the part for the datetimepicker)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[ProvideProperty(&amp;#34;WriteValuesAfterCloseUp&amp;#34;, typeof(DateTimePicker))]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WriteValueAfterEventExtender&lt;/span&gt; : Component, IExtenderProvider
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Dictionary&amp;lt;dateTimePicker, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&amp;gt; writeValuesAfterCloseUp;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; WriteValueAfterEventExtender()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.writeValuesAfterCloseUp = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;dateTimePicker, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&amp;gt;();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; CanExtend(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; extendee)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; extendee &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; DateTimePicker;
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[Description(&amp;#34;Gets a boolean indicating if the values are written to the datasource after a CloseUp event.&amp;#34;)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; GetWriteValuesAfterCloseUp(DateTimePicker dateTimePicker)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.writeValuesAfterCloseUp.TryGetValue(dateTimePicker, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;))
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetWriteValuesAfterCloseUp(DateTimePicker dateTimePicker, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.writeValuesAfterCloseUp.ContainsKey(dateTimePicker))
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.writeValuesAfterCloseUp[dateTimePicker] = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.writeValuesAfterCloseUp.Add(dateTimePicker, &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
		{
			dateTimePicker.CloseUp += &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTimePicker_CloseUp;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		{
			dateTimePicker.CloseUp -= &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTimePicker_CloseUp;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dateTimePicker_CloseUp(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
	{
		DateTimePicker dateTimePicker = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DateTimePicker;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dateTimePicker != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Binding binding &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; dateTimePicker.DataBindings)
			{
				binding.WriteValue();
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As soon as you drop an instance of the WriteValueAfterEditExtender component on your designer form you will see the that an extra property appears on the datetimepicker&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/writevalueaftereventextender.gif&#34; alt=&#34;image of the propertylist for datetimepicker&#34;&gt;&lt;/p&gt;
&lt;p&gt;As always, feel free to download the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ExtenderProvider.zip&#34;&gt;ExtenderProvider.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Control the order of Properties in your Class</title>
      <link>/post/2007-02-04-control-the-order-of-properties-in-your-class/</link>
      <pubDate>Sun, 04 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-02-04-control-the-order-of-properties-in-your-class/</guid>
      <description>
        
          &lt;p&gt;Sometimes you want to manipulate the order in which properties are used for databinding. Eg: If you drag and drop an object datasource on a DataGridView you have no control in which order it binds the properties. Offcourse, you can order the columns by moving them around&amp;hellip; Today someone asked the following&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;I started with the implementation of a PropertyOrderAttribute&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[AttributeUsage(AttributeTargets.Property)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PropertyOrderAttribute&lt;/span&gt; : Attribute
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; order;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PropertyOrderAttribute(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; order)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.order = order;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Order
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.order; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So the user can use this attribute to define the order in which the properties should appear as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; DateTime birthDay;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Foo(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name, DateTime birthDay)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id = id;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name = name;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.birthDay = birthDay;
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[PropertyOrder(0)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Id
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; id; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { id = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[PropertyOrder(2)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; name; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { name = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;	[PropertyOrder(1)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DateTime BirthDay
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; birthDay; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { birthDay = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now i implement a generic BindingList that makes use of the PropertyOrderAttributes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PropertyOrderBindingList&lt;/span&gt;&amp;lt;T&amp;gt; : BindingList&amp;lt;T&amp;gt;, ITypedList
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PropertyOrderBindingList()
	: &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;()
	{ }

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors)
	{
		PropertyDescriptorCollection typePropertiesCollection = TypeDescriptor.GetProperties(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; typePropertiesCollection.Sort(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PropertyDescriptorComparer());
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetListName(PropertyDescriptor[] listAccessors)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A list with Properties for {0}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T).Name);
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PropertyDescriptorComparer&lt;/span&gt; : IComparer
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Compare(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; y)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x == y) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

		PropertyDescriptor propertyDescriptorX = x &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PropertyDescriptor;
		PropertyDescriptor propertyDescriptorY = y &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PropertyDescriptor;

		PropertyOrderAttribute propertyOrderAttributeX = propertyDescriptorX.Attributes[&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(PropertyOrderAttribute)] &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PropertyOrderAttribute;
		PropertyOrderAttribute propertyOrderAttributeY = propertyDescriptorY.Attributes[&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(PropertyOrderAttribute)] &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PropertyOrderAttribute;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (propertyOrderAttributeX == propertyOrderAttributeY) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (propertyOrderAttributeX == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (propertyOrderAttributeY == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; propertyOrderAttributeX.Order.CompareTo(propertyOrderAttributeY.Order);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With all this infrastructure it becomes as easy as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
	InitializeComponent();

	PropertyOrderBindingList&amp;lt;foo&amp;gt; fooList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PropertyOrderBindingList&amp;lt;foo&amp;gt;();
	fooList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Foo(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Timvw&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1980&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)));
	fooList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Foo(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mike&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1984&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = fooList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>About the Wow, i removed Vista from my harddisk, experience</title>
      <link>/post/2007-01-29-about-the-wow-i-removed-vista-from-my-harddisk-experience/</link>
      <pubDate>Mon, 29 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-29-about-the-wow-i-removed-vista-from-my-harddisk-experience/</guid>
      <description>
        
          &lt;p&gt;A couple of weeks ago i decided to install Vista Ultimate&amp;hellip; Despite the marketing efforts my only &lt;a href=&#34;http://www.experiencethewow.be/&#34;&gt;Wow&lt;/a&gt; experience was yesterday when i decided to remove it&amp;hellip; (Simply boot with your XP installation cd, run fixboot and fixmbr from the rescue console and you&amp;rsquo;re set ;))&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting the DataGridViewLargeTextBoxCell</title>
      <link>/post/2007-01-27-presenting-the-datagridviewlargetextboxcell/</link>
      <pubDate>Sat, 27 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-27-presenting-the-datagridviewlargetextboxcell/</guid>
      <description>
        
          &lt;p&gt;Today i decided to experiment a bit with custom &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridviewcell.aspx&#34;&gt;DataGridViewCell&lt;/a&gt; implementations. If you insert large text into a DataGridView it will (at best) wrap the text. I wanted my DataGridView to behave like &lt;a href=&#34;http://office.microsoft.com/excel/&#34;&gt;Excel&lt;/a&gt; so that the whole text is displayed. Here are a couple of screenshots of the result&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridviewlargetextboxcell-1.gif&#34; alt=&#34;the large text flows over it&amp;rsquo;s surrounding columns&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridviewlargetextboxcell-2.gif&#34; alt=&#34;the editingcontrol is resized to fit the complete text&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/CustomDataGridViewCells.zip&#34;&gt;CustomDataGridViewCells.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>About Thread-Safe GUI...</title>
      <link>/post/2007-01-21-about-thread-safe-gui/</link>
      <pubDate>Sun, 21 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-21-about-thread-safe-gui/</guid>
      <description>
        
          &lt;p&gt;If you&amp;rsquo;re writing windows applications you&amp;rsquo;ll most certainly recognize the following piece of code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateIntResultDelegate(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result);

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateIntResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelIntResult.InvokeRequired)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelIntResult.Invoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UpdateIntResultDelegate(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateIntResult), result);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.IntResult = result;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateStringResultDelegate(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; result);

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateStringResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; result)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelStringResult.InvokeRequired)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelStringResult.Invoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UpdateStringResultDelegate(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateStringResult), result);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.StringResult = result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Today i was fed up with defining all these Delegates.. So i decided to define a generic delegate instead&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Delegate&amp;lt;t&amp;gt;(T t);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now i can reuse this Delegate for my two update methods&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateIntResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelIntResult.InvokeRequired)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelIntResult.Invoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Delegate&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateIntResult), result);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.IntResult = result;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateStringResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; result)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelStringResult.InvokeRequired)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelStringResult.Invoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Delegate&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateStringResult), result);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.StringResult = result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apparently (and not surprisingly) i&amp;rsquo;m not the first to come up with this idea, a little websearch for &amp;lsquo;Generic Delegate&amp;rsquo; learned me that &lt;a href=&#34;http://weblogs.asp.net/rosherove/default.aspx&#34;&gt;Roy Osherove&lt;/a&gt; blogged about it in: &lt;a href=&#34;http://weblogs.asp.net/rosherove/archive/2006/03/01/439309.aspx&#34;&gt;The 3 ways to create a Thread-Safe GUI with .NET 2.0, with one clear winner&lt;/a&gt;. After reading the article i decided to take the following approach (The call to UpdateIntResult is type-safe, it only calls Invoke when it&amp;rsquo;s required and no duplication)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateIntResult(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelIntResult.InvokeRequired)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.labelIntResult.Invoke(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MethodInvoker(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UpdateIntResult(result); }));
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.IntResult = result;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Reading and writing unmanged structs from binary files</title>
      <link>/post/2007-01-20-reading-and-writing-binary-files/</link>
      <pubDate>Sat, 20 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-20-reading-and-writing-binary-files/</guid>
      <description>
        
          &lt;p&gt;I still remember one of the first tasks during my internship (At a software shop that still used Visual Studio 6 as development environment) last year: Develop a GUI application using .Net that allows the user to manipulate data stored in a binary file which was generated by c/c++ program. As a newcomer to C# programming i just couldn&amp;rsquo;t find the right attributes to &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/04fy9ya1.aspx&#34;&gt;Marshal&lt;/a&gt; the following structs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test1&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; name[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; score;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test2&lt;/span&gt; {
	test1 items[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After a couple of days they wanted me to deliver a product, so i decided to stop experimenting and wrote the application in C++ (&lt;a href=&#34;http://www.timvw.be/reading-unmanaged-structs-with-net/&#34;&gt;Example&lt;/a&gt;). Since i don&amp;rsquo;t like unanswered questions, i decided to give it another try this afternoon&amp;hellip; It didn&amp;rsquo;t take long to come up with the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[StructLayout(LayoutKind.Sequential, CharSet=CharSet.Ansi, Pack=4)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test1&lt;/span&gt;
{
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[MarshalAs(UnmanagedType.ByValTStr, SizeConst=9)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Score;
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[StructLayout(LayoutKind.Sequential, CharSet=CharSet.Ansi, Pack=4)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test2&lt;/span&gt;
{
&lt;span style=&#34;color:#a6e22e&#34;&gt;	[MarshalAs(UnmanagedType.ByValArray, SizeConst=10)]&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Test1[] Items;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; Read(Stream stream, Type t)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] buffer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[Marshal.SizeOf(t)];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; read = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; read &amp;lt; buffer.Length; read += stream.Read(buffer, read, buffer.Length)) ; 
	GCHandle gcHandle = GCHandle.Alloc(buffer, GCHandleType.Pinned); 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; o = Marshal.PtrToStructure(gcHandle.AddrOfPinnedObject(), t); 
	gcHandle.Free(); &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; o; 
} 
	
&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Write(Stream stream, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; o) 
{ 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] buffer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[Marshal.SizeOf(o.GetType())]; 
	GCHandle gcHandle = GCHandle.Alloc(buffer, GCHandleType.Pinned); 
	Marshal.StructureToPtr(o, gcHandle.AddrOfPinnedObject(), &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;); 
	stream.Write(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, buffer.Length); 
	gcHandle.Free(); 
} 

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args) 
{ 
	Test1 test1 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Test1(); 
	test1.Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timvw&amp;#34;&lt;/span&gt;; 
	test1.Score = &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;; 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (FileStream fileStream = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FileStream(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;c:\test.dat&amp;#34;&lt;/span&gt;, FileMode.OpenOrCreate)) 
	{ 
		Write(fileStream, test1); 
		fileStream.Seek(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, SeekOrigin.Begin); 
		Test1 test2 = (Test1) 
		Read(fileStream, &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(Test1)); 
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name: {0} Score: {1}&amp;#34;&lt;/span&gt;, test2.Name, test2.Score); 
	} 
	Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine); 
	Console.ReadKey(); 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Exploring DataGridViewComboBoxColumn databinding</title>
      <link>/post/2007-01-17-exploring-datagridviewcomboboxcolumn-databinding/</link>
      <pubDate>Wed, 17 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-17-exploring-datagridviewcomboboxcolumn-databinding/</guid>
      <description>
        
          &lt;p&gt;Let&amp;rsquo;s start with a simple example: Each Person has a Name (string) and PersonTypeCode (an Enumerated value) property. We drag a DataGridView on the designer form and add two columns (DataGridViewComboBoxColumn for the PersonTypeCode property). And then we hook up the Bindingsource as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
	{
		InitializeComponent();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnName.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PersonTypeCode&amp;#34;&lt;/span&gt;;

		BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingSource();
		bindingSource.DataSource = FindPersons();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = bindingSource;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;person&amp;gt; FindPersons()
	{
		BindingList&amp;lt;person&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;person&amp;gt;();
		bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Timvw&amp;#34;&lt;/span&gt;, PersonTypeCode.Geek));
		bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, PersonTypeCode.Anonymous));
		bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An Onymous&amp;#34;&lt;/span&gt;, PersonTypeCode.Anonymous));
		bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jenna Jameson&amp;#34;&lt;/span&gt;, PersonTypeCode.Babe));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; PersonTypeCode
{
	Geek = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	Anonymous = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	Babe = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; PersonTypeCode personTypeCode;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name, PersonTypeCode personTypeCode)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name = name;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.personTypeCode = personTypeCode;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PersonTypeCode PersonTypeCode
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.personTypeCode; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.personTypeCode = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we run this code we run in the following error:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-datagridviewcomboboxcolumn-1.gif&#34; alt=&#34;DataGridViewComboBoxCell value is not valid.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Always make sure the DataGridViewComboxColumn knows about all the possible values (&lt;a href=&#34;http://www.timvw.be/implementing-masterdetail-for-custom-objects-with-datagridviewcomboboxcolumns/&#34;&gt;Add them via the Items property&lt;/a&gt; or use databinding). Let&amp;rsquo;s extend our Form1 class as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
InitializeComponent();

&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnName.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PersonTypeCode&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataSource = FindPersonTypeCodes();

BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingSource();
bindingSource.DataSource = FindPersons();
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = bindingSource;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;personTypeCode&amp;gt; FindPersonTypeCodes()
{
BindingList&amp;lt;personTypeCode&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;personTypeCode&amp;gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (PersonTypeCode personTypeCode &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; Enum.GetValues(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(PersonTypeCode)))
{
bindingList.Add(personTypeCode);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Allright, here is a screenshot of our first working version:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-datagridviewcomboboxcolumn-2.gif&#34; alt=&#34;datagridviewcomboboxcolumn with enumerated values&#34;&gt;&lt;/p&gt;
&lt;p&gt;Instead of displaying the bare enum values we want to display a nice label. In order to achieve this we define a class PersonType to hold both the PersonTypeCode and the label:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonType&lt;/span&gt;
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; PersonTypeCode personTypeCode;
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; label;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PersonType(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; label, PersonTypeCode personTypeCode)
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.label = label;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.personTypeCode = personTypeCode;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Label
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.label; }
&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.label = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PersonTypeCode PersonTypeCode
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.personTypeCode; }
&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.personTypeCode = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We modify our code so that this new PersonType class is used for the ComboBoxColumn:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
InitializeComponent();

&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnName.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PersonTypeCode&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Label&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.ValueMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PersonTypeCode&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.DataSource = FindPersonTypes();

BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingSource();
bindingSource.DataSource = FindPersons();
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = bindingSource;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;personType&amp;gt; FindPersonTypes()
{
BindingList&amp;lt;personType&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;personType&amp;gt;();
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A geeky person&amp;#34;&lt;/span&gt;, PersonTypeCode.Geek));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A coward&amp;#34;&lt;/span&gt;, PersonTypeCode.Anonymous));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Feeling hot hot hot&amp;#34;&lt;/span&gt;, PersonTypeCode.Babe));
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-datagridviewcomboboxcolumn-3.gif&#34; alt=&#34;datagridviewcomboboxcolumn with nice labels.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Great! Now we&amp;rsquo;ll add some functionality that limits the possible values in the ComboBoxColumn basesd on the Name (I already demonstrated this technique &lt;a href=&#34;http://www.timvw.be/implementing-masterdetail-for-custom-objects-with-datagridviewcomboboxcolumns/&#34;&gt;here&lt;/a&gt;). Simply handle the EditingControlShowing Event on the DataGridView as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_EditingControlShowing(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewEditingControlShowingEventArgs e)
{
BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; BindingSource;
Person person = bindingSource.Current &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Person;
BindingList&amp;lt;personType&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.FindPersonTypes(person);

DataGridViewComboBoxEditingControl comboBox = e.Control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DataGridViewComboBoxEditingControl;
comboBox.DataSource = bindingList;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;personType&amp;gt; FindPersonTypes(Person person)
{
&lt;span style=&#34;color:#75715e&#34;&gt;// by default, all persons simply have one of the available persontypecodes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;BindingList&amp;lt;personType&amp;gt; bindingList = FindPersonTypes();

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person.PersonTypeCode == PersonTypeCode.Geek)
{
&lt;span style=&#34;color:#75715e&#34;&gt;// geeks are doomed to stay geeks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;bindingList.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
bindingList.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you open the combox for &amp;ldquo;Timvw&amp;rdquo; you see that you can only choose &amp;ldquo;A geeky person&amp;rdquo;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-datagridviewcomboboxcolumn-4.gif&#34; alt=&#34;datagridviewcomboboxcolumn with limited options.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Instead of using an enum we could have used a regular class too. The key is to override the Equals method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonTypeCode&lt;/span&gt;
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PersonTypeCode Geek
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonTypeCode(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PersonTypeCode Anonymous
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonTypeCode(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PersonTypeCode Babe
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonTypeCode(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PersonTypeCode(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id)
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id = id;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Equals(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; obj)
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (obj == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (obj == &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
PersonTypeCode personTypeCode = obj &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; PersonTypeCode;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (personTypeCode == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id == personTypeCode.id;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetHashCode()
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id.GetHashCode();
}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;personType&amp;gt; FindPersonTypes(Person person)
{
&lt;span style=&#34;color:#75715e&#34;&gt;// by default, all persons simply have one of the available persontypecodes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;BindingList&amp;lt;personType&amp;gt; bindingList = FindPersonTypes();

&lt;span style=&#34;color:#75715e&#34;&gt;//if (person.PersonTypeCode == PersonTypeCode.Geek)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person.PersonTypeCode.Equals(PersonTypeCode.Geek))
{
&lt;span style=&#34;color:#75715e&#34;&gt;// geeks are doomed to stay geeks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;bindingList.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
bindingList.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now you&amp;rsquo;re thinking: But i want the user to not select a PersonTypeCode (null). We&amp;rsquo;ll represent that with an empty string &amp;ldquo;&amp;quot;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;person&amp;gt; FindPersons()
{
BindingList&amp;lt;person&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;person&amp;gt;();
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Timvw&amp;#34;&lt;/span&gt;, PersonTypeCode.Geek));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, PersonTypeCode.Anonymous));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An Onymous&amp;#34;&lt;/span&gt;, PersonTypeCode.Anonymous));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jenna Jameson&amp;#34;&lt;/span&gt;, PersonTypeCode.Babe));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Null Able&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;));
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;personType&amp;gt; FindPersonTypes()
{
BindingList&amp;lt;personType&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;personType&amp;gt;();
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A geeky person&amp;#34;&lt;/span&gt;, PersonTypeCode.Geek));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A coward&amp;#34;&lt;/span&gt;, PersonTypeCode.Anonymous));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Feeling hot hot hot&amp;#34;&lt;/span&gt;, PersonTypeCode.Babe));
bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonType(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;));
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BindingList&amp;lt;personType&amp;gt; FindPersonTypes(Person person)
{
&lt;span style=&#34;color:#75715e&#34;&gt;// by default, all persons simply have one of the available persontypecodes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;BindingList&amp;lt;personType&amp;gt; bindingList = FindPersonTypes();

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person.PersonTypeCode != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; person.PersonTypeCode.Equals(PersonTypeCode.Geek))
{
&lt;span style=&#34;color:#75715e&#34;&gt;// geeks are doomed to stay geeks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;bindingList.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
bindingList.RemoveAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bindingList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-datagridviewcomboboxcolumn-5.gif&#34; alt=&#34;datagridviewcomboboxcolumn with null option.&#34;&gt;&lt;/p&gt;
&lt;p&gt;When the user starts editing the record, the combobox will choose the first item in the list (A geeky person). Now we change this behaviour so that the actual PersonTypeCode is selected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_EditingControlShowing(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewEditingControlShowingEventArgs e)
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.CurrentCell.ColumnIndex == &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.Index)
{
BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; BindingSource;
Person person = bindingSource.Current &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Person;
BindingList&amp;lt;personType&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.FindPersonTypes(person);

DataGridViewComboBoxEditingControl comboBox = e.Control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DataGridViewComboBoxEditingControl;
comboBox.DataSource = bindingList;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person.PersonTypeCode != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
{
comboBox.SelectedValue = person.PersonTypeCode;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
{
comboBox.SelectedValue = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty;
}
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-datagridviewcomboboxcolumn-6.gif&#34; alt=&#34;datagridviewcomboboxcolumn with selected item.&#34;&gt;&lt;/p&gt;
&lt;p&gt;In order to make the DataGridView more usable we set the EditMode property to EditOnEnter. Selected values in the ComboBox are only commited when the user leaves the current cell. Handling the SelectionChangeCommited event on the ComboBox allows us to commit that value without requiring the user to leave the current cell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_EditingControlShowing(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewEditingControlShowingEventArgs e)
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.CurrentCell.ColumnIndex == &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnPersonTypeCode.Index)
{
BindingSource bindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; BindingSource;
Person person = bindingSource.Current &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Person;
BindingList&amp;lt;personType&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.FindPersonTypes(person);

DataGridViewComboBoxEditingControl comboBox = e.Control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; DataGridViewComboBoxEditingControl;
comboBox.DataSource = bindingList;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (person.PersonTypeCode != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
{
comboBox.SelectedValue = person.PersonTypeCode;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
{
comboBox.SelectedValue = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty;
}

comboBox.SelectionChangeCommitted -= &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox_SelectionChangeCommitted;
comboBox.SelectionChangeCommitted += &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBox_SelectionChangeCommitted;
}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; comboBox_SelectionChangeCommitted(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.EndEdit();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it&amp;rsquo;s up to you to apply these simple techniques and build great software. Feel free to download the complete source: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DataGridViewComboBoxBinding.zip&#34;&gt;DataGridViewComboBoxBinding.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Making WebRequests in parallel...</title>
      <link>/post/2007-01-14-asynchronous-webrequests/</link>
      <pubDate>Sun, 14 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-14-asynchronous-webrequests/</guid>
      <description>
        
          &lt;p&gt;Under the assumption that making sequential WebRequests is slower than making them in parallel i wrote a little program that returns the HTTP status code for each URI in a list. Because the number of WaitHandles on a system is limited to 64 and i would have been required to hack around this limitation i decided to use ThreadPool instead&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Text;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Threading;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Net;

&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; ManyRequests
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Program&lt;/span&gt;
	{
	
		&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
		{
			List&amp;lt;uri&amp;gt; uris = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;uri&amp;gt;();
			uris.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.timvw.be&amp;#34;&lt;/span&gt;));
			uris.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.com/does\_not\_exist&amp;#34;&lt;/span&gt;));
			uris.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.timvw.be/c-sharp&amp;#34;&lt;/span&gt;));
			uris.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.timvw.be/rss-feed/&amp;#34;&lt;/span&gt;));
			uris.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Uri(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost&amp;#34;&lt;/span&gt;));

		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Getting the HttpStatusCodes...&amp;#34;&lt;/span&gt;);
		HttpStatusCodeReader httpStatusCodeReader = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HttpStatusCodeReader(uris);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] httpStatusCodes = httpStatusCodeReader.GetHttpStatusCodes();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; uris.Count; ++i) 
		{ 
			Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0} {1}&amp;#34;&lt;/span&gt;, httpStatusCodes[i], uris[i]); }
			Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continueâ€¦&amp;#34;&lt;/span&gt;, Environment.NewLine); 
			Console.ReadKey(); 
		} 
	} 
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HttpStatusCodeReader&lt;/span&gt; 
	{ 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; List&amp;lt;uri&amp;gt; uris;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] httpStatusCodes;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; syncLock;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; completed;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; HttpStatusCodeReader(List&amp;lt;uri&amp;gt; uris)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (uris == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArgumentNullException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uris&amp;#34;&lt;/span&gt;);
			}

			&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (Uri uri &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; uris)
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (uri.Scheme != Uri.UriSchemeHttp &amp;amp;&amp;amp; uri.Scheme != Uri.UriSchemeHttps)
				{
					&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArgumentException(uri.ToString() + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; is not valid http(s) uri.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uris&amp;#34;&lt;/span&gt;);
				}
			}

			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.uris = uris;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.httpStatusCodes = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[uris.Count];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.syncLock = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;();
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.completed = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] GetHttpStatusCodes()
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.httpStatusCodes.Length; ++i) 
			{ 
				HttpWebRequest httpWebRequest = WebRequest.Create(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.uris[i]) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; HttpWebRequest; 
				httpWebRequest.Method = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HEAD&amp;#34;&lt;/span&gt;; 
				httpWebRequest.AllowAutoRedirect = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; 
				httpWebRequest.BeginGetResponse(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.GetResponseCompleted, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { httpWebRequest, i });
			} 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;lock&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.syncLock) 
			{ 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.completed &amp;lt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.httpStatusCodes.Length) 
				{ 
					Monitor.Wait(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.syncLock); 
				} 
			} 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.httpStatusCodes; 
		} 
		
		&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GetResponseCompleted(IAsyncResult ar) 
		{ 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] objects = ar.AsyncState &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[];
			HttpWebRequest httpWebRequest = objects[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; HttpWebRequest; 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; index = (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)objects[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]; 
			HttpWebResponse httpWebResponse = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;; 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; 
			{
				httpWebResponse = httpWebRequest.EndGetResponse(ar) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; HttpWebResponse; 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.httpStatusCodes[index] = (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)httpWebResponse.StatusCode; 
			} 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (WebException webException) 
			{ 
				httpWebResponse = webException.Response &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; HttpWebResponse; 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (httpWebResponse != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) 
				{ 
					&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.httpStatusCodes[index] = (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)httpWebResponse.StatusCode; 
				} 
			} 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; 
			{ 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (httpWebResponse != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) 
				{ 
					httpWebResponse.Close(); 
				} 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;lock&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.syncLock) 
				{ 
					Interlocked.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.completed, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); 
					Monitor.Pulse(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.syncLock); 
				} 
			}
		} 
	} 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Hide and unhide columns (or rows) in the DataGridView</title>
      <link>/post/2007-01-13-hide-and-unhide-columns-or-rows-in-the-datagridview/</link>
      <pubDate>Sat, 13 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-13-hide-and-unhide-columns-or-rows-in-the-datagridview/</guid>
      <description>
        
          &lt;p&gt;Once in a while i see the following question&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using the Visibile property of the DataGridViewColumn makes this a no-brainer. Let&amp;rsquo;s take the &lt;a href=&#34;http://www.timvw.be/developing-a-datasource-for-your-datagridview/&#34;&gt;Databound DataGridView&lt;/a&gt; and implement functionality to hide/unhide the quarterly results. All you have to do is add a DataGridViewButtonColumn and handle the DataGridView CellClick event as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_CellClick(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewCellEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e.ColumnIndex == &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnButton.Index)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; visible = !&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ1.Visible;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ1.Visible = visible;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ2.Visible = visible;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ3.Visible = visible;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ4.Visible = visible;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnButton.HeaderText = visible ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is how it looks like&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridview-hide.gif&#34; alt=&#34;screenshot of datagridview hiding columns&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridview-unhide.gif&#34; alt=&#34;screenshot of datagridview unhiding columns&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the updated source code for &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DataGridViewDataSource.zip&#34;&gt;DataGridViewDataSource.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Presenting a Generic RemotingHelper</title>
      <link>/post/2007-01-12-presenting-a-generic-remotinghelper/</link>
      <pubDate>Fri, 12 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-12-presenting-a-generic-remotinghelper/</guid>
      <description>
        
          &lt;p&gt;Last couple of months i&amp;rsquo;ve been experimenting with &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/kwdt6w2k.aspx&#34;&gt;Remoting&lt;/a&gt;. Here is a class that helps a client to acquire proxies to an endpoint served by the requested well-known object&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RemotingHelper&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; RemotingHelper()
	{
		RemotingConfiguration.Configure(AppDomain.CurrentDomain.SetupInformation.ConfigurationFile, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; GetService(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; fullName)
	{
		WellKnownClientTypeEntry[] wellKnownClientTypeEntries = RemotingConfiguration.GetRegisteredWellKnownClientTypes();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (WellKnownClientTypeEntry welknownClientTypeEntry &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; wellKnownClientTypeEntries)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (welknownClientTypeEntry.ObjectType.FullName == fullName)
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Activator.GetObject(welknownClientTypeEntry.ObjectType, welknownClientTypeEntry.ObjectUrl);
			}
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArgumentException(fullName + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; is not a wellKnownClientType.&amp;#34;&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; T GetService&amp;lt;t&amp;gt;()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (T) RemotingHelper.GetService(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T).FullName);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Getting a proxy is as easy as (Presuming that you&amp;rsquo;ve configured the system.runtime.remoting in your App.config)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;IContract contract = RemotingHelper.GetService&amp;lt;icontract&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Databinding a Nullable&lt;T&gt; property</title>
      <link>/post/2007-01-10-databinding-a-nullable-t-property/</link>
      <pubDate>Wed, 10 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-10-databinding-a-nullable-t-property/</guid>
      <description>
        
          &lt;p&gt;I find it frustrating that data binding does not really support Nullable&lt;!-- raw HTML omitted --&gt;. Anyway, it&amp;rsquo;s relatively easy to workaround this shortcoming&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; MyDataSource myDataSource;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
	{
		InitializeComponent();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MyDataSource();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.textBox1.DataBindings.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Double&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.textBox1.DataBindings[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;].Parse += &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Text_Parse;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Text_Parse( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, ConvertEventArgs e )
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( e.Value == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; || e.Value.ToString().Length == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
		{
			e.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; buttonTellMe_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.Double.HasValue)
		{
			MessageBox.Show(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The double is: &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myDataSource.Double);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		{
			MessageBox.Show(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The double is null&amp;#34;&lt;/span&gt;);
		}
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyDataSource&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double?&lt;/span&gt; _double;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double?&lt;/span&gt; Double
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;._double; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;._double = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-nullabletext1.gif&#34; alt=&#34;screenshot of double value in textbox&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/databind-nullabletext2.gif&#34; alt=&#34;screenshot of null value in textbox&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Generating UTF-8 with System.Xml.XmlWriter</title>
      <link>/post/2007-01-08-generating-utf-8-with-systemxmlxmlwriter/</link>
      <pubDate>Mon, 08 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-08-generating-utf-8-with-systemxmlxmlwriter/</guid>
      <description>
        
          &lt;p&gt;Today i decided to experiment with &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.xml.xmlwriter.aspx&#34;&gt;XmlWriter&lt;/a&gt;. The first i wanted to do was set the Encoding to UTF-8.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;StringBuilder stringBuilder = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuilder();
XmlWriter xmlWriter = XmlWriter.Create(stringBuilder);
xmlWriter.Settings.Encoding = Encoding.UTF8;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When i ran this code i recieved the following exception: XmlException was unhandled: The &amp;lsquo;XmlWriterSettings.Encoding&amp;rsquo; property is read only and cannot be set. The documentation for the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.xml.xmlwriter.settings.aspx&#34;&gt;Settings&lt;/a&gt; property clearly says&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;So i wrote the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;StringBuilder stringBuilder = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuilder();
XmlWriterSettings xmlWriterSettings = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; XmlWriterSettings();
xmlWriterSettings.Encoding = Encoding.UTF8;

XmlWriter xmlWriter = XmlWriter.Create(stringBuilder, xmlWriterSettings);
xmlWriter.WriteStartDocument();
xmlWriter.WriteStartElement(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.timvw.be/ns&amp;#34;&lt;/span&gt;);
xmlWriter.WriteEndElement();
xmlWriter.WriteEndDocument();
xmlWriter.Flush();
xmlWriter.Close();

&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; xmlString = stringBuilder.ToString();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see: &lt;strong&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt; is still not what i want. Apparently is the Encoding property ignored if the XmlWriter is not using a Stream. So here is my next attempt&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;MemoryStream memoryStream = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MemoryStream();
&lt;span style=&#34;color:#75715e&#34;&gt;// initialize xmlWriterSettings as above...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
&lt;span style=&#34;color:#75715e&#34;&gt;// call the same operations on the xmlWriter as above...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; xmlString = Encoding.UTF8.GetString(memoryStream.ToArray());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, i&amp;rsquo;m getting close: &lt;strong&gt;?&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;. Luckily enough i knew that the ? (byte with value 239) at the beginning is the &lt;a href=&#34;http://en.wikipedia.org/wiki/Byte_Order_Mark&#34;&gt;BOM&lt;/a&gt;. In order to get rid of that byte i had to create my own instance of &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.text.utf8encoding.aspx&#34;&gt;UTF8Encoding&lt;/a&gt;. Finally, i can present some working code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;MemoryStream memoryStream = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MemoryStream();
XmlWriterSettings xmlWriterSettings = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; XmlWriterSettings();
xmlWriterSettings.Encoding = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UTF8Encoding(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
xmlWriterSettings.ConformanceLevel = ConformanceLevel.Document;
xmlWriterSettings.Indent = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;

XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
xmlWriter.WriteStartDocument();
xmlWriter.WriteStartElement(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.timvw.be/ns&amp;#34;&lt;/span&gt;);
xmlWriter.WriteEndElement();
xmlWriter.WriteEndDocument();
xmlWriter.Flush();
xmlWriter.Close();

&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; xmlString = Encoding.UTF8.GetString(memoryStream.ToArray());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>The NullableDateAndTimePicker Control</title>
      <link>/post/2007-01-07-the-nullabledateandtimepicker-control/</link>
      <pubDate>Sun, 07 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-07-the-nullabledateandtimepicker-control/</guid>
      <description>
        
          &lt;p&gt;A while ago i presented the concept of a &lt;a href=&#34;http://www.timvw.be/a-dateandtimepicker-control/&#34;&gt;DateAndTimePicker&lt;/a&gt;. Today someone asked if it&amp;rsquo;s possible to give the user an option to &amp;lsquo;not choose a DateTime&amp;rsquo;. I created a UserControl that has both a DateAndTimePicker and a CheckBox with a Value property of Nullable&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dateandtimepicker-nullable-1.gif&#34; alt=&#34;screenshot of the nullable dateandtimepicker&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dateandtimepicker-nullable-2.gif&#34; alt=&#34;screenshot of the nullable dateandtimepicker&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the updated &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DateAndTimePicker.zip&#34;&gt;DateAndTimePicker.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Enable and disable TabPages on a TabControl</title>
      <link>/post/2007-01-06-enable-and-disable-tabpages-on-a-tabcontrol/</link>
      <pubDate>Sat, 06 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-06-enable-and-disable-tabpages-on-a-tabcontrol/</guid>
      <description>
        
          &lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/disabled-tabcontrol-1.gif&#34; alt=&#34;screenshot of tabcontrol with disabled tabpages&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/disabled-tabcontrol-2.gif&#34; alt=&#34;screenshot of tabcontrol with disabled tabpages&#34;&gt;&lt;/p&gt;
&lt;p&gt;Apparently &lt;a href=&#34;http://www.microsoft.com&#34;&gt;Microsoft&lt;/a&gt; choose not to implement support for disabled &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.tabpage.aspx&#34;&gt;TabPage&lt;/a&gt;s. The reason seems to be that it&amp;rsquo;s against their &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/aa511493.aspx&#34;&gt;Guidelines for Tabs&lt;/a&gt;. Let&amp;rsquo;s ignore the guideline and implement the support anyway. First we set the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.tabcontrol.drawmode.aspx&#34;&gt;DrawMode&lt;/a&gt; property of the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.tabcontrol.aspx&#34;&gt;TabControl&lt;/a&gt; to &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.tabdrawmode.aspx&#34;&gt;OwnerDrawFixed&lt;/a&gt;. Next we add an eventhandler for the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.tabcontrol.drawitem.aspx&#34;&gt;DrawItem&lt;/a&gt; Event&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; tabControl1_DrawItem(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DrawItemEventArgs e)
{
	TabControl tabControl = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; TabControl;
	TabPage tabPage = tabControl.TabPages[e.Index];
	Rectangle tabRectangle = tabControl.GetTabRect(e.Index);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tabControl.Alignment == TabAlignment.Left || tabControl.Alignment == TabAlignment.Right)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; rotateAngle = &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tabControl.Alignment == TabAlignment.Left)
		{
			rotateAngle = &lt;span style=&#34;color:#ae81ff&#34;&gt;270&lt;/span&gt;;
		}

		PointF cp = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PointF(tabRectangle.Left + (tabRectangle.Width / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), tabRectangle.Top + (tabRectangle.Height / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
		e.Graphics.TranslateTransform(cp.X, cp.Y);
		e.Graphics.RotateTransform(rotateAngle);
		tabRectangle = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Rectangle(-(tabRectangle.Height / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), -(tabRectangle.Width / &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), tabRectangle.Height, tabRectangle.Width);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (SolidBrush foreBrush = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SolidBrush(tabPage.ForeColor))
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (SolidBrush backBrush = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SolidBrush(tabPage.BackColor))
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!tabPage.Enabled)
			{
				foreBrush.Color = SystemColors.GrayText;
			}

			e.Graphics.FillRectangle(backBrush, tabRectangle);

			&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (StringFormat stringFormat = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringFormat())
			{
				stringFormat.Alignment = StringAlignment.Center;
				stringFormat.LineAlignment = StringAlignment.Center;
				e.Graphics.DrawString(tabPage.Text, e.Font, foreBrush, tabRectangle, stringFormat);
			}
		}
	}

	e.Graphics.ResetTransform();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we handle the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.tabcontrol.selecting.aspx&#34;&gt;Selecting&lt;/a&gt; Event as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; tabControl1_Selecting(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, TabControlCancelEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!e.TabPage.Enabled)
	{
		e.Cancel = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works pretty fine, but we still have to make sure that the TabPages are Invalidated when the users changes their &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.enabled.aspx&#34;&gt;Enabled&lt;/a&gt; property. We do this by attaching and detaching an eventhandler for their &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.enabledchanged.aspx&#34;&gt;EnabledChanged&lt;/a&gt; Event when they&amp;rsquo;re &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.controladded.aspx&#34;&gt;added&lt;/a&gt; and &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.controlremoved.aspx&#34;&gt;removed&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; tabControl1_ControlAdded(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, ControlEventArgs e)
{
	TabPage tabPage = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; TabPage;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tabPage != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
	{
		tabPage.EnabledChanged += &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EventHandler(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.tabPage_EnabledChanged);
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; tabControl1_ControlRemoved(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, ControlEventArgs e)
{
	TabPage tabPage = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; TabPage;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tabPage != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
	{
		tabPage.EnabledChanged -= &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EventHandler(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.tabPage_EnabledChanged);
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; tabPage_EnabledChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	TabPage tabPage = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; TabPage;
	TabControl tabControl = tabPage.Parent &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; TabControl;
	tabControl.Invalidate(tabPage.ClientRectangle);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to download the demo application: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DisabledTabControl.zip&#34;&gt;DisabledTabControl.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Developing a DataSource for your DataGridView</title>
      <link>/post/2007-01-04-developing-a-datasource-for-your-datagridview/</link>
      <pubDate>Thu, 04 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-01-04-developing-a-datasource-for-your-datagridview/</guid>
      <description>
        
          &lt;p&gt;Imagine that you want to develop a DataSource that is capable to represent the data displayed in the following excel sheet&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dgv-ds-1.gif&#34; alt=&#34;screenshot of excel sheet&#34;&gt;&lt;/p&gt;
&lt;p&gt;For each region the values are given. The YEAR value is defined as the sum of Q1, Q2, Q3 and Q4, eg: for EMEA this is SUM(B2:E2). The GLOBAL values are calculated as the sum of the regions for the quarter, eg: for Q1 this is SUM(B2:B5). We&amp;rsquo;ll start with the easiest task: Add columns to the DGV and define the headers&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dgv-ds-2.gif&#34; alt=&#34;screenshot of first datagridview&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we look at the DGV it becomes clear that each row exists out of a Label, values for Q1 to Q4 and the sum of those values. If we translate this to code we end up with something like: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/SalesRow.txt&#34;&gt;SalesRow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve implemented &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx&#34;&gt;INotifyPropertyChanged&lt;/a&gt; because i want the DGV to request and display the updated Year value when one of the quarterly values changes. Configure the Columns to use these properties as DataPropertyName and add a couple of SalesRow instances to a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/ms132679.aspx&#34;&gt;BindingList&lt;/a&gt; that we use as DataSource for the DGV.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
	InitializeComponent();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnRegion.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Label&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ1.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q1&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ2.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q2&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ3.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q3&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ4.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q4&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnYear.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Year&amp;#34;&lt;/span&gt;;

	BindingList&amp;lt;salesRow&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;salesRow&amp;gt;();
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EMEA&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; }));
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LATAM&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt; }));
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;APAC&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; }));
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NORAM&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt; }));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = bindingList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that the Year value is nicely updated when the user changes one of the quarterly values&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dgv-ds-3.gif&#34; alt=&#34;screenshot of datagridview with rows for regions.&#34;&gt;&lt;/p&gt;
&lt;p&gt;In order to calculate the GLOBAL values we inherit from the SalesRow class and override the implementation for the Q1, Q2, Q3, Q4 and Year properties: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/GlobalSalesRow.txt&#34;&gt;GlobalSalesRow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally we can wrap everyting in a &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/SalesRows.txt&#34;&gt;SalesRows&lt;/a&gt; class to represent our Data. Hooking this code up is as easy as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
{
	InitializeComponent();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.AutoGenerateColumns = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnRegion.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Label&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ1.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q1&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ2.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q2&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ3.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q3&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnQ4.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q4&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ColumnYear.DataPropertyName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Year&amp;#34;&lt;/span&gt;;

	BindingList&amp;lt;salesRow&amp;gt; bindingList = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingList&amp;lt;salesRow&amp;gt;();
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EMEA&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; }));
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LATAM&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt; }));
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;APAC&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; }));
	bindingList.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRow(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NORAM&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt; }));

	SalesRows salesRows = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SalesRows(bindingList);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rows&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DataSource = salesRows;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is a screenshot of the result&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dgv-ds-4.gif&#34; alt=&#34;screenshot of the complete implementation at work&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the complete project: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DataGridViewDataSource.zip&#34;&gt;DataGridViewDataSource.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Print a Control</title>
      <link>/post/2006-12-31-print-a-control/</link>
      <pubDate>Sun, 31 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-31-print-a-control/</guid>
      <description>
        
          &lt;p&gt;A while ago i discovered the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.drawtobitmap.aspx&#34;&gt;DrawToBitmap&lt;/a&gt; method on the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.aspx&#34;&gt;Control&lt;/a&gt; class. The availability of this method makes it relatively easy to implement a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.drawing.printing.printpageeventhandler.aspx&#34;&gt;PrintPageEventHandler&lt;/a&gt; for the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.drawing.printing.printdocument.aspx&#34;&gt;PrintDocument&lt;/a&gt; class. Here is an example implementation that prints a DataGridView&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; buttonPrint_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.printDocument1.Print();
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; printDocument1_BeginPrint(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, PrintEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.currentPage = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; printDocument1_PrintPage(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, System.Drawing.Printing.PrintPageEventArgs e)
{
	Size oldSize = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Size;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Height = Math.Max(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Height, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.PreferredSize.Height);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Width = Math.Max(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Width, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.PreferredSize.Width);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; requiredPagesForWidth = ((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Width / e.MarginBounds.Width) + &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; requiredPagesForHeight = ((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Height / e.MarginBounds.Height) + &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; requiredPages = requiredPagesForWidth * requiredPagesForHeight;
	e.HasMorePages = (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.currentPage &amp;lt; requiredPages - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; posX = ((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.currentPage % requiredPagesForWidth) &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;* e.MarginBounds.Width; 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; posY = ((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.currentPage / requiredPagesForWidth) &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;* e.MarginBounds.Height; 
	Graphics graphics = e.Graphics; 
	Bitmap bitmap = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Bitmap(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Width, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Height); 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.DrawToBitmap(bitmap, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Bounds); 
	graphics.DrawImage(bitmap, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Rectangle(e.MarginBounds.X, e.MarginBounds.Y, e.MarginBounds.Width, e.MarginBounds.Height), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Rectangle(posX, posY, e.MarginBounds.Width, e.MarginBounds.Height), GraphicsUnit.Pixel); 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Size = oldSize; 
	++&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.currentPage; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that you understand the main idea, let&amp;rsquo;s wrap it in a class and make it reusable: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ResizedControlPrintPageEventHandler.txt&#34;&gt;ResizedControlPrintPageEventHandler&lt;/a&gt;. Using this class is as simple as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Initialise a controlPrintPageEventHandler and register the PrintPage method...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ResizedControlPrintPageEventHandler resizedControlPrintPageEventHandler = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ResizedControlPrintPageEventHandler(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1);
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.printDocument1.PrintPage += resizedControlPrintPageEventHandler.PrintPage;

&lt;span style=&#34;color:#75715e&#34;&gt;// Print the control
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; buttonPrint_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.printDocument1.Print();
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Give the user a preview
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; buttonPreview_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.printPreviewDialog1.Show();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are a couple of screenshots&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/print-datagridview1.gif&#34; alt=&#34;Screenshot of demo application that has a datagridview with scrollbars.&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/print-datagridview2.gif&#34; alt=&#34;Screenshot of print preview. Notice that the scrollbars are gone.&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/print-datagridview3.gif&#34; alt=&#34;Screenshot of the print document.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download the class and demo application: &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/ControlPrintPageEventHandler.zip&#34;&gt;ControlPrintPageEventHandler.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>An example of why i don&#39;t like the ext/filter API</title>
      <link>/post/2006-12-27-an-example-of-why-i-dont-like-extfilter/</link>
      <pubDate>Wed, 27 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-27-an-example-of-why-i-dont-like-extfilter/</guid>
      <description>
        
          &lt;p&gt;Earlier this week i decided to experiment with the &lt;a href=&#34;http://be2.php.net/manual/en/function.filter-input.php&#34;&gt;Filter&lt;/a&gt; functions. Here&amp;rsquo;s an example that illustrates why i think the API needs to be improved&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
$isgoodapi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_input&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;INPUT_GET&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isgoodapi&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;FILTER_VALIDATE_BOOLEAN&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;is_null&lt;/span&gt;($isgoodapi)) {
 &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;the &amp;#39;isgoodapi&amp;#39; argument is missing.&amp;#34;&lt;/span&gt;;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($isgoodapi &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;) {
 &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The &amp;#39;isgoodapi&amp;#39; argument must be a valid boolean.&amp;#34;&lt;/span&gt;;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
 &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;isgoodapi is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$isgoodapi&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#34;&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now you request the page with ?isgoodapi=false. The obvious problem is the fact that the function returns multiple &amp;lsquo;sorts&amp;rsquo; of return values: Value of the requested variable on success, FALSE if the filter fails, or NULL if the variable_name variable is not set. If the flag FILTER_NULL_ON_FAILURE is used, it returns FALSE if the variable is not set and NULL if the filter fails.&lt;/p&gt;
&lt;p&gt;The documentation for &lt;a href=&#34;http://be2.php.net/manual/en/ref.filter.php&#34;&gt;Filter Functions&lt;/a&gt; says for FILTER_VALIDATE_BOOLEAN: Returns TRUE for &amp;ldquo;1&amp;rdquo;, &amp;ldquo;true&amp;rdquo;, &amp;ldquo;on&amp;rdquo; and &amp;ldquo;yes&amp;rdquo;, FALSE for &amp;ldquo;0&amp;rdquo;, &amp;ldquo;false&amp;rdquo;, &amp;ldquo;off&amp;rdquo;, &amp;ldquo;no&amp;rdquo;, and &amp;ldquo;&amp;rdquo;, NULL otherwise. So if you try with ?isgoodapi=konijn you would expect NULL but that isn&amp;rsquo;t the case either.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring System.CodeDom</title>
      <link>/post/2006-12-26-exploring-systemcodedom/</link>
      <pubDate>Tue, 26 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-26-exploring-systemcodedom/</guid>
      <description>
        
          &lt;p&gt;Today i wanted to experiment with &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.codedom.aspx&#34;&gt;System.CodeDom&lt;/a&gt;. This little program requests the user to input names for a namespace, class and method. It also asks the user to input the code that should go into the method body. Then it generates an assembly (test.dll) and creates a new appdomain in which the assembly is loaded&amp;hellip; Finally it initializes an instance of the created class and calls the method&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; loopEnd = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (loopEnd != &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;//string namespaceName = &amp;#34;MySpace&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//string className = &amp;#34;MyClass&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//string methodName = &amp;#34;MyMethod&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//StringBuilder stringBuilder = new StringBuilder(&amp;#34;System.Console.WriteLine(\&amp;#34;hihi\&amp;#34;);&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
		Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter namespace: &amp;#34;&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; namespaceName = Console.ReadLine();
		Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter class: &amp;#34;&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; className = Console.ReadLine();
		Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter method: &amp;#34;&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; methodName = Console.ReadLine();

		StringBuilder stringBuilder = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuilder();
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter method body (X to stop)&amp;#34;&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; input = Console.ReadLine();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (input != &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;)
		{
			stringBuilder.Append(input);
			input = Console.ReadLine();
		}

		CodeCompileUnit codeCompileUnit = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeCompileUnit();

		CodeAttributeDeclaration assemblyTitleAttribute = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeAttributeDeclaration(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System.Reflection.AssemblyTitle&amp;#34;&lt;/span&gt;);
		assemblyTitleAttribute.Arguments.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeAttributeArgument(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodePrimitiveExpression(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A Generated Assembly&amp;#34;&lt;/span&gt;)));
		codeCompileUnit.AssemblyCustomAttributes.Add(assemblyTitleAttribute);

		CodeTypeDeclaration codeTypeDeclaration = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeTypeDeclaration();
		codeTypeDeclaration.Name = className;
		codeTypeDeclaration.IsClass = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
		codeTypeDeclaration.Attributes = MemberAttributes.Public;

		CodeMemberMethod codeMemberMethod = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeMemberMethod();
		codeMemberMethod.Name = methodName;
		codeMemberMethod.Attributes = MemberAttributes.Public;
		codeMemberMethod.ReturnType = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeTypeReference(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;));
		codeMemberMethod.Statements.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeSnippetStatement(stringBuilder.ToString()));

		codeTypeDeclaration.Members.Add(codeMemberMethod);

		CodeNamespace codeNamespace = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CodeNamespace(namespaceName);
		codeNamespace.Types.Add(codeTypeDeclaration);
		codeCompileUnit.Namespaces.Add(codeNamespace);

		CompilerParameters compilerParameters = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CompilerParameters();
		compilerParameters.OutputAssembly = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test.dll&amp;#34;&lt;/span&gt;;
		compilerParameters.GenerateExecutable = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		compilerParameters.GenerateInMemory = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;

		CSharpCodeProvider cSharpCodeProvider = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CSharpCodeProvider();
		CompilerResults compilerResults = cSharpCodeProvider.CompileAssemblyFromDom(compilerParameters, codeCompileUnit);

		AppDomain appDomain = AppDomain.CreateDomain(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new appdomain&amp;#34;&lt;/span&gt;);
		Assembly assembly = appDomain.Load(compilerResults.CompiledAssembly.FullName);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; instance = assembly.CreateInstance(namespaceName + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; + className);
		instance.GetType().InvokeMember(methodName, BindingFlags.Instance | BindingFlags.Public | BindingFlags.InvokeMethod, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, instance, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
		AppDomain.Unload(appDomain);

		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter X to end (enter something different to continue)&amp;#34;&lt;/span&gt;);
		loopEnd = Console.ReadLine();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Drag and Drop Microsoft Office Outlook Contacts on your WinForm</title>
      <link>/post/2006-12-19-drag-and-drop-microsoft-office-outlook-contacts-on-your-winform/</link>
      <pubDate>Tue, 19 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-19-drag-and-drop-microsoft-office-outlook-contacts-on-your-winform/</guid>
      <description>
        
          &lt;p&gt;Earlier today i saw someone that wanted to know how to drag and drop Microsoft Office Outlook Contacts on his winform (and get the data of the contact). Here are the few lines of code that do what he asked for&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in the constructor of the form (or in the InitializeComponent method if you set it via the Designer)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.AllowDrop = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;// handle the DragOver event
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_DragOver(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DragEventArgs e)
{
	e.Effect = DragDropEffects.All;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// handle the DragDrop event
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_DragDrop(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DragEventArgs e)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text = (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)e.Data.GetData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.label1.Text = text;

	&lt;span style=&#34;color:#75715e&#34;&gt;// for more finegrained access to the data
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//string[] lines = text.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/outlookcontactdragdrop.jpg&#34; alt=&#34;screenshot of outlook contact that was dragged and dropped on the form&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>A DateAndTimePicker control</title>
      <link>/post/2006-12-18-a-dateandtimepicker-control/</link>
      <pubDate>Mon, 18 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-18-a-dateandtimepicker-control/</guid>
      <description>
        
          &lt;p&gt;The &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datetimepicker.aspx&#34;&gt;DateTimePicker&lt;/a&gt; control allows the user to input a Date or a Time. The problem is that you can&amp;rsquo;t let the user pick both a date and a time with one instance of the control (unless you set the CustomFormat property and give up the &amp;lsquo;nice&amp;rsquo; ui) so i decided to build my own DateAndTimePicker control&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/dateandtimepicker.jpg&#34; alt=&#34;screenshot of the dateandtimepicker control&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download and extended the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/DateAndTimePicker.zip&#34;&gt;DateAndTimePicker.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Looking up the MediaType of a given Logical Drive</title>
      <link>/post/2006-12-18-looking-up-the-mediatype-of-a-given-logical-drive/</link>
      <pubDate>Mon, 18 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-18-looking-up-the-mediatype-of-a-given-logical-drive/</guid>
      <description>
        
          &lt;p&gt;Earlier today i saw someone asking how he could find out the MediaType of a given logical drive. The easy solution would be to iterate over &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.io.driveinfo.getdrives.aspx&#34;&gt;DriveInfo.GetDrives&lt;/a&gt; and pick the one you are looking for&amp;hellip; Anyway, i thought it would be nice to experiment with &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wmisdk/wmi/wmi_start_page.asp&#34;&gt;WMI&lt;/a&gt; so i wrote a little function that uses &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wmisdk/wmi/Win32_LogicalDisk.asp&#34;&gt;Win32_LogicalDisk&lt;/a&gt; to look the MediaType up&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;[] driveLetters = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;[] { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt; };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; driveLetter &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; driveLetters)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
		{
			Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Drive {0} is a {1}&amp;#34;&lt;/span&gt;, driveLetter, GetMediaType(driveLetter));
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (ManagementException)
		{
			Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Drive {0} was not found&amp;#34;&lt;/span&gt;, driveLetter);
		}
	}

	Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Press any key to continue...&amp;#34;&lt;/span&gt;);
	Console.ReadKey();
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetMediaType(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; driveLetter)
{
	ManagementObject disk = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ManagementObject(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;win32_logicaldisk.deviceid=\&amp;#34;&amp;#34;&lt;/span&gt; + driveLetter + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:\&amp;#34;&amp;#34;&lt;/span&gt;);
	disk.Get();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; GetMediaMeaning((&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;)disk[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MediaType&amp;#34;&lt;/span&gt;]);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetMediaMeaning(&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt; mediaType)
{
	Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; mediaTypes = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;();
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unknown Format&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;51/4-Inch Floppy Disk -- 1.2Mb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;31/2-Inch Floppy Disk -- 1.44Mb -512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;31/2-Inch Floppy Disk -- 2.88Mb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;31/2-Inch Floppy Disk -- 20.8Mb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;31/2-Inch Floppy Disk -- 720Kb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;51/4-Inch Floppy Disk -- 360Kb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;51/4-Inch Floppy Disk -- 320Kb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;51/4-Inch Floppy Disk -- 320Kb -- 1024bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;51/4-Inch Floppy Disk -- 180Kb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;51/4-Inch Floppy Disk -- 160Kb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Removable media other than floppy&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fixed hard disk media&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;31/2-Inch Floppy Disk -- 120Mb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;31/2-Inch Floppy Disk -- 640Kb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;51/4-Inch Floppy Disk -- 640Kb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;51/4-Inch Floppy Disk -- 720Kb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;31/2-Inch Floppy Disk -- 1.2Mb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;31/2-Inch Floppy Disk -- 1.23Mb -- 1024bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;51/4-Inch Floppy Disk -- 1.23Mb -- 1024bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;31/2-Inch Floppy Disk -- 128Mb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;31/2-Inch Floppy Disk -- 230Mb -- 512bytes/sector&amp;#34;&lt;/span&gt;);
	mediaTypes.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8-Inch Floppy Disk -- 256Kb -- 128bytes/sector&amp;#34;&lt;/span&gt;);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; meaning = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unknown format&amp;#34;&lt;/span&gt;;
	mediaTypes.TryGetValue(mediaType, &lt;span style=&#34;color:#66d9ef&#34;&gt;out&lt;/span&gt; meaning);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; meaning;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Simple OutlookBar Control</title>
      <link>/post/2006-12-17-simple-outlookbar-control/</link>
      <pubDate>Sun, 17 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-17-simple-outlookbar-control/</guid>
      <description>
        
          &lt;p&gt;Earlier this evening i wanted to experiment with the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.toolstrip.aspx&#34;&gt;ToolStrip&lt;/a&gt; class so i decided to design a simple OutlookBar Control and a demo application that uses this control. Feel free to download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/OutlookBar.zip&#34;&gt;OutlookBar.zip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/outlookbardemo.jpg&#34; alt=&#34;screenshot of OutlookBar demo&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Pondering about the difference between abstract classes and interfaces</title>
      <link>/post/2006-12-16-pondering-about-the-difference-between-abstract-classes-and-interfaces/</link>
      <pubDate>Sat, 16 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-16-pondering-about-the-difference-between-abstract-classes-and-interfaces/</guid>
      <description>
        
          &lt;p&gt;Back in May i was asked to explain the difference between an &lt;a href=&#34;http://msdn.microsoft.com/library/en-us/csref/html/vcreftheinterfacetype.asp&#34;&gt;interface&lt;/a&gt; and an &lt;a href=&#34;http://msdn.microsoft.com/library/en-us/csspec/html/vclrfcsharpspec_10_1_1_1.asp&#34;&gt;abstract class&lt;/a&gt; at a job interview. Obviously the interviewer wanted me to tell him that an abstract class allows you to provide a partial implementation&amp;hellip; I answered that the major difference is the fact that with interface-based programming you&amp;rsquo;re not forced into an inheritance tree that might not make sense and that i didn&amp;rsquo;t see much use for abstract classes (I&amp;rsquo;m not sure he saw that one coming :P). For some unknown reason this kept spinning in my head&amp;hellip; Here&amp;rsquo;s an example of an abstract class and a concrete implementation&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FooAbstract&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DoX()
	{
		DoY();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DoY();
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FooConcrete&lt;/span&gt; : FooAbstract
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DoY()
	{
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FooConcrete does Y&amp;#34;&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I find the interface-based implementation below a lot cleaner because it still provides the partial implementation but a concrete implementation is not forced into the inheritance relationship anymore. Another advantage is that the implementation only depends on the interface (the unimplemented parts) so you get some looser coupling than with abstract classes. A disadvantage is that an interface requires you to make all the unimplemented methods public&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; IAbstract myAbstract;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Foo(IAbstract myAbstract)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (myAbstract == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArgumentNullException();
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myAbstract = myAbstract;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DoX()
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.myAbstract.DoY();
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IAbstract
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DoY();
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Concrete&lt;/span&gt; : IAbstract
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DoY()
	{
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Concrete does Y&amp;#34;&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Conclusion: I still don&amp;rsquo;t see much use for abstract classes.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Helper methods for DateTime</title>
      <link>/post/2006-12-14-helper-methods-for-datetime/</link>
      <pubDate>Thu, 14 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-14-helper-methods-for-datetime/</guid>
      <description>
        
          &lt;p&gt;Here are a couple of methods that help you with the manipulation of DateTime structs:&lt;/p&gt;
&lt;p&gt;Code: &lt;a href=&#34;/wp-content/code/csharp/DateTimeHelpers.txt&#34;&gt;csharp/DateTimeHelpers.txt&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>What goes up must come down...</title>
      <link>/post/2006-12-13-what-goes-up-must-come-down/</link>
      <pubDate>Wed, 13 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-12-13-what-goes-up-must-come-down/</guid>
      <description>
        
          &lt;p&gt;What goes up must come down&amp;hellip; So you might think that after each CellMouseDown event you recieve a CellMouseUp event&amp;hellip; Well, here is some code that proves that isn&amp;rsquo;t always true&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; lastEvent;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
	{
		InitializeComponent();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.ColumnCount = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.RowCount = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; LastEvent
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lastEvent; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lastEvent == &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;)
			{
				MessageBox.Show(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i&amp;#39;ve detected two &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; after each other&amp;#34;&lt;/span&gt;);
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lastEvent = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_CellMouseDown(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewCellMouseEventArgs e)
	{
		LastEvent = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MouseDown&amp;#34;&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_CellMouseUp(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewCellMouseEventArgs e)
	{
		LastEvent = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MouseUp&amp;#34;&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And with a bit of a twisted optical mouse it&amp;rsquo;s pretty easy to see the following MessageBox&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/mousedown.jpg&#34; alt=&#34;MessageBox that says the MouseDownEvent was captured two times after each other&#34;&gt;&lt;/p&gt;
&lt;p&gt;After a bit of research i also found the following at &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.mouseeventargs.aspx&#34;&gt;MouseEventArgs&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;

        
      </description>
    </item>
    
    <item>
      <title>Master-Slave for databound ComboBoxes</title>
      <link>/post/2006-11-25-master-slave-for-databound-comboboxes/</link>
      <pubDate>Sat, 25 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-11-25-master-slave-for-databound-comboboxes/</guid>
      <description>
        
          &lt;p&gt;In most examples on the Internet you&amp;rsquo;ll find that the Master has a property that returns the allowed Slaves. Here&amp;rsquo;s an example that does not require such a property. Let&amp;rsquo;s start with a simple class that represents a Person.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name = name;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we define a class to hold the choosen Master and Slave persons.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MasterSlave&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Person master;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Person slave;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MasterSlave()
	{
		Person[] masters = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.GetMasters();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.master = masters[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];

		Person[] slaves = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.GetSlaves(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.master);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.slave = slaves[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person Master
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.master; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.master = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person Slave
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.slave; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.slave = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person[] GetMasters()
	{
		List&amp;lt;person&amp;gt; masters = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;person&amp;gt;();
		masters.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master1&amp;#34;&lt;/span&gt;));
		masters.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master2&amp;#34;&lt;/span&gt;));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; masters.ToArray();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person[] GetSlaves(Person person)
	{
		List&amp;lt;person&amp;gt; slaves = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;person&amp;gt;();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (person.Name)
		{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master1&amp;#34;&lt;/span&gt;:
		slaves.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master1-slave1&amp;#34;&lt;/span&gt;));
		slaves.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master1-slave2&amp;#34;&lt;/span&gt;));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master2&amp;#34;&lt;/span&gt;:
		slaves.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master2-slave1&amp;#34;&lt;/span&gt;));
		slaves.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master2-slave2&amp;#34;&lt;/span&gt;));
		slaves.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master2-slave3&amp;#34;&lt;/span&gt;));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; slaves.ToArray();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can hook these objects to your Form.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1()
	{
		InitializeComponent();

		MasterSlave masterSlave = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MasterSlave();

		BindingSource masterBindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingSource();
		masterBindingSource.DataSource = masterSlave.GetMasters();
		masterBindingSource.CurrentChanged += &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EventHandler(masterBindingSource_CurrentChanged);

		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxMaster.DataSource = masterBindingSource;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxMaster.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxMaster.DataBindings.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SelectedItem&amp;#34;&lt;/span&gt;, masterSlave, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Master&amp;#34;&lt;/span&gt;);

		BindingSource slaveBindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BindingSource();
		slaveBindingSource.DataSource = masterSlave.GetSlaves(masterBindingSource.Current &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Person);

		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxSlave.DataSource = slaveBindingSource;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxSlave.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxSlave.DataBindings.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SelectedItem&amp;#34;&lt;/span&gt;, masterSlave, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Slave&amp;#34;&lt;/span&gt;);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; masterBindingSource_CurrentChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
	{
		BindingSource masterBindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxMaster.DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; BindingSource;
		Person master = masterBindingSource.Current &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Person;

		BindingSource slaveBindingSource = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxSlave.DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; BindingSource;
		MasterSlave masterSlave = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxSlave.DataBindings[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SelectedItem&amp;#34;&lt;/span&gt;].DataSource &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; MasterSlave;
		slaveBindingSource.DataSource = masterSlave.GetSlaves(master);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>A better look at the Foreach statement</title>
      <link>/post/2006-11-23-126/</link>
      <pubDate>Thu, 23 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-11-23-126/</guid>
      <description>
        
          &lt;p&gt;Earlier this week i was a bit surprised that the following code compiled without errors or warning messages. I expected at least a warning that i was trying to assign a double value to an integer parameter&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;[] values = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.5&lt;/span&gt; };

	Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foreach with int:&amp;#34;&lt;/span&gt;);

	&lt;span style=&#34;color:#75715e&#34;&gt;// happily iterate over the double values as if they are ints...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// this outputs the lines 1, 2, 3, 4 and 5.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; values)
	{
		Console.WriteLine(&lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So i decided to dive into the &lt;a href=&#34;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-334.pdf&#34;&gt;C# Language Specification&lt;/a&gt; (Section 15.8.4 The foreach statement) where i found the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; {&lt;!-- raw HTML omitted --&gt; E e = ((C)(x)).GetEnumerator();&lt;!-- raw HTML omitted --&gt; try {&lt;!-- raw HTML omitted --&gt; V v;&lt;!-- raw HTML omitted --&gt; while (e.MoveNext()) {&lt;!-- raw HTML omitted --&gt; v = (V)(T)e.Current;&lt;!-- raw HTML omitted --&gt; embedded-statement&lt;!-- raw HTML omitted --&gt; }&lt;!-- raw HTML omitted --&gt; }&lt;!-- raw HTML omitted --&gt; finally {&lt;!-- raw HTML omitted --&gt; â€¦ // Dispose e&lt;!-- raw HTML omitted --&gt; }&lt;!-- raw HTML omitted --&gt; }&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        
      </description>
    </item>
    
    <item>
      <title>Querying Active Directory</title>
      <link>/post/2006-11-04-querying-active-directory/</link>
      <pubDate>Sat, 04 Nov 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-11-04-querying-active-directory/</guid>
      <description>
        
          &lt;p&gt;A while ago i wanted to figure out which demo accounts i had already created in my &lt;a href=&#34;http://www.microsoft.com/windowsserver2003/technologies/directory/activedirectory/default.mspx&#34;&gt;Active Directory&lt;/a&gt;. Since i was smart enough to give them all a description &amp;lsquo;Demo User&amp;rsquo; this was easily done as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;using( DirectoryEntry directoryEntry = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryEntry() )
{
	using( DirectorySearcher directorySearcher = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectorySearcher() )
	{
		directorySearcher.Filter = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;amp;(objectClass=user)(description=Demo User))&amp;#34;&lt;/span&gt;;
		directorySearcher.SearchScope = SearchScope.Subtree;
		directorySearcher.Sort = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SortOption(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;displayname&amp;#34;&lt;/span&gt;, SortDirection.Ascending );

		SearchResultCollection results = directorySearcher.FindAll();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;( SearchResult result &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; results )
		{
			ResultPropertyCollection propertyCollection = result.Properties;
			Console.WriteLine( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}: {1}&amp;#34;&lt;/span&gt;, propertyCollection&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;displayname&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;].ToString(), propertyCollection&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;].ToString() );
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Using a collection as parameter for a stored procedure</title>
      <link>/post/2006-10-23-using-a-collection-as-parameter-for-a-stored-procedure/</link>
      <pubDate>Mon, 23 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-10-23-using-a-collection-as-parameter-for-a-stored-procedure/</guid>
      <description>
        
          &lt;p&gt;Sometimes you want to select rows where a value is in a specific collection. Here&amp;rsquo;s an example that show how you can select all the rows in the TEST table with an id of 1, 2 or 3. First we create an SQL type to contain a list of numbers&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TYPE&lt;/span&gt; LIST_NUMBER &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OF&lt;/span&gt; NUMBER(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next thing to do is add a custom type and function header to the package specification&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;PACKAGE TIMVW.TESTPACKAGE &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;TYPE&lt;/span&gt; CRSR_REF &lt;span style=&#34;color:#66d9ef&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;REF&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CURSOR&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;TYPE&lt;/span&gt; ARR&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_IDS &lt;span style=&#34;color:#66d9ef&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OF&lt;/span&gt; TEST.TEST&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_ID&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INDEX&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; BINARY_INTEGER;

&lt;span style=&#34;color:#66d9ef&#34;&gt;PROCEDURE&lt;/span&gt; GET_TESTS
(
P_IDS &lt;span style=&#34;color:#66d9ef&#34;&gt;IN&lt;/span&gt; ARR_IDS,
P_CURSOR &lt;span style=&#34;color:#66d9ef&#34;&gt;OUT&lt;/span&gt; CRSR_REF
);
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And offcourse we have to implement the function in the body&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PROCEDURE&lt;/span&gt; GET_TESTS
(
P_IDS &lt;span style=&#34;color:#66d9ef&#34;&gt;IN&lt;/span&gt; ARR_IDS,
P_CURSOR &lt;span style=&#34;color:#66d9ef&#34;&gt;OUT&lt;/span&gt; CRSR_REF
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt;

V_IDS LIST_NUMBER :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LIST_NUMBER();

&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt;

V_IDS.EXTEND(P_IDS.&lt;span style=&#34;color:#66d9ef&#34;&gt;COUNT&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;FOR&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;IN&lt;/span&gt; P_IDS.&lt;span style=&#34;color:#66d9ef&#34;&gt;FIRST&lt;/span&gt; .. P_IDS.&lt;span style=&#34;color:#66d9ef&#34;&gt;LAST&lt;/span&gt; LOOP
	V_IDS(i) :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; P_IDS(i);
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt; LOOP;

&lt;span style=&#34;color:#66d9ef&#34;&gt;OPEN&lt;/span&gt; P_CURSOR &lt;span style=&#34;color:#66d9ef&#34;&gt;FOR&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;
TEST.TEST_ID,
TEST.NAME,
TEST.TYPE_CODE
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;
TEST
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt;
TEST_ID &lt;span style=&#34;color:#66d9ef&#34;&gt;IN&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt;(V_IDS))
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt;
TEST.TEST_ID &lt;span style=&#34;color:#66d9ef&#34;&gt;ASC&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have done all this we can consume the function from our client code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (OracleConnection conn = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OracleConnection(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Id=u;password=p;Data Source=ORCL&amp;#34;&lt;/span&gt;))
{
	conn.Open();

	OracleCommand command = conn.CreateCommand();
	command.CommandType = CommandType.StoredProcedure;

	command.CommandText = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TIMVW.TESTPACKAGE.GET_TESTS&amp;#34;&lt;/span&gt;;
	command.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P_IDS&amp;#34;&lt;/span&gt;, OracleDbType.Int32, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; }, ParameterDirection.Input);
	command.Parameters[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P_IDS&amp;#34;&lt;/span&gt;].CollectionType = OracleCollectionType.PLSQLAssociativeArray;
	command.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P_CURSOR&amp;#34;&lt;/span&gt;, OracleDbType.RefCursor, ParameterDirection.Output);

	OracleDataReader reader = command.ExecuteReader();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (reader.Read())
	{
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test 	}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
	Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine);
	Console.ReadKey();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Searching made easy</title>
      <link>/post/2006-10-22-searching-made-easy/</link>
      <pubDate>Sun, 22 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-10-22-searching-made-easy/</guid>
      <description>
        
          &lt;p&gt;Very often i have to write queries that return all the rows where one or more columns match a specific value. If i add for every column the condition &amp;lsquo;P_COLUMN IS NULL OR COLUMN = P_COLUMN&amp;rsquo; to the WHERE clause i only have to write one query. Here&amp;rsquo;s an example of such a query&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PROCEDURE&lt;/span&gt; FIND_TESTS
(
	P_ID &lt;span style=&#34;color:#66d9ef&#34;&gt;IN&lt;/span&gt; TEST.ID&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;,
	P_TITLE &lt;span style=&#34;color:#66d9ef&#34;&gt;IN&lt;/span&gt; TEST.TITLE&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;,
	P_TYPE_CODE &lt;span style=&#34;color:#66d9ef&#34;&gt;IN&lt;/span&gt; TEST.TYPE_CODE&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Type&lt;/span&gt;,
	P_CURSOR &lt;span style=&#34;color:#66d9ef&#34;&gt;OUT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CURSOR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;REF&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;OPEN&lt;/span&gt;
P_CURSOR &lt;span style=&#34;color:#66d9ef&#34;&gt;FOR&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;
ID,
TITLE,
TYPE_CODE
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;
TEST
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt;
(P_ID &lt;span style=&#34;color:#66d9ef&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; ID &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; P_ID)
&lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; (P_TITLE &lt;span style=&#34;color:#66d9ef&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; TITLE &lt;span style=&#34;color:#66d9ef&#34;&gt;LIKE&lt;/span&gt; P_TITLE)
&lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; (P_TYPE_CODE &lt;span style=&#34;color:#66d9ef&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; TYPE_CODE &lt;span style=&#34;color:#66d9ef&#34;&gt;LIKE&lt;/span&gt; P_TYPE_CODE)
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt;
ID &lt;span style=&#34;color:#66d9ef&#34;&gt;ASC&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A couple of examples how you can use this query&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (OracleConnection conn = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OracleConnection(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User Id=u;password=p;Data Source=ORCL&amp;#34;&lt;/span&gt;))
{
	conn.Open();

	OracleCommand command = conn.CreateCommand();
	command.CommandText = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TIMVW.MYPACKAGE.FIND_TESTS&amp;#34;&lt;/span&gt;;
	command.CommandType = CommandType.StoredProcedure;

	&lt;span style=&#34;color:#75715e&#34;&gt;// select all tests of type_code &amp;#34;book&amp;#34; that have a title that starts with &amp;#34;Myst&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	command.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P_ID&amp;#34;&lt;/span&gt;, OracleDbType.Int32, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, DBNull.Value, ParameterDirection.Input);
	command.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P_TITLE&amp;#34;&lt;/span&gt;, OracleDbType.Varchar2, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Myst%&amp;#34;&lt;/span&gt;, ParameterDirection.Input);
	command.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P\_TYPE\_CODE&amp;#34;&lt;/span&gt;, OracleDbType.Varchar2, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;book&amp;#34;&lt;/span&gt;, ParameterDirection.Input);
	command.Parameters.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P_CURSOR&amp;#34;&lt;/span&gt;, OracleDbType.RefCursor, ParameterDirection.Output);

	&lt;span style=&#34;color:#75715e&#34;&gt;// select the test with id 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//command.Parameters.Add(&amp;#34;P_ID&amp;#34;, OracleDbType.Int32, 10, 1, ParameterDirection.Input);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//command.Parameters.Add(&amp;#34;P_TITLE&amp;#34;, OracleDbType.Varchar2, 20, DBNull.Value, ParameterDirection.Input);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//command.Parameters.Add(&amp;#34;P\_TYPE\_CODE&amp;#34;, OracleDbType.Varchar2, 20, DBNull.Value, ParameterDirection.Input);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//command.Parameters.Add(&amp;#34;P_CURSOR&amp;#34;, OracleDbType.RefCursor, ParameterDirection.Output);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	OracleDataReader reader = command.ExecuteReader();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (reader.Read())
	{
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test 	}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;
	Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine);
	Console.ReadKey();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Updating the Internet Options / Lan Settings</title>
      <link>/post/2006-10-12-updating-the-internet-options-lan-settings/</link>
      <pubDate>Thu, 12 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-10-12-updating-the-internet-options-lan-settings/</guid>
      <description>
        
          &lt;p&gt;A while ago i wrote that i had created two .reg files to update my Internet Options / Lan Settings (&lt;a href=&#34;http://www.timvw.be/automating-the-configuration-of-internet-options-and-lan-settings/&#34;&gt;Automating the configuration of Internet Options / Lan Settings&lt;/a&gt;). Yesterday i build a little Windows Service that automates this completely. With &lt;a href=&#34;http://windowssdk.msdn.microsoft.com/en-gb/library/aa366329.aspx&#34;&gt;NotifyAddrChange&lt;/a&gt; i am notified whenever a change occurs in the table that maps IPv4 addresses to interfaces&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[DllImport(&amp;#34;iphlpapi.dll&amp;#34;, CharSet = CharSet.Ansi)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; NotifyAddrChange(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; IntPtr handle, IntPtr overlapped);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The main loop of the service looks like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.isRunning)
{
	IntPtr handle = IntPtr.Zero;
	NotifyAddrChange(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; handle, IntPtr.Zero);
	UpdateRegistry();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Whenever i&amp;rsquo;m connected to the LAN at work i want to use a proxy. Here&amp;rsquo;s the code that takes care of this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UpdateRegistry()
{
	RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;Software\Microsoft\Windows\CurrentVersion\Internet Settings&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (IsInWorkLan())
	{
		registryKey.SetValue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AutoConfigURL&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://123.456.789.0&amp;#34;&lt;/span&gt;);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		registryKey.DeleteValue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AutoConfigURL&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Figuring out whether i&amp;rsquo;m connected to the LAN at work is pretty simple. As soon as i have an IPAddress that looks like 192.168.X.Y i&amp;rsquo;m connected. Here&amp;rsquo;s how i translated this into code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsInWorkLan()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (IPAddress ipAddress &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; Dns.GetHostAddresses(Dns.GetHostName()))
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (IsInWorkLan(ipAddress))
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IsInWorkLan(IPAddress ipAddress)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] bytes = ipAddress.GetAddressBytes();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] == &lt;span style=&#34;color:#ae81ff&#34;&gt;192&lt;/span&gt; &amp;amp;&amp;amp; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] == &lt;span style=&#34;color:#ae81ff&#34;&gt;168&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Screenshot of DataGridViews</title>
      <link>/post/2006-10-08-screenshot-of-datagridviews/</link>
      <pubDate>Sun, 08 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-10-08-screenshot-of-datagridviews/</guid>
      <description>
        
          &lt;p&gt;The problem with a regular screenshot is that you only get to see a part of the DataGridViews. Here&amp;rsquo;s an example of a typical form&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridviews-with-scrollbars.jpg&#34; alt=&#34;image of datagridview with scrollbars&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is a snippet that makes a screenshot of the complete DataGridViews&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;List&amp;lt;bitmap&amp;gt; bitmaps = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;bitmap&amp;gt;();
Size size = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Size();

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; ++i) 
{ 
	&lt;span style=&#34;color:#75715e&#34;&gt;// lookup the datagridview 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	DataGridView dataGridView = (DataGridView)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Controls[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dataGridView&amp;#34;&lt;/span&gt; + i]; 
	&lt;span style=&#34;color:#75715e&#34;&gt;// maximize the datagridview size (choosing between current and preferred) 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	Size oldSize = dataGridView.Size; 
	Size newSize = dataGridView.PreferredSize; 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dataGridView.Size.Width &amp;gt; newSize.Width)
	{
		newSize.Width = dataGridView.Size.Width;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dataGridView.Size.Height &amp;gt; newSize.Height)
	{
		newSize.Height = dataGridView.Size.Height;
	}

	dataGridView.Size = newSize;

	&lt;span style=&#34;color:#75715e&#34;&gt;// draw the datagridview into a bitmap
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	Bitmap bitmap = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Bitmap(dataGridView.Width, dataGridView.Height);
	dataGridView.DrawToBitmap(bitmap, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Rectangle(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, dataGridView.Width, dataGridView.Height));

	&lt;span style=&#34;color:#75715e&#34;&gt;// restore the datagridview to it&amp;#39;s original size
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	dataGridView.Size = oldSize;

	bitmaps.Add(bitmap);

	&lt;span style=&#34;color:#75715e&#34;&gt;// update total bitmap size
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (newSize.Width &amp;gt; size.Width)
	{
		size.Width = newSize.Width;
	}
	size.Height += newSize.Height;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// copy all the bitmaps into one large bitmap
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Bitmap bitmapComplete = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Bitmap(size.Width, size.Height);
Graphics g = Graphics.FromImage(bitmapComplete);

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; height = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; ++i) 
{ 
	g.DrawImageUnscaled(bitmaps[i - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, height); 
	height += bitmaps[i - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].Height; 
} 

&lt;span style=&#34;color:#75715e&#34;&gt;// bitmapComplete is ready for use 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// eg: pictureBox1.Image = bitmapComplete 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// eg: bitmapComplete.Save(@&amp;#34;C:\screenshot.jpg&amp;#34;, ImageFormat.Jpeg); 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/datagridviews-without-scrollbars.jpg&#34; alt=&#34;image of generated screenshot&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Accessing ConnectionStrings from App.config in a Console Application Project</title>
      <link>/post/2006-10-04-accessing-connectionstrings-from-appconfig-in-a-console-application-project/</link>
      <pubDate>Wed, 04 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-10-04-accessing-connectionstrings-from-appconfig-in-a-console-application-project/</guid>
      <description>
        
          &lt;p&gt;Earlier today i added a configuration file to my Console Applicaton Project (Add Item -&amp;gt; Application Configuration File). Via &lt;a href=&#34;http://www.google.be/url?sa=t&amp;amp;ct=res&amp;amp;cd=1&amp;amp;url=http%3A%2F%2Fmsdn2.microsoft.com%2Fen-us%2Flibrary%2Fsystem.configuration.configurationsettings.aspx&amp;amp;ei=Z80jRYH_C6emiAKbksTEDA&amp;amp;sig=___7EifcEUZZI1hKTg7xiADzIZfIk=&amp;amp;sig2=l3qMgh7T4zcrtCc2IZOp-A&#34;&gt;ConfigurationSettings&lt;/a&gt; i could only access the AppSettings. It took me a while to figure out that i had to add a reference to System.Configuration.dll. Once that was done i could access the ConnectionStrings via &lt;a href=&#34;http://www.google.be/url?sa=t&amp;amp;ct=res&amp;amp;cd=1&amp;amp;url=http%3A%2F%2Fmsdn2.microsoft.com%2Fen-us%2Flibrary%2Fsystem.configuration.configurationmanager.aspx&amp;amp;ei=wM0jRbOxF7mEiALA4smRDA&amp;amp;sig=__mZt6_vi0x3-IpA4WDtLjmB8J4qU=&amp;amp;sig2=RhtohKiKtaGgUOTNFNtJ-w&#34;&gt;ConfigurationManager&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>From UnixTime to DateTime and back</title>
      <link>/post/2006-10-04-from-unixtime-to-datetime-and-back/</link>
      <pubDate>Wed, 04 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-10-04-from-unixtime-to-datetime-and-back/</guid>
      <description>
        
          &lt;p&gt;Here are a couple of functions that allow you to convert from &lt;a href=&#34;http://en.wikipedia.org/wiki/Unixtime&#34;&gt;UnixTime&lt;/a&gt; to &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.datetime.aspx&#34;&gt;DateTime&lt;/a&gt; and back&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Util&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; DateTime UnixTime
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1970&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; DateTime FromUnixTime( &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; unixTime )
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; UnixTime.AddSeconds( unixTime );
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; ToUnixTime( DateTime dateTime )
	{
		TimeSpan timeSpan = dateTime -- UnixTime;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; timeSpan.TotalSeconds;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Code  39 barcodes recognizer</title>
      <link>/post/2006-09-18-code-39-barcodes-recognizer/</link>
      <pubDate>Mon, 18 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-18-code-39-barcodes-recognizer/</guid>
      <description>
        
          &lt;p&gt;Earlier today i read &lt;a href=&#34;http://community.bartdesmet.net/blogs/bart/archive/2006/09/18/4432.aspx&#34;&gt;Code 39 barcodes in C#&lt;/a&gt; by &lt;a href=&#34;http://community.bartdesmet.net/blogs/bart/default.aspx&#34;&gt;Bart De Smet&lt;/a&gt;. The article shows the reader how to generate a &lt;a href=&#34;http://en.wikipedia.org/wiki/Code_39&#34;&gt;Code 39 barcode&lt;/a&gt;. I thought it would be cool if you could actually recognize the barcode in the generated bitmaps so i last couple of hours i wrote a BarCode39 Reader 🙂 Feel free to get &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/BarCode39Reader.zip&#34;&gt;BarCode39Reader.zip&lt;/a&gt; sources now!(PS: I forgot to write this is still a very quick &amp;lsquo;n dirty hack. I don&amp;rsquo;t write bad code, just create a lot of opportunities to refactor 😉&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Anonymous methods</title>
      <link>/post/2006-09-16-anonymous-methods/</link>
      <pubDate>Sat, 16 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-16-anonymous-methods/</guid>
      <description>
        
          &lt;p&gt;Suppose you add a couple of buttons to a panel as shown below. What do you think the message in the MessageBoxes will be?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1() 
	{
		InitializeComponent();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; ++i) 
		{ 
			Button button = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Button(); 
			button.Text = String.Format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0:00}&amp;#34;&lt;/span&gt;, i); 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.flowLayoutPanel1.Controls.Add( button ); 
			button.Click += &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EventHandler(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;(Object sender, EventArgs e) 
			{ 
				MessageBox.Show(String.Format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You clicked button {0:00}&amp;#34;&lt;/span&gt;, i)); 
			}); 
		} 
	} 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case you&amp;rsquo;re wondering why they all have the message &amp;ldquo;You clicked button 10&amp;rdquo; i suggest you read the following articles&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.msdn.com/oldnewthing/archive/2006/08/02/686456.aspx&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.msdn.com/oldnewthing/archive/2006/08/03/687529.aspx&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.msdn.com/oldnewthing/archive/2006/08/04/688527.aspx&#34;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>DataGridView with EditOnEnter as EditMode</title>
      <link>/post/2006-09-16-datagridview-with-editonenter-as-editmode/</link>
      <pubDate>Sat, 16 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-16-datagridview-with-editonenter-as-editmode/</guid>
      <description>
        
          &lt;p&gt;Earlier this week i found that when a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx&#34;&gt;DataGridView&lt;/a&gt; has it&amp;rsquo;s &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridview.editmode.aspx&#34;&gt;EditMode&lt;/a&gt; property set to &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridvieweditmode.aspx&#34;&gt;EditOnEnter&lt;/a&gt; the user cannot select an entire row by clicking on the row header. This prevents the user from being able to delete a row. A couple of websearches later i found a &lt;a href=&#34;http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=98504&#34;&gt;bugreport&lt;/a&gt; but the proposed workarounds didn&amp;rsquo;t work for me 🙁 Here is a workaround that does work for me&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_MouseClick( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, MouseEventArgs e ) 
{
	DataGridView.HitTestInfo hitInfo = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.HitTest(e.X, e.Y);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( hitInfo.Type == DataGridViewHitTestType.RowHeader ) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.EditMode = DataGridViewEditMode.EditOnKeystrokeOrF2;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.EndEdit();
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.EditMode = DataGridViewEditMode.EditOnEnter;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Drag and Drop on a DataGridView</title>
      <link>/post/2006-09-16-drag-and-drop-on-a-datagridview/</link>
      <pubDate>Sat, 16 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-16-drag-and-drop-on-a-datagridview/</guid>
      <description>
        
          &lt;p&gt;Here is a bit of sample code that allows you to drag and drop a cellvalue in a DataGridView (don&amp;rsquo;t forget to set the AllowDrop property of the DataGridView to true). Notice that you need to translate the X and Y properties of the DragEventArgs first (unlike the X and Y properties of the MouseEventArgs)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_MouseDown( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, MouseEventArgs e )
{
	DataGridView.HitTestInfo info = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.HitTest( e.X, e.Y );
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( info.RowIndex != -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; info.ColumnIndex != -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
	{
		Object &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Rows[info.RowIndex].Cells[info.ColumnIndex].Value;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; )
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Rows[info.RowIndex].Cells[info.ColumnIndex].Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.DoDragDrop( &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;, DragDropEffects.Move );
		}
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_DragDrop( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DragEventArgs e )
{
	Point p = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.PointToClient( &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Point( e.X, e.Y ) );
	DataGridView.HitTestInfo info = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.HitTest( p.X, p.Y );
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( info.RowIndex != -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; info.ColumnIndex != -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
	{
		Object &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; = (Object)e.Data.GetData( &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; ) );
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Rows[info.RowIndex].Cells[info.ColumnIndex].Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_DragEnter( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DragEventArgs e )
{
	e.Effect = DragDropEffects.Move;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Inconsistent Drag and Drop API</title>
      <link>/post/2006-09-16-inconsistent-drag-and-drop-api/</link>
      <pubDate>Sat, 16 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-16-inconsistent-drag-and-drop-api/</guid>
      <description>
        
          &lt;p&gt;Every System.Windows.Forms.Control has the following events&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public event DragEventHandler &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.dragdrop.aspx&#34;&gt;DragDrop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;public event DragEventHandler &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.dragenter.aspx&#34;&gt;DragEnter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;public event EventHandler &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.dragleave.aspx&#34;&gt;DragLeave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;public event DragEventHandler &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.control.dragover.aspx&#34;&gt;DragOver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means, when the user drags something away of the control, you can&amp;rsquo;t access the data anymore (unless you cached it somewhere when the DragEnter or DragOver events occured). Here is an extract from Microsoft patterns and practives on &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/ms229011.aspx&#34;&gt;Event Design&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;

        
      </description>
    </item>
    
    <item>
      <title>Adding DataGridViewColumns (lots of them)</title>
      <link>/post/2006-09-14-adding-datagridviewcolumns-lots-of-them/</link>
      <pubDate>Thu, 14 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-14-adding-datagridviewcolumns-lots-of-them/</guid>
      <description>
        
          &lt;p&gt;Last couple of days i&amp;rsquo;ve been trying to add a couple (750+) columns into a DataGridView. Initially i tried the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.ColumnCount = &lt;span style=&#34;color:#ae81ff&#34;&gt;750&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code above results in the following error: &lt;strong&gt;Sum of the columns&#39; FillWeight values cannot exceed 65535.&lt;/strong&gt; Then i tried the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;DataGridViewColumn[] columns = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataGridViewColumn[&lt;span style=&#34;color:#ae81ff&#34;&gt;750&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; columns.Length; ++i ) 
{ 
	DataGridViewColumn column = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataGridViewColumn(); 
	column.CellTemplate = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataGridViewTextBoxCell(); 
	column.FillWeight = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; columns[i] = column; 
} 
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Columns.AddRange( columns );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This results in the following error: &lt;strong&gt;At least one of the DataGridView control&amp;rsquo;s columns has no cell template.&lt;/strong&gt; Thus i tried the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;DataGridViewColumn[] columns = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataGridViewColumn[&lt;span style=&#34;color:#ae81ff&#34;&gt;750&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; columns.Length; ++i ) 
{ 
	DataGridViewColumn column = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataGridViewTextBoxColumn(); 
	column.FillWeight = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; columns[i] = column; 
} 
&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Columns.AddRange( columns ); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code works but the AddRange call took about 15 seconds to complete. With the aid of a collegue and &lt;a href=&#34;http://www.aisto.com/roeder/dotnet/&#34;&gt;Reflector&lt;/a&gt; i set the ColumnHeadersHeightSize to DisableResizing. This reduced the calltime to less than 0.5 seconds 🙂&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Implementing Master/Detail for Custom Objects with DataGridViewComboBoxColumns</title>
      <link>/post/2006-09-10-implementing-masterdetail-for-custom-objects-with-datagridviewcomboboxcolumns/</link>
      <pubDate>Sun, 10 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-10-implementing-masterdetail-for-custom-objects-with-datagridviewcomboboxcolumns/</guid>
      <description>
        
          &lt;p&gt;Imagine you have the following two classes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parent&lt;/span&gt; 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Parent( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name ) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id = id;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name = name;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Id 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.name; }
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt; : Parent 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; parentId;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Child( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; parentId, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name ) : &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;( id, name ) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.parentId = parentId;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ParentId 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.parentId; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the first ComboBoxColumn you display a list of possible Parents. In the second ComboBoxColumn you display Children, but only those that belong to the Chosen Parent. Here is how it goes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Object selectedValue;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1() 
	{
		InitializeComponent();

		&lt;span style=&#34;color:#75715e&#34;&gt;// Add a couple of Parents
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; ++i ) 
		{ 
			Parent parent = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Parent( i, String.Format( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent{0:00}&amp;#34;&lt;/span&gt;, i ) ); 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column1.Items.Add( parent ); 
			&lt;span style=&#34;color:#75715e&#34;&gt;// Add a couple of Children to each parent 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; ++j ) 
			{ 
				Child child = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Child( j, i, String.Format( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child{0:00}&amp;#34;&lt;/span&gt;, i * &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; + j ) ); 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column2.Items.Add( child ); 
			} 
		} 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column1.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;; 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column2.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;; 
	} 
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_CellParsing( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewCellParsingEventArgs e ) 
	{ 
		e.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.selectedValue; 
		e.ParsingApplied = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; 
	} 
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_EditingControlShowing( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewEditingControlShowingEventArgs e ) 
	{ 
		ComboBox cb = e.Control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ComboBox; 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( cb != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; ) 
		{ 
			&lt;span style=&#34;color:#75715e&#34;&gt;// remove all the children that do not belong to the choosen parent 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; currentColumnIndex = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.CurrentCell.ColumnIndex; 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( currentColumnIndex == &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) 
			{ 
				cb.Items.Clear(); 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; currentRowIndex = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.CurrentCell.RowIndex; 
				Object currentCellValue = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Rows[currentRowIndex].Cells[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].Value; 
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( currentCellValue != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; ) 
				{ 
					&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; parentId = ( (Parent)currentCellValue ).Id; 
					&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ( Child child &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column2.Items ) 
					{ 
						&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( child.ParentId == parentId ) 
						{ 
							cb.Items.Add( child ); 
						} 
					} 
				} 
			} 
			cb.SelectedIndexChanged -= cb_SelectedIndexChanged; 
			cb.SelectedIndexChanged += cb_SelectedIndexChanged; 
		} 
		
		&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; cb_SelectedIndexChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e) 
		{ 
			ComboBox comboBox = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ComboBox; 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.selectedValue = comboBox.SelectedItem; 
		} 
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Using DataGridViewComboBoxColumn with Custom Objects</title>
      <link>/post/2006-09-10-using-datagridviewcomboboxcolumn-with-custom-objects/</link>
      <pubDate>Sun, 10 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-10-using-datagridviewcomboboxcolumn-with-custom-objects/</guid>
      <description>
        
          &lt;p&gt;Earlier today i was playing with the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx&#34;&gt;DataGridView&lt;/a&gt; control. I wanted to have a couple of &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/xwx934x7.aspx&#34;&gt;DataGridViewComboBoxColumn&lt;/a&gt;s in order to limit the available input options for the user. The documentation clearly mentions the following&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is sample of a custom object&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Slot&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; DateTime dateTime;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Slot( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id, DateTime dateTime ) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id = id;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTime = dateTime;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Id {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.id; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DateTime DateTime {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dateTime; }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here is the workaround for a one to one mapping&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Form1&lt;/span&gt; : Form 
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// here we&amp;#39;ll store the value the user selected in one of the comboboxcolumns
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Object selectedValue;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Form1() 
	{
		InitializeComponent();
		selectedValues = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Object[&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridView1.Columns.Count];

		&lt;span style=&#34;color:#75715e&#34;&gt;// create a couple of slots an add them to the comboboxcolumns
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; ++i ) 
		{ 
			Slot slot = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Slot( i, DateTime.Now.AddDays( i ) ); 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column1.Items.Add( slot ); 
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column2.Items.Add( slot ); 
		} 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column1.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DateTime&amp;#34;&lt;/span&gt;; 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.Column2.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;; 
	} 
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_CellParsing( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewCellParsingEventArgs e ) 
	{ 
		&lt;span style=&#34;color:#75715e&#34;&gt;// lookup the selected value 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		e.Value = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.selectedValue; 
		e.ParsingApplied = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; 
	} 
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dataGridView1_EditingControlShowing( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, DataGridViewEditingControlShowingEventArgs e ) 
	{ 
		ComboBox cb = e.Control &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ComboBox; 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( cb != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; ) 
		{ 
			cb.SelectedIndexChanged -= cb_SelectedIndexChanged; 
			cb.SelectedIndexChanged += cb_SelectedIndexChanged; 
		} 
	} 
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; cb_SelectedIndexChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e) 
	{ 
		ComboBox comboBox = sender &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ComboBox; 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.selectedValue = comboBox.SelectedItem; 
	} 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Playing with VMWare Server</title>
      <link>/post/2006-09-09-playing-with-vmware-server/</link>
      <pubDate>Sat, 09 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-09-playing-with-vmware-server/</guid>
      <description>
        
          &lt;p&gt;Earlier today i decided to add an image to my VMWare Server. The creation of the image went smooth but at the end of the process i recieved the following error: &lt;strong&gt;Unable to add virtual machine &amp;lsquo;E:\&amp;hellip;..&amp;rsquo; to the inventory: Virtual machine is already in the inventory&amp;quot;.&lt;/strong&gt; When i tried to open the machine via File &amp;gt; Open i recieved the error again. Here is a workaround for this problem: Choose &amp;lsquo;View&amp;rsquo; in the menubar and click on Inventory F9. At the left of the screen you&amp;rsquo;ll see a list of machines that are in the Inventory. If you delete the entries (right click on the machines in the list and choose delete) you&amp;rsquo;ll be able to Open your newly created machine 🙂&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Generate a menu with month names</title>
      <link>/post/2006-09-03-generate-a-menu-with-month-names/</link>
      <pubDate>Sun, 03 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-03-generate-a-menu-with-month-names/</guid>
      <description>
        
          &lt;p&gt;I still see people building their calendar control or month (or day) picker with a hardcoded array of month (or day) names. With the use of &lt;a href=&#34;http://www.php.net/strftime&#34;&gt;strftime&lt;/a&gt; you can easily build a &lt;a href=&#34;http://www.php.net/setlocale&#34;&gt;locale aware&lt;/a&gt; version. Here is an example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SelectMonths&lt;/span&gt;($name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;selectMonths&amp;#39;&lt;/span&gt;, $id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;selectMonths&amp;#39;&lt;/span&gt;) {
 $current_month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;date&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;);

 &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;select name=&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34; id=&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $id &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;gt;&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ($i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; $i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;$i) { &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;option value=&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $i &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; $current\_month) { &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; selected&amp;#39;&lt;/span&gt;; } $month\_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strftime&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%B&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mktime&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, $i, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2006&lt;/span&gt;)); &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $month_name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;/option&amp;gt;&amp;#39;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;/select&amp;gt;&amp;#39;&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now you can easily generate a localized menu&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SelectMonths.php&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;SelectMonths&lt;/span&gt;();

&lt;span style=&#34;color:#75715e&#34;&gt;// Tested on a Windows host - Read the http://be.php.net/setlocale
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setlocale&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;LC_TIME&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dutch&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;SelectMonths&lt;/span&gt;();
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>List the month names</title>
      <link>/post/2006-09-03-list-the-month-names/</link>
      <pubDate>Sun, 03 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-03-list-the-month-names/</guid>
      <description>
        
          &lt;p&gt;As i wrote in &lt;a href=&#34;http://www.timvw.be/generate-a-menu-with-month-names/&#34;&gt;Generate a menu with month names&lt;/a&gt; it&amp;rsquo;s silly to hardcode month names. Here&amp;rsquo;s a C# sample using localization/globalization&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Globalization;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Threading;

&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; ConsoleApplication1 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Program&lt;/span&gt; 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ListMonths() 
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;; ++i ) 
			{ 
				DateTime dateTime = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime( DateTime.Now.Year, i, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ); 
				Console.WriteLine( dateTime.ToString( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MMMM&amp;#34;&lt;/span&gt; ) ); 
			} 
			Console.WriteLine(); 
		} 
		
		&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main( &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args ) 
		{ 
			Thread.CurrentThread.CurrentCulture = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CultureInfo( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en-US&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; );
			ListMonths(); 
			Thread.CurrentThread.CurrentCulture = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CultureInfo( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nl-BE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; ); 
			ListMonths(); 
			Console.Write( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine ); 
			Console.ReadKey(); 
		} 
	} 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Selecting custom Objects from a ComboBox</title>
      <link>/post/2006-09-03-selecting-custom-objects-from-a-combobox/</link>
      <pubDate>Sun, 03 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-03-selecting-custom-objects-from-a-combobox/</guid>
      <description>
        
          &lt;p&gt;Earlier this week someone asked me how he could select custom objects from a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.combobox.aspx&#34;&gt;ComboBox&lt;/a&gt;. Here is the code he used&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; FillComboBoxPersons(List&amp;lt;person&amp;gt; persons) 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.Items.Clear();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.Items.Add( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-- Select Person -------------&amp;#34;&lt;/span&gt; );
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ( Person person &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; persons ) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.Items.Add( person.Name );
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.SelectedIndex = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to get the selected item he then used the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.combobox.selectedindex.aspx&#34;&gt;SelectedIndex&lt;/a&gt; property to lookup the Person in a cache of the persons collection.&lt;/p&gt;
&lt;p&gt;Here is an approach that doesn&amp;rsquo;t require you to have a cache of the collection (Since the persons are already stored in the items)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; FillComboBoxPersons(List&amp;lt;person&amp;gt; persons) 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.Items.Clear();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.Items.Add( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-- Select Person -------------&amp;#34;&lt;/span&gt; );
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.DisplayMember = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ( Person person &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; persons ) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.Items.Add( person );
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.comboBoxPersons.SelectedIndex = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can easily access the selected item through the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.listcontrol.selectedvalue.aspx&#34;&gt;SelectedValue&lt;/a&gt; property.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Selecting custom Objects from a DataGridView</title>
      <link>/post/2006-09-03-selecting-custom-objects-from-a-datagridview/</link>
      <pubDate>Sun, 03 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-03-selecting-custom-objects-from-a-datagridview/</guid>
      <description>
        
          &lt;p&gt;Here is a way that allows the user to select a row (custom object properties are used as column values) from a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx&#34;&gt;DataGridView&lt;/a&gt; assuming that the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.datagridview.selectionmode.aspx&#34;&gt;SelectionMode&lt;/a&gt; property is set FullRowSelect&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; FillDataGridViewPersons( List&amp;lt;person&amp;gt; persons ) 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.Rows.Clear();

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; persons.Count; ++i ) 
	{ 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.Rows.Add(); 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.Rows[i].Tag = persons[i]; 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.Rows[i].SetValues( &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[] { persons[i].Id, persons[i].Name } ); 
	} 
} 

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; buttonDoSomething_Click( &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e ) 
{ 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.SelectedRows.Count == &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) 
	{ 
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; selectedRowIndex = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.SelectedCells[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].RowIndex; 
		Person selectedPerson = (Person)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.dataGridViewPersons.Rows[selectedRowIndex].Tag; 
		MessageBox.Show( String.Format( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You selected the person with 	} 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Automating the configuration of Internet Options / Lan Settings</title>
      <link>/post/2006-09-02-automating-the-configuration-of-internet-options-and-lan-settings/</link>
      <pubDate>Sat, 02 Sep 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-09-02-automating-the-configuration-of-internet-options-and-lan-settings/</guid>
      <description>
        
          &lt;p&gt;I got tired of manually changing my Internet Options / Lan Settings. It was really time to say goodbye to the dialog below&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/lansettingsdialog.jpg&#34; alt=&#34;screenshot of lan settings dialog&#34;&gt;&lt;/p&gt;
&lt;p&gt;With the help of &lt;a href=&#34;http://support.microsoft.com/kb/310516/&#34;&gt;How to add, modify, or delete registry subkeys and values by using a registration entries (.reg) file&lt;/a&gt; i wrote two little files that add/remove the automatic configuration location.The work.reg file looks like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-reg&#34; data-lang=&#34;reg&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;REGEDIT4&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;HKEY_CURRENT_USER&lt;span style=&#34;color:#66d9ef&#34;&gt;\Software\Microsoft\Windows\CurrentVersion\Internet Settings]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#34;AutoConfigURL&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.1.99/&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the home.reg file looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-reg&#34; data-lang=&#34;reg&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;REGEDIT4&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[&lt;/span&gt;HKEY_CURRENT_USER&lt;span style=&#34;color:#66d9ef&#34;&gt;\Software\Microsoft\Windows\CurrentVersion\Internet Settings]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#34;AutoConfigURL&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Dynamic CSS with PHP</title>
      <link>/post/2006-08-27-dynamic-css-with-php/</link>
      <pubDate>Sun, 27 Aug 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-08-27-dynamic-css-with-php/</guid>
      <description>
        
          &lt;p&gt;Both html and css are simply text. Thus you should be able to generate css as easily as html with php. Now if you add a reference to the css.php file in your html (eg: &lt;!-- raw HTML omitted --&gt;) you&amp;rsquo;ll probably experience that your browser ignores the file. How is this possible? Here is an example of a simple css.php file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt; {
&lt;span style=&#34;color:#a6e22e&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is a simulation of what your browser recieves when it requests the file:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Where did that content-type header come from? Well, php outputs a default content-type header (text/html) when you don&amp;rsquo;t set value explicitely. This means that your browser will try to interpret the file as html instead of css. Although it may seem weird, this behaviour is explicitely defined in &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7.2.1&#34;&gt;RFC 2616&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So the solution is pretty simple: explicitely generate content-type header. Here is an example for css: (You&amp;rsquo;re smart enough to figure it out for csv, m3u, &amp;hellip;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-type: text/css&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;body {
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;background-color: &amp;lt;?php echo &amp;#39;white&amp;#39;; ?&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>tweaking Oracle SQL Developer</title>
      <link>/post/2006-08-27-tweaking-oracle-sql-developer/</link>
      <pubDate>Sun, 27 Aug 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-08-27-tweaking-oracle-sql-developer/</guid>
      <description>
        
          &lt;p&gt;A couple of days ago i discovered &lt;a href=&#34;http://www.oracle.com/technology/products/database/sql_developer/index.html&#34;&gt;Oracle SQL Developer&lt;/a&gt;, a new and free graphical tool for database development. At first i was impressed by all it&amp;rsquo;s features but when i tried to modify a couple of existing stored procedures the application freezed. &lt;a href=&#34;http://forums.oracle.com/forums/profile.jspa?userID=481264&#34;&gt;EricH&lt;/a&gt; directed me to the &lt;a href=&#34;http://www.oracle.com/technology/products/database/sql_developer/files/faqs.html#q3&#34;&gt;FAQ: Can I suppress Code Insight (and why would I want to)?&lt;/a&gt;. Now that i have added the &amp;lsquo;AddVMOption -J-Dsdev.insight=false&amp;rsquo; to my sqldeveloper.conf the application runs smooth&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/images/oraclesqldeveloper-large.jpg&#34;&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/oraclesqldeveloper-small.jpg&#34; alt=&#34;screenshot of oracle sqldeveloper&#34;&gt;&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Unable to enlist in a distributed transaction</title>
      <link>/post/2006-08-26-unable-to-enlist-in-a-distributed-transaction/</link>
      <pubDate>Sat, 26 Aug 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-08-26-unable-to-enlist-in-a-distributed-transaction/</guid>
      <description>
        
          &lt;p&gt;Earlier today we were confronted with the following &lt;a href=&#34;http://msdn2.microsoft.com/en-US/library/system.data.oracleclient.oracleexception.aspx&#34;&gt;OracleException&lt;/a&gt;: &lt;strong&gt;Unable to enlist in a distributed transaction&lt;/strong&gt;. Our code (and accompanying tests) had been running fine for the last two weeks thus we expected there was a problem with the database. A member of the DBA team assurred us there was nothing wrong with the database. Finally we discovered that we had created a circular reference and thus the program ended up in an endless loop (well untill the database decided it had been enough anyway :p). Here is a simplified version of the problem&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DoA() 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (TransactionScope scope = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TransactionScope()) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (OracleConnection con = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OracleConnection(connectionString)) 
		{
			con.Open();
			DoB();
			scope.Complete();
		}
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DoB() 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (TransactionScope scope = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TransactionScope()) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (OracleConnection con = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OracleConnection(connectionString)) 
		{
			con.Open();
			DoA();
			scope.Complete();
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Without the use of &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.transactions.transactionscope.aspx&#34;&gt;TransactionScope&lt;/a&gt; this results in a &lt;strong&gt;Connection request timed out&lt;/strong&gt; exception.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Experimenting with Oracle and PL/SQL</title>
      <link>/post/2006-08-21-experimenting-with-oracle-and-plsql/</link>
      <pubDate>Mon, 21 Aug 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-08-21-experimenting-with-oracle-and-plsql/</guid>
      <description>
        
          &lt;p&gt;As i already wrote, last couple of days i&amp;rsquo;ve been experimenting with PL/SQL. At work we use &lt;a href=&#34;http://www.toadsoft.com/toad_oracle.htm&#34;&gt;Toad for Oracle&lt;/a&gt; but since &lt;a href=&#34;http://www.toadsoft.com/&#34;&gt;TOADSoft&lt;/a&gt; only offers a limited freeware version i decided to write my code with &lt;a href=&#34;http://www.vim.org&#34;&gt;GVim&lt;/a&gt; and use &lt;a href=&#34;http://orafaq.com/faqplus.htm#WHAT&#34;&gt;SQL*Plus&lt;/a&gt; at home. Here are a couple of lines i added to my login.sql file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;DEFINE _EDITOR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gvim -c &amp;#34;set filetype=sql&amp;#34;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; SERVEROUTPUT &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; LINESIZE &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; AUTOCOMMIT &lt;span style=&#34;color:#66d9ef&#34;&gt;OFF&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SESSION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; NLS_DATE_FORMAT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In a stored procedure i created and filled an instance of NUMBER_TABLE (CREATE TYPE NUMBER_TABLE AS TABLE OF NUMBER) and my stored procedure tried to select all the rows in that table (SELECT * FROM V_NUMBER_TABLE). Apparently the engine didn&amp;rsquo;t know this type @runtime despite the fact that i declared it in my stored procedure (V_NUMBER TABLE NUMBER_TABLE := NUMBER_TABLE();) and the engine compiled the package without errors. I got round that problem as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;(V_NUMBER_TABLE &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; NUMBER_TABLE));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Installing MSDN Library May 2006</title>
      <link>/post/2006-08-14-installing-msdn-library-may-2006/</link>
      <pubDate>Mon, 14 Aug 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-08-14-installing-msdn-library-may-2006/</guid>
      <description>
        
          &lt;p&gt;Today i downloaded the freely available &lt;a href=&#34;http://www.microsoft.com/downloads/details.aspx?FamilyId=373930CB-A3D7-4EA5-B421-DD6818DC7C41&amp;amp;displaylang=en&#34;&gt;MSDN Library (May 2006 Edition)&lt;/a&gt;. I appended .iso to the filenames and mounted the first image with &lt;a href=&#34;http://ww2.nero.com/nero6/eng/Nero_ImageDrive_prev.html&#34;&gt;Nero ImageDrive&lt;/a&gt;. After a while i got the following error message: &amp;ldquo;Source file not found: _17693_RTL_x86_enu_NET_Framework_SDK_HxS.cab&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/msdn-library-2006-05-error.jpg&#34; alt=&#34;error message with msdn library installer&#34;&gt;&lt;/p&gt;
&lt;p&gt;Apparently this file exists on the second disk (Why doesn&amp;rsquo;t the installer ask me to insert the second disk?). And yes, a little while later the same thing happens again when the third disk is expected&amp;hellip;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Inserting pause to your Console Applications</title>
      <link>/post/2006-08-05-inserting-pause-to-your-console-applications/</link>
      <pubDate>Sat, 05 Aug 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-08-05-inserting-pause-to-your-console-applications/</guid>
      <description>
        
          &lt;p&gt;When i write Console Applications i find myself to write the following two lines quite often&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;Console.Write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0}Press any key to continue...&amp;#34;&lt;/span&gt;, Environment.NewLine);
Console.ReadKey();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you already know i&amp;rsquo;m lazy so i decided to write an &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/ms165392.aspx&#34;&gt;IntelliSense Code Snippet&lt;/a&gt;. When i type &amp;ldquo;pau&amp;rdquo; Intellisense show the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/intellisense-drop-down-list.jpg&#34; alt=&#34;Intellisense drop down list&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next i hit the tab button twice and i get the following effect:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/intellisense-code-snippet.jpg&#34; alt=&#34;Intellisense code snippet&#34;&gt;&lt;/p&gt;
&lt;p&gt;Download &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/pause.txt&#34;&gt;pause.txt&lt;/a&gt; and save it as Pause.snippet in your %My DocumentS\Visual Studio 2005\Code Snippets\Visual C#\My Code Snippets% folder.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve made it even simpler, you can install the snippet by simply running the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/pause.vsi&#34;&gt;pause.vsi&lt;/a&gt; package (Visual Studio Installer).&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>eID with .NET</title>
      <link>/post/2006-07-23-eid-with-net/</link>
      <pubDate>Sun, 23 Jul 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-07-23-eid-with-net/</guid>
      <description>
        
          &lt;p&gt;When i started working (already 3 weeks ago) i recieved a laptop. Friday i discovered that this laptop has a &lt;a href=&#34;http://en.wikipedia.org/wiki/Smartcard&#34;&gt;Smart card&lt;/a&gt; reader and i wanted to experiment with it. I thought it would be nice if i could read the data on my &lt;a href=&#34;http://eid.belgium.be/&#34;&gt;eID&lt;/a&gt;. Apart from &lt;a href=&#34;http://download.microsoft.com/download/4/f/d/4fd49a94-8772-4bd0-88ca-bf46e2d029fc/WHITEPAPERS/Accessing%20the%20eID%20Middleware%20from%20.NET%20(Version%201.0).doc&#34;&gt;Accessing the eID Middleware from .NET (Version 1.0)&lt;/a&gt; i couldn&amp;rsquo;t find much information. I decided to use the document as the basis for my own libeid wrapper. With the Simple (Wrapper API) reading data becomes extremely easy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; eID.Simple;

Reader reader = Reader.GetReader();
pictureBox.Image = reader.GetImage();
labelName.Text = reader.GetName();
labelGivenNames.Text = reader.GetFirstName1() + reader.GetFirstName2() + reader.GetFirstName3();
dateTimePickerBirthdate.Value = reader.GetBirthdate();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As usual, feel free to download the source (&lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/Belgium.zip&#34;&gt;Belgium.zip&lt;/a&gt;) and/or leave any comments&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Windows Multimedia Video Capture</title>
      <link>/post/2006-06-26-windows-multimedia-video-capture/</link>
      <pubDate>Mon, 26 Jun 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-06-26-windows-multimedia-video-capture/</guid>
      <description>
        
          &lt;p&gt;On my computer the &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wia/wia/overviews/startpage.asp&#34;&gt;WIA (Windows Image Acquisition)&lt;/a&gt; API is SLOOOOOW. So i decided to give the &lt;a href=&#34;http://windowssdk.msdn.microsoft.com/en-us/library/ms713477(VS.80).aspx&#34;&gt;Windows Multimedia Video Capture&lt;/a&gt; API a try. I didn&amp;rsquo;t take long to &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconcreatingprototypesinmanagedcode.asp&#34;&gt;create the prototypes in Managed Code&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/library/en-us/cpguide/html/cpconcallingdllfunction.asp&#34;&gt;call the DLL functions&lt;/a&gt;. Everything runs really smooth now&amp;hellip; As always, feel free to download the &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/testavicap32.zip&#34;&gt;testavicap32&lt;/a&gt; sources now!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Windows Image Acquisition</title>
      <link>/post/2006-06-24-windows-image-acquisition/</link>
      <pubDate>Sat, 24 Jun 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-06-24-windows-image-acquisition/</guid>
      <description>
        
          &lt;p&gt;Earlier today i decided to toy around with my webcam. A couple of websearches later i ended up at &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wia/wia/overviews/startpage.asp&#34;&gt;WIA (Windows Image Acquisition)&lt;/a&gt;. I found a couple of articles (eg: &lt;a href=&#34;http://msdn.microsoft.com/coding4fun/someassemblyrequired/lookatme/default.aspx&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://blogs.msdn.com/robburke/archive/2005/09/21/472541.aspx&#34;&gt;here&lt;/a&gt;) that showed how to capture images. I wanted to display the caputered image in a &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/system.windows.forms.picturebox.aspx&#34;&gt;PictureBox&lt;/a&gt;. Unfortunately everybody seems to save the WIA.ImageFile to a file and then load the imagefile into a PictureBox. It&amp;rsquo;s obvious that i don&amp;rsquo;t want to save the image into a file first. Here is my workaround&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Load the ImageFile into a PictureBox
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;pbImage.Image = Image.FromStream(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MemorySteam((&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[]) imgf.FileData.get_BinaryData()));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Experimenting with LINQ Preview (May 2006)</title>
      <link>/post/2006-06-20-experimenting-with-linq-preview-may-2006/</link>
      <pubDate>Tue, 20 Jun 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-06-20-experimenting-with-linq-preview-may-2006/</guid>
      <description>
        
          &lt;p&gt;Today i downloaded and installed &lt;a href=&#34;http://www.microsoft.com/downloads/details.aspx?familyid=1e902c21-340c-4d13-9f04-70eb5e3dceea&amp;amp;displaylang=en&#34;&gt;LINQ Preview (May 2006)&lt;/a&gt;. Well, that was the plan anyway:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/linq-2006-06-error.png&#34; alt=&#34;error with linq preview installer&#34;&gt;&lt;/p&gt;
&lt;p&gt;A couple of minutes later i found &lt;a href=&#34;http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=394174&amp;amp;SiteID=1&#34;&gt;this page&lt;/a&gt; and was able to solve the problem by adding the following users with administrative rights: Power Users, Users and Creator Owner.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>A TableModel for Entity Beans</title>
      <link>/post/2006-06-18-a-tablemodel-for-entity-beans/</link>
      <pubDate>Sun, 18 Jun 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-06-18-a-tablemodel-for-entity-beans/</guid>
      <description>
        
          &lt;p&gt;For my graduation project i needed a component that could display a list of &lt;a href=&#34;http://java.sun.com/j2ee/tutorial/1_3-fcs/doc/EJBConcepts4.html&#34;&gt;Entity Beans&lt;/a&gt;. I found that &lt;a href=&#34;http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTable.html&#34;&gt;JTable&lt;/a&gt; is such a component and with the help of custom &lt;a href=&#34;http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableCellRenderer.html&#34;&gt;TableCellRenderer&lt;/a&gt; and &lt;a href=&#34;http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableCellEditor.html&#34;&gt;TableCellEditor&lt;/a&gt; components i was able to customize the rendering to my needs. In order to get the data into the JTable i implemented a custom &lt;a href=&#34;http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/table/TableModel.html&#34;&gt;TableModel&lt;/a&gt;, namely &lt;a href=&#34;http://www.timvw.be/wp-content/code/java/EntityTableModel.java.txt&#34;&gt;EntityTableModel&lt;/a&gt;. Now i can easily generate a JTable that displays Entity Beans&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// fetch the elements we want to display
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Object&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; elements &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; employeeController
	&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getEntityManager&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createNamedQuery&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;findEmployees&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getResultList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toArray&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// build map with column name, entity attribute pairs
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; colAttrs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedHashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;();&lt;/span&gt;
colAttrs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;First Name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;firstName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
colAttrs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Last Name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lastName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// build collection with editable attributes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Collection&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; editables &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;();&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// initialise the tablemodel
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;TableModel tableModel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EntityTableModel&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elements&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; colAttrs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; editables&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// initialise the table
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;JTable table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; JTable&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tableModel&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>BBCode for Graphics2D</title>
      <link>/post/2006-06-14-bbcode-for-graphics2d/</link>
      <pubDate>Wed, 14 Jun 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-06-14-bbcode-for-graphics2d/</guid>
      <description>
        
          &lt;p&gt;For my graduation project we needed the ability to print a couple of bills etc. Printing lines was pretty simple with the &lt;a href=&#34;http://www.timvw.be/wp-content/code/java/LinesPrinter.java.txt&#34;&gt;LinesPrinter&lt;/a&gt; i blogged about a while ago. We had two choices: either implement a specific &lt;a href=&#34;http://java.sun.com/j2se/1.5.0/docs/api/java/awt/print/Printable.html#print(java.awt.Graphics,%20java.awt.print.PageFormat,%20int)&#34;&gt;print method&lt;/a&gt; for each module or implement a reusable markup system. Obviously we went for the second option and came up with something alike &lt;a href=&#34;http://en.wikipedia.org/wiki/BBCode&#34;&gt;BBCode&lt;/a&gt;. The codes we implemented are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[b]..[/b] for bold&lt;/li&gt;
&lt;li&gt;[i]..[/i] for italic&lt;/li&gt;
&lt;li&gt;[color=x]..[/color] for color x&lt;/li&gt;
&lt;li&gt;[c]..[/c] for centered text&lt;/li&gt;
&lt;li&gt;[r]..[/r] for right aligned text&lt;/li&gt;
&lt;li&gt;[ll=x]..[/ll] for left aligned text starting from the x-th column at the left&lt;/li&gt;
&lt;li&gt;[lr=x]..[/lr] for left aligned text starting from the x-th column at the right&lt;/li&gt;
&lt;li&gt;[rl=x]..[/ll] for right aligned text starting from the x-th column at the left&lt;/li&gt;
&lt;li&gt;[rr=x]..[/ll] for right aligned text starting from the x-th column at the right&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the code is written to work on a &lt;a href=&#34;http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Graphics2D.html&#34;&gt;Graphics2D&lt;/a&gt; device you can also render the formatted text on a jpanel etc instead of a printer device. Here is a screenshot of a generated bill (on a jpanel):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/rpcode.png&#34; alt=&#34;rpcode&#34;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to download, try and improve the &lt;a href=&#34;http://www.timvw.be/wp-content/code/java/rpcode.zip&#34;&gt;rpcode.zip&lt;/a&gt; package.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Couple of screenshots of my graduation project</title>
      <link>/post/2006-06-12-couple-of-screenshots-of-my-graduation-project/</link>
      <pubDate>Mon, 12 Jun 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-06-12-couple-of-screenshots-of-my-graduation-project/</guid>
      <description>
        
          &lt;p&gt;Here are a couple of screenshots of my graduation project i&amp;rsquo;ve been working on last couple of weeks. The GUI is built with Swing, the bussiness rules make extensive use of the Apache BeanUtils and Hibernate Validators packages and with PostgreSQL we have a solid database. Since it takes a while to load the EntityManagerFactory we&amp;rsquo;ve added a simple splashscreen:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/images/grad01.png&#34;&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/gradtn01.png&#34; alt=&#34;splashscreen&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The base screen displays a map with the tables in the restaurant. The color of the tables depends on the state of the visit (eg: just arrived, ordered some items, eating soup, eating dessert, paid the bill). There is also the possiblity to group tables. Offcourse you have the possibility to rearrange the tables and add/remove the maps:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/images/grad02.png&#34;&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/gradtn02.png&#34; alt=&#34;groundplan restaurant&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/images/grad03.png&#34;&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/gradtn03.png&#34; alt=&#34;groundplan terrace&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As soon as the waiter has choosen a visit he can add orders via an easy to use screen. He also has the possibility to add (pre-configured and/or custom) remarks to a given order. Each order is printed on the printer of the division that is responsible for the handling for the given type of menuitems:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/images/grad04.png&#34;&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/gradtn04.png&#34; alt=&#34;order panel&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/images/grad05.png&#34;&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/gradtn05.png&#34; alt=&#34;remarks dialog&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And least but not least, there is a screen that allows the waiter to generate, print and save one or more bills for each visit. If all ordered items have been paid, the visit goes into the PAID state:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/images/grad06.png&#34;&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/gradtn06.png&#34; alt=&#34;billing panel&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Offcourse we&amp;rsquo;ve also written list/detail panels for all the tables this restaurant uses. Here are screenshots of the list and detail panel for the menuitems:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/images/grad07.png&#34;&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/gradtn07.png&#34; alt=&#34;menuitem list&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.timvw.be/wp-content/images/grad08.png&#34;&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/gradtn08.png&#34; alt=&#34;menuitem detail&#34;&gt;&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Printing an array of strings</title>
      <link>/post/2006-05-31-printing-an-array-of-strings/</link>
      <pubDate>Wed, 31 May 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-05-31-printing-an-array-of-strings/</guid>
      <description>
        
          &lt;p&gt;Yesterday i&amp;rsquo;ve been experimenting with &lt;a href=&#34;http://java.sun.com/printing/&#34;&gt;Printing on the Java Platform&lt;/a&gt;. I needed to generate a printout of ordered menuitems on the default printer. It took a while before i found out there is translation needed between the coordinates of the &lt;a href=&#34;http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Graphics.html&#34;&gt;Graphics&lt;/a&gt; device and the &lt;a href=&#34;http://java.sun.com/j2se/1.4.2/docs/api/java/awt/print/PageFormat.html&#34;&gt;PageFormat&lt;/a&gt;. Here is my &lt;a href=&#34;http://www.timvw.be/wp-content/code/java/LinesPrinter.java.txt&#34;&gt;LinesPrinter&lt;/a&gt;. Here is an example of how you can use the class&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;();&lt;/span&gt;

StringBuffer buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;De RegaPan\t&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;DateFormat&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getDateTimeInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color:#f92672&#34;&gt;()));&lt;/span&gt;
lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

DecimalFormat df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DecimalFormat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;##.00&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

Enumeration e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; billModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;elements&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasMoreElements&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	Order o &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Order&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nextElement&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	MenuItem mi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; o&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMenuItem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

	buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mi&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
	buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mi&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPriceIncVat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()));&lt;/span&gt;

	lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t-------&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;getTotal&lt;span style=&#34;color:#f92672&#34;&gt;()));&lt;/span&gt;

LinesPrinter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[])&lt;/span&gt; lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toArray&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Building a chain of responsibility with delegates</title>
      <link>/post/2006-05-30-building-a-chain-of-responsibility-with-delegates/</link>
      <pubDate>Tue, 30 May 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-05-30-building-a-chain-of-responsibility-with-delegates/</guid>
      <description>
        
          &lt;p&gt;Imagine that you have to write a function that verifies if there is a license available for a given clientID. Suppose that there are a couple of possibilities to find an available license. Your code would probably look like the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// This code verifies if the client with the given clientID is licensed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// returns the licenseID or 0 if no license is available
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Int32 IsLicensed(Int32 clientID) 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

	&lt;span style=&#34;color:#75715e&#34;&gt;// verify if there is already a license &amp;#39;assigned&amp;#39; to the client
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	result = IsAssigned(clientID);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (result == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) 
	{
		&lt;span style=&#34;color:#75715e&#34;&gt;// find a dedicated license (license that is bound to the given client)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		result = IsDedicated(clientID);

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (result == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) 
		{
			&lt;span style=&#34;color:#75715e&#34;&gt;// find a nondedicated license (license that can be used by any client)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			result = IsNonDedicated(clientID);
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s obvious that this structures becomes more complex as the number of possible ways to get a license grows. If you look a while at the structure you&amp;rsquo;ll notice a pattern: each function (IsAssigned, IsDedicated, IsNonDedicted) verifies if there is a license availble. If the function didn&amp;rsquo;t find a license the next function is performed. If you translate this to OO you would end up with something similar to the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// this methods tries to find an available license for the given clientID
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// returns the licenseID or 0 if no license was found
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; Int32 FindLicenseMethod(Int32 clientID);

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LicenseFinder&lt;/span&gt; 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; FindLicenseMethod method;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; LicenseFinder next;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; LicenseFinder(FindLicenseMethod, method, LicenseFinder next) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.method = method;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.next = next;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// property for the next licensefinder in the chain
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Next 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; next; }
		&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; { next = val; }
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Int32 GetLicense(Int32 clientID) 
	{
		Int32 result = method(clientID);

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (result == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; Next != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) 
		{
			result = Next.GetLicense(clientID);
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Int32 IsLicensed(Int32 clientID) 
	{
		LicenseFinder f = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LicenseFinder(
		&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FindLicenseMethod(IsAssigned), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LicenseFinder(
		&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FindLicenseMethod(IsDedicated), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LicenseFinder(
		&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FindLicenseMethod(IsNonDedicated), &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;))));

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f.GetLicense(clientID);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Running .NET applications on Debian GNU/Linux with Mono</title>
      <link>/post/2006-04-25-running-net-applications-on-debian-gnulinux-with-mono/</link>
      <pubDate>Tue, 25 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-04-25-running-net-applications-on-debian-gnulinux-with-mono/</guid>
      <description>
        
          &lt;p&gt;Today i noticed &lt;a href=&#34;http://www.linux.com/article.pl?sid=06/04/12/1921225&#34;&gt;Running .Net applications on Linux with Mono&lt;/a&gt; and the author wrote the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I found that on Debian at this stage I got an error: The assembly mscorlib.dll was not found or could not be loaded. It should have been installed in the &amp;lsquo;/usr/lib/mono/2.0/mscorlib.dll&amp;rsquo; directory. I cured that by executing:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;$ cd /usr/lib/mono&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;$ sudo ln -s 1.0 2.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is only one error, and it&amp;rsquo;s in the &lt;a href=&#34;en.wikipedia.org/wiki/PEBKAC&#34;&gt;PEBKAC&lt;/a&gt; category. I can understand that the author couldn&amp;rsquo;t find the TargetFrameworkVersion tag in his project file and generated 2.0 code. What i don&amp;rsquo;t understand is that he didn&amp;rsquo;t notice the &lt;a href=&#34;http://www.mono-project.com/Downloads&#34;&gt;Other Downloads&lt;/a&gt; section and that there are &lt;a href=&#34;http://www.debian.org&#34;&gt;Debian&lt;/a&gt; packages available with support for the 2.0 runtime. Ok, apt-get might complain about the packages and you would have to add a key to your keyring as following before you can install the packages&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;gpg --recv-keys 7127E5ABEEF946C8
gpg --armor --export 7127E5ABEEF946C8 | apt-key add --
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;How hard is that?&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Using .Net assemblies in your WIN32 application</title>
      <link>/post/2006-04-22-using-net-assemblies-in-your-win32-application/</link>
      <pubDate>Sat, 22 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-04-22-using-net-assemblies-in-your-win32-application/</guid>
      <description>
        
          &lt;p&gt;Imagine that you&amp;rsquo;ve got an extensive codebase using WIN32/MFC and don&amp;rsquo;t want to give that up but on the other hand you&amp;rsquo;d like to take advantage of DOTNET classes then here&amp;rsquo;s a simple solution: First we write an Interface and an Implementation with C# as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; IQuoteClient {
	String getQuote();
	Boolean setQuote(String quote);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;QuoteClient&lt;/span&gt; : IQuoteClient {
	&lt;span style=&#34;color:#75715e&#34;&gt;// COM requires a parameterless constructor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; QuoteClient() { ; }
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; getQuote() { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; String.Format&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quote&amp;#34;&lt;/span&gt;;}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; setQuote(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; quote) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go the project Properties and check the &amp;ldquo;Make assembly COM-Visible&amp;rdquo; box which you find in the Application tab, Assembly Information. Then you go to the Build tab and check &amp;ldquo;Register for COM interop&amp;rdquo; box and at the Signing tab you check the &amp;ldquo;Sign the assembly&amp;rdquo; box and assign a key. Build the project.&lt;/p&gt;
&lt;p&gt;Now we have to extract a typelibrary, register the typelibrary and install it in the global assembly cache. Open a Visual Studio 2005 Command Prompt and go to your project\bin\Debug directory. Type the following commands&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tlbexp QuoteClient.dll
regasm QuoteClient.dll /tlb:QuoteClient.tlb
gacutil /i QuoteClient.dll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can import the classes in this assembly from your WIN32 application as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#import &amp;#34;C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\mscorlib.tlb&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#import &amp;#34;D:\projects\Test\QuoteClient\bin\Debug\ClientLibrary.tlb&amp;#34; no_namespace named_guids
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And you can use them just like any other COM component&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;CoInitialize(NULL);

IQuoteClient &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;qc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
HRESULT hr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CoCreateInstance(
	CLSID_QuoteClient,
	NULL,
	CLSCTX_INPROC_SERVER,
	IID_IQuoteClient,
	&lt;span style=&#34;color:#66d9ef&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;qc)
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (SUCCEEDED(hr)) {
	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quote: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; qc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;getQuote() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; qc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Release();
	qc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
}

CoUninitialize();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Simple serialization and deserialization of public class members</title>
      <link>/post/2006-04-21-simple-serialization-and-deserialization-of-public-class-members/</link>
      <pubDate>Fri, 21 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-04-21-simple-serialization-and-deserialization-of-public-class-members/</guid>
      <description>
        
          &lt;p&gt;Here is a simple generic class that allows you to serialize classes (well, their public members) into XML and deserialize the XML to objects again. Make sure the class (or struct) has a parameterless constructor and that all the members that you want to serialize are public. Here is the code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SimpleSerializer&lt;/span&gt;&amp;lt;t&amp;gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String Serialize(T o)
	{
		using(MemoryStream m = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MemoryStream())
		{
			XmlSerializer s = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; XmlSerializer(o.GetType());
			s.Serialize(m, o);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Encoding.UTF8.GetString(m.ToArray());
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; T Deserialize(String xml)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (MemoryStream m = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MemoryStream(Encoding.UTF8.GetBytes(xml)))
		{
			XmlSerializer s = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; XmlSerializer(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T));
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (T)s.Deserialize(m);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is a simple example of a class that will be serialized&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String firstname;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String lastname;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person(String firstname, String lastname) 
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.firstname = firstname;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lastname = lastname;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And finally, a simple console application that demonstrates how it works:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Program&lt;/span&gt; 
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
	{
		Person p1 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tim&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Van Wassenhove&amp;#34;&lt;/span&gt;);
		SimpleSerializer&amp;lt;person&amp;gt; ss = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SimpleSerializer&amp;lt;person&amp;gt;();

		String xml = ss.Serialize(p1);
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;serialized:\n&amp;#34;&lt;/span&gt; + xml);

		Person p2 = ss.Deserialize(xml);
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unserialized name: &amp;#34;&lt;/span&gt; + p2.firstname);

		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Press any key to continue...&amp;#34;&lt;/span&gt;);
		Console.ReadKey();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Building apache-win32 with Visual Studio 2005</title>
      <link>/post/2006-04-15-building-apache-win32-with-visual-studio-2005/</link>
      <pubDate>Sat, 15 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-04-15-building-apache-win32-with-visual-studio-2005/</guid>
      <description>
        
          &lt;p&gt;Today i decided to build apache-win32. Here&amp;rsquo;s how i did it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download Apache &lt;a href=&#34;http://apache.be.proserve.nl/httpd/httpd-2.2.0-win32-src-rev2.zip&#34;&gt;httpd-2.2.0-win32-src-rev2.zip&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Unzip and read README.TXT, INSTALL.TXT and docs/manual/platform/win_compiling.html.en&lt;/li&gt;
&lt;li&gt;Save &lt;a href=&#34;http://cm.bell-labs.com/cm/cs/who/bwk/awk95.exe&#34;&gt;awk95.exe&lt;/a&gt; as awk.exe in a directory that&amp;rsquo;s in your %PATH%.&lt;/li&gt;
&lt;li&gt;Open Apache.dsw with VS2005 and choose &amp;ldquo;Yes To All&amp;rdquo; to convert the project.&lt;/li&gt;
&lt;li&gt;Uncheck abs, mod_deflate and mod_ssl in the the configuration form via Build -&amp;gt; Configuration Manager.&lt;/li&gt;
&lt;li&gt;Choose InstallBin, click right and Set as StartUp Project.&lt;/li&gt;
&lt;li&gt;Open InstallBin/Makefile.win and remove the lines 129, 130, 131, 133, 134, 135 and 136.&lt;/li&gt;
&lt;li&gt;Start debugging (F5). Stop debugging and end the httpd.exe process via your Task Manager.&lt;/li&gt;
&lt;li&gt;Download and extract &lt;a href=&#34;http://www.zlib.net/zlib-1.2.3.tar.bz2&#34;&gt;zlib-1.2.3.tar.bz2&lt;/a&gt; into srclib/zlib.&lt;/li&gt;
&lt;li&gt;Prepend &amp;ldquo;dword ptr&amp;rdquo; to the second argument of the movd instructions on lines647, 649, 663 and 720 in srclib/zlib/contrib/masmx86/inffas32.asm&lt;/li&gt;
&lt;li&gt;Open srclib/zlib/projects/visualc6/zlib.dsp, choose the zlib project in the solution explorer. Choose &amp;ldquo;LIB ASM Release&amp;rdquo; in the configuration explorer and build zlib.&lt;/li&gt;
&lt;li&gt;Copy srclib/zlib/projects/visualc6/Win32_LIB_ASM_Release/zlib.lib to srclib/zlib.&lt;/li&gt;
&lt;li&gt;Check the mod_deflate in the configuration form via Build -&amp;gt; Configuration Manager.&lt;/li&gt;
&lt;li&gt;Choose the mod_deflate project in the solution explorer and build it.&lt;/li&gt;
&lt;li&gt;The original &lt;a href=&#34;http://www.openssl.org/source/openssl-0.9.8a.tar.gz&#34;&gt;openssl-0.9.8a.tar.gz&lt;/a&gt; doesn&amp;rsquo;t compile with Visual Studio 2005 but someone has already made a &lt;a href=&#34;http://bbdev.fluffy.co.uk/svn/box/chris/win32/support/openssl-0.9.8a-win32fix.patch&#34;&gt;patch&lt;/a&gt;. Download &lt;a href=&#34;http://bbdev.fluffy.co.uk/svn/box/chris/win32/support/openssl-0.9.8a-vc2005.zip&#34;&gt;openssl-0.9.8a-vc2005.zip&lt;/a&gt; and extract it into srclib/openssl.&lt;/li&gt;
&lt;li&gt;Open a Visual Studio 2005 Command Prompt and cd to the openssl directory and run: &amp;ldquo;perl Configure VC-WIN32&amp;rdquo; (don&amp;rsquo;t close this prompt yet).&lt;/li&gt;
&lt;li&gt;Insert before line 61 in srclib/openssl/ms/do_masm.bat the following line: &amp;ldquo;perl util\mk1mf.pl debug dll VC-WIN32 &amp;gt; ms\ntdll-dbg.mak&amp;rdquo;. Now run: &amp;ldquo;ms\do_masm&amp;rdquo; and &amp;ldquo;nmake -f ms\ntdll-dbg.mak&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Check the abs and mod_ssl project in the configuration from via Build -&amp;gt; Configuration Manager.&lt;/li&gt;
&lt;li&gt;Build the two projects.&lt;/li&gt;
&lt;li&gt;Done!&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Select best 3 laptimes for each player</title>
      <link>/post/2006-04-14-select-best-3-laptimes-for-each-player/</link>
      <pubDate>Fri, 14 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-04-14-select-best-3-laptimes-for-each-player/</guid>
      <description>
        
          &lt;p&gt;Imagine that you have a schema where you store all the times a player needed to complete a parcours. A possible schema could be (&lt;a href=&#34;http://www.postgresql.org&#34;&gt;postgresql&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; laptimes (
lap_id SERIAL &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
player_id INT &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
laptime INT &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
&lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt; (lap_id)
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;450&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;350&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;327&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;327&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;249&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;489&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;158&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;158&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;190&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; laptimes (player_id, laptime) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now imagine that you want to display the best 3 results for each player. Here&amp;rsquo;s how&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; laptimes &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; l1
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; lap_id &lt;span style=&#34;color:#66d9ef&#34;&gt;IN&lt;/span&gt; (
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; lap_id
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; laptimes &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; l2
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; l1.player&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l2.player&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_id
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; laptime &lt;span style=&#34;color:#66d9ef&#34;&gt;ASC&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
)
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; player_id &lt;span style=&#34;color:#66d9ef&#34;&gt;ASC&lt;/span&gt;, laptime &lt;span style=&#34;color:#66d9ef&#34;&gt;ASC&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Using a function with parameters as parameter</title>
      <link>/post/2006-04-04-using-a-function-with-parameters-as-parameter/</link>
      <pubDate>Tue, 04 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-04-04-using-a-function-with-parameters-as-parameter/</guid>
      <description>
        
          &lt;p&gt;Imagine that you have a function that expects a reference to a function. Here is an example of such a function&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;) { &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;(); }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now imagine that the function that you want to pass to bar accepts a parameter. Here is an example of such a function&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) { &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;); }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the help of a closure this is no problem&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;); });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;PS: &lt;a href=&#34;http://forums.devnetwork.net/viewtopic.php?t=46561&#34;&gt;Kudos&lt;/a&gt; go to &lt;a href=&#34;http://forums.devnetwork.net/profile.php?mode=viewprofile&amp;amp;u=7815&#34;&gt;Weirdan&lt;/a&gt; for providing the solution to this problem.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>JSpace</title>
      <link>/post/2006-04-03-jspace/</link>
      <pubDate>Mon, 03 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-04-03-jspace/</guid>
      <description>
        
          &lt;p&gt;I wrote a simple shoot-em-up game: &lt;a href=&#34;http://www.timvw.be/wp-content/code/java/JSpace.zip&#34;&gt;JSpace.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Allow a form to be posted only once</title>
      <link>/post/2006-04-02-allow-a-form-to-be-posted-only-once/</link>
      <pubDate>Sun, 02 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-04-02-allow-a-form-to-be-posted-only-once/</guid>
      <description>
        
          &lt;p&gt;People can fill in a form and submit it. Then they can hit their back button, and choose to submit it again. Usually the second time this form is being posted, the values in that form aren&amp;rsquo;t valid anymore and thus corrupt the database.&lt;/p&gt;
&lt;p&gt;Most developpers i know try to work around this problem by using the header function or the html meta tags to set the expiration date. However, this solution does not only limit the usability of a site, it simply does not work for visitors that have a browser that ignores the expiration date.&lt;/p&gt;
&lt;p&gt;My solution for this problem is quite easy. For each entity in the database that can be updated by a form, we should add an attribute lastupdate. Now every time we build a form that contains data of that entity, we should also add an input of type hidden with the value of that lastupdate attribute. If the value of the lastupdate attribute in the database is more recent than the value of the posted lastupdate in the recieving script, then the posted values are invalid and this script should tell the user about this error. Offcourse, every time such an entity is updated, the lastupdate attribute of this entity should be updated too.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Using cmd.exe</title>
      <link>/post/2006-04-01-using-cmdexe/</link>
      <pubDate>Sat, 01 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-04-01-using-cmdexe/</guid>
      <description>
        
          &lt;p&gt;Earlier someone asked me how he could use &lt;a href=&#34;http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx?mfr=true&#34;&gt;windows cmd.exe&lt;/a&gt; with PHP. People run into trouble as soon as there are quotes needed because there are special characters (&amp;gt;/&amp;amp;()[]{}^=;!&#39;+,`~ and &lt;!-- raw HTML omitted --&gt;) in the command. I do it like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
$result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`&amp;#34;&amp;#34;c:\\my path\\prog.exe&amp;#34; &amp;#34;filename&amp;#34;&amp;#34;`&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case you have to do it often you might want to wrap it into a little function like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmd&lt;/span&gt;($command, $arguments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
{
        $commandline &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;func_get_args&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; $word) {
                $commandline &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $word &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34; &amp;#39;&lt;/span&gt;;
        }
        $commandline &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rtrim&lt;/span&gt;($commandline, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;);
        $commandline &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $commandline &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`$commandline`&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// run blah.exe
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cmd&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blah.exe&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// run c:\my path\blah.exe with the arguments &amp;#34;foo&amp;#34; and &amp;#34;bar bar&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cmd&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c:\\my path\\blah.exe&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar bar&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Silly bug in Visual Studio 2005 editor</title>
      <link>/post/2006-03-29-silly-bug-in-visual-studio-2005-editor/</link>
      <pubDate>Wed, 29 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-03-29-silly-bug-in-visual-studio-2005-editor/</guid>
      <description>
        
          &lt;p&gt;If you try to compile the code below you will see that the i in the second loop is not defined in my main function. Position your mouse over the i, click right and choose &amp;ldquo;Go To Definition&amp;rdquo; in the context menu. Why does the cursor move to the i in the struct? Btw, if you remove the first for loop this doesn&amp;rsquo;t happen.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdafx.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
} BLAH;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_tmain&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, _TCHAR&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; argv[]) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) { ; } 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) { ; } 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>More about marshalling</title>
      <link>/post/2006-03-28-more-about-marshalling/</link>
      <pubDate>Tue, 28 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-03-28-more-about-marshalling/</guid>
      <description>
        
          &lt;p&gt;Last month i&amp;rsquo;ve started programming with the &lt;a href=&#34;http://msdn.microsoft.com/netframework/&#34;&gt;.NET Framework&lt;/a&gt; using Visual Basic, C++.NET and C# on a daily basis. The first thing i noticed is that some useful functions that were available in kernel32.dll, user32.dll, etc. have been removed from the &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/ms306608.aspx&#34;&gt;API&lt;/a&gt;. At &lt;a href=&#34;http://www.pinvoke.net&#34;&gt;pinvoke.net&lt;/a&gt; you find a summary of the functions in these &lt;a href=&#34;http://en.wikipedia.org/wiki/Dynamic-link_library&#34;&gt;DLL&lt;/a&gt;s and the PInvoke signatures.The most common approach is to build classes for the DLLs as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; InterOp {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User32&lt;/span&gt; {
&lt;span style=&#34;color:#a6e22e&#34;&gt;		[DllImport(&amp;#34;user32.dll&amp;#34;)]&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; IntPtr GetDesktopWindow();
&lt;span style=&#34;color:#a6e22e&#34;&gt;		[DllImport(&amp;#34;user32.dll&amp;#34;)]&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; IntPtr GetWindowDC(IntPtr hWnd);
&lt;span style=&#34;color:#a6e22e&#34;&gt;		[DllImport(&amp;#34;user32.dll&amp;#34;)]&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; IntPtr ReleaseDC(IntPtr hWnd, IntPtr hDC);
&lt;span style=&#34;color:#a6e22e&#34;&gt;		[DllImport(&amp;#34;user32.dll&amp;#34;)]&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; IntPtr GetWindowRect(IntPtr hWnd, RECT rect);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GDI32&lt;/span&gt; {
&lt;span style=&#34;color:#a6e22e&#34;&gt;		[DllImport(&amp;#34;gdi32.dll&amp;#34;)]&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; DeleteDC(IntPtr hDC);
&lt;span style=&#34;color:#a6e22e&#34;&gt;		[DllImport(&amp;#34;gdi32.dll&amp;#34;)]&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; DeleteObject(IntPtr hObject);
&lt;span style=&#34;color:#a6e22e&#34;&gt;		[DllImport(&amp;#34;gdi32.dll&amp;#34;)]&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; IntPtr SelectObject(IntPtr hDC, IntPtr hObject);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Adding support for localization to a WordPress plugin</title>
      <link>/post/2006-03-19-adding-support-for-localization-to-a-wordpress-plugin/</link>
      <pubDate>Sun, 19 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-03-19-adding-support-for-localization-to-a-wordpress-plugin/</guid>
      <description>
        
          &lt;p&gt;WordPress uses &lt;a href=&#34;http://www.gnu.org/software/gettext/&#34;&gt;GNU gettext&lt;/a&gt;, as explained in &lt;a href=&#34;http://codex.wordpress.org/Localizing_WordPress&#34;&gt;Translating WordPress&lt;/a&gt; and &lt;a href=&#34;http://codex.wordpress.org/Writing_a_Plugin&#34;&gt;Writing a Plugin&lt;/a&gt;, for &lt;a href=&#34;http://en.wikipedia.org/wiki/Software_localization&#34;&gt;localization&lt;/a&gt;. I decided that my plugins should support l10n too. Here is how i realised it:&lt;/p&gt;
&lt;p&gt;I started with defining the WPLANG constant in my wp-config.php:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;define&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WPLANG&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;en_EN&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then i changed the beginning of my localized plugin as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Plugin Name: WP-SpamFilter
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Version: 0.4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Plugin URI: http://timvw.madoka.be/?p=533
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Description: Mark the new comment as spam if the sender is in the spammers list.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Author URI: http://timvw.be
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// If this function does not exist it means that the file is accessed directly.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Accessing this file directly is not allowed.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;function_exists&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;load_plugin_textdomain&amp;#39;&lt;/span&gt;)) {
&lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;load_plugin_textdomain&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wp_spamfilter&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wp-content/plugins/wp-spamfilter&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In wp-includes/wp-l10n.php you see that the result of this call is that the locale and the path are used to determine the mo-file to be loaded. Because this function uses ABSPATH it&amp;rsquo;s impossible to use dirname(&lt;strong&gt;FILE&lt;/strong&gt;) as path parameter&lt;/p&gt;
&lt;p&gt;The _e($string, $domain) function echos a localized string and the __($string, $domain) function returns a localized string that you can use in function calls etc&amp;hellip; Below you can see an example of the original version and the updated version with localization support:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## some string
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;some other string&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## &amp;lt;?php _e(&amp;#39;some string&amp;#39;, &amp;#39;wp_spamfilter&amp;#39;); ?&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;__&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;some other string&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wp_spamfilter&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then i used xgettext to extract all the strings that should be localized into wp_spamfilter-en_eN.po:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;xgettext --keyword=__ --keyword=_e --default-domain=wordpress --language=php *.php --output=wp_spamfilter-en_EN.po
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After that i editted the po file and i compiled a mo file with it using msgfmt:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;msgfmt wp_spamfilter-en_eN.po -o wp_spamfilter-en_eN.mo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once i had made sure that wp_spamfilter-en_eN.mo was readable by my webserver i was ready.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Internationalizing strings with variables</title>
      <link>/post/2006-03-19-internationalizing-strings-with-variables/</link>
      <pubDate>Sun, 19 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-03-19-internationalizing-strings-with-variables/</guid>
      <description>
        
          &lt;p&gt;Yesterday i wrote that you can use __($string, $domain) and _e($string, $domain) to internationalize a string with &lt;a href=&#34;http://www.wordpress.org&#34;&gt;WordPress&lt;/a&gt;. I forgot to mention that if you use &lt;a href=&#34;http://www.php.net/sprintf&#34;&gt;sprintf&lt;/a&gt; you can handle strings with variables too. An example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sprintf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;__&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;There are %d monkeys in the %s&amp;#39;&lt;/span&gt;), $domain), $number, $location);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Plugin template for WordPress</title>
      <link>/post/2006-03-19-plugin-template-for-wordpress/</link>
      <pubDate>Sun, 19 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-03-19-plugin-template-for-wordpress/</guid>
      <description>
        
          &lt;p&gt;Today i&amp;rsquo;ve been cleaning up my code. All my plugins live in a directory %plugin_name% under the wp-content/plugins directory. Here is the code for %plugin_name%/%plugin_name%.php&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Plugin Name: %plugin_name%
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Version: %plugin_version%
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Plugin URI: %plugin_uri%
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Description: %plugin_description%
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;Author URI: %plugin_author_uri%
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Direct access is not allowed.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;function\_exists&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;load_plugin_textdomain&amp;#39;&lt;/span&gt;)) {
&lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%plugin_name%.php&amp;#39;&lt;/span&gt;);
$plugin_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;substr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;basename&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__FILE__&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// You can add optional parameters to the constructor, eg: the wpdb instance.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin_class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin_class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;($plugin_name);
}
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it&amp;rsquo;s time to implement the %plugin_class%. Here is the template for %plugin_name%/%plugin_class%.php:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin_class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; $_plugin_name;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; $_localization_domain;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; $_localization_path;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin_class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;($plugin_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%plugin_name%&amp;#39;&lt;/span&gt;) {
    $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_plugin_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $plugin_name;

$this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_localization_domain&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $plugin_name;
$this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_localization_path&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wp-content/plugins/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $plugin_name;

&lt;span style=&#34;color:#75715e&#34;&gt;// You can add additional hooks and filters here.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add_action&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;activate_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $plugin_name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $plugin_name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.php&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;$this, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;OnActivation&amp;#39;&lt;/span&gt;));
&lt;span style=&#34;color:#a6e22e&#34;&gt;add_action&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin_menu&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;$this, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;OnAdminMenu&amp;#39;&lt;/span&gt;));
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnAdminMenu&lt;/span&gt;() {
&lt;span style=&#34;color:#a6e22e&#34;&gt;load_plugin_textdomain&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_localization_domain&lt;/span&gt;, $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_localization_path&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;add_options_page&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;__&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%plugin_name% Options&amp;#39;&lt;/span&gt;, $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_localization_domain&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;__&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%plugin_name%&amp;#39;&lt;/span&gt;, $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_localization_domain&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;manage_options&amp;#39;&lt;/span&gt;,$this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_plugin_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_plugin_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-options.php&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;$this, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;OnDisplayOptions&amp;#39;&lt;/span&gt;));
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnDisplayOptions&lt;/span&gt;() {
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin_class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;dirname&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__FILE__&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_plugin_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-options.php&amp;#39;&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnActivation&lt;/span&gt;() {
&lt;span style=&#34;color:#75715e&#34;&gt;// This code is executed when the plugin is activated.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// I prepend all my option names with $this-&amp;gt;_plugin_name.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add_option&lt;/span&gt;($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_plugin_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_somevar&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;);
}
}
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code above requires that you create a %plugin_name%/%plugin_name%-options.php file to administrate the options. Here is the template for that file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Direct access is not allowed.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin_class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;)) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;load_plugin_textdomain&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin_class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_localization_domain&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin_class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_localization_path&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// Handle post action.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;stage&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;process&amp;#39;&lt;/span&gt;) {
&lt;span style=&#34;color:#75715e&#34;&gt;// All the names of form variables start with %plugin_class%_plugin_name.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_POST[&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;plugin_class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_plugin_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_somevar&amp;#39;&lt;/span&gt;])) {
&lt;span style=&#34;color:#75715e&#34;&gt;// Do processing here.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
}

&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only thing that we still have to do is generate a po file with xgettext, translate it and compile a %plugin_name%/%plugin_name%-en_EN.mo file.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Adding an action when your plugin is activated</title>
      <link>/post/2006-03-15-adding-an-action-when-your-plugin-is-activated/</link>
      <pubDate>Wed, 15 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-03-15-adding-an-action-when-your-plugin-is-activated/</guid>
      <description>
        
          &lt;p&gt;The WordPress documentation says that you have to call add_action(&amp;lsquo;activate_pluginurl&amp;rsquo;, &amp;lsquo;somefunction&amp;rsquo;) to trigger somefunction when your plugin is activated. Unfortunately i couldn&amp;rsquo;t find with what pluginurl should be replaced. After a bit of experimenting i&amp;rsquo;ve found that in wp-admin/plugins.php the following is called when a plugin is activated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;do_action&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;activate_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trim&lt;/span&gt;( $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plugin&amp;#39;&lt;/span&gt;] ));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So it appears that you simply have to use the path of your plugin relative to /wp-content/plugins. Eg: you have a plugin in /wp-content/plugins/wp-spamfilter/wp-spamfilter.php then you have to call add_action as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add_action&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;activate_wp-spamfilter/wp-spamfilter.php&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;somefunction&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>More marshalling...</title>
      <link>/post/2006-03-01-more-marshalling/</link>
      <pubDate>Wed, 01 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-03-01-more-marshalling/</guid>
      <description>
        
          &lt;p&gt;This snippet uses &lt;a href=&#34;http://windowssdk.msdn.microsoft.com/library/default.asp?url=/library/en-us/sysinfo/base/getprivateprofilestring.asp&#34;&gt;GetPrivateProfileString&lt;/a&gt; that is available in kernel32.dll. Apparently microsoft has decided to remove this useful function from the dotnet api.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;[DllImport(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kernel32&amp;#34;&lt;/span&gt;, SetLastError&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetPrivateProfileString(
String &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;pSection,
String &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;pKey,
String &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;pDefault,
StringBuilder &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;pValue,
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pBufferLen,
String &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;pFile
);

StringBuilder &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcnew StringBuilder(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;);
GetPrivateProfileString(
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;logsection&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;,
buf,
buf&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Capacity,
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.ini&amp;#34;&lt;/span&gt;
);

std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_log&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; string(
(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) Marshal&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;StringToHGlobalAnsi(logf).ToPointer()
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Reading unmanaged structs with .NET</title>
      <link>/post/2006-02-27-reading-unmanaged-structs-with-net/</link>
      <pubDate>Mon, 27 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-02-27-reading-unmanaged-structs-with-net/</guid>
      <description>
        
          &lt;p&gt;Last week i&amp;rsquo;ve spend a lot of time studying &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemRuntimeInteropServices.asp&#34;&gt;System::Runtime::InteropServices&lt;/a&gt;. It took me a while to figure out how i could read unmanaged structs with .NET &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemio.asp&#34;&gt;System::IO&lt;/a&gt;. Here is a bit of sample code (Should be obvious enough to write a template or generic class for all sorts of structs, just like i did at the office)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; name[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; name;
&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; sterr;
} TEST;

FileStream &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcnew FileStream(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;TEST.DAT&amp;#34;&lt;/span&gt;, FileMode&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Open, FileAccess&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ReadWrite);
BinaryReader &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcnew BinaryReader(f);
array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;byte&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ReadBytes(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(TEST));
TEST test;
Marshal&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Copy(buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (IntPtr) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;test, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(TEST));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Access a control by name</title>
      <link>/post/2006-02-25-access-a-control-by-name/</link>
      <pubDate>Sat, 25 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-02-25-access-a-control-by-name/</guid>
      <description>
        
          &lt;p&gt;I know a mathematician that can do magic with stats. That&amp;rsquo;s also the reason why he works at &lt;a href=&#34;http://epp.eurostat.cec.eu.int/portal/page?_pageid=1090,30070682,1090_33076576&amp;amp;_dad=portal&amp;amp;_schema=PORTAL&#34;&gt;Eurostat&lt;/a&gt;. He&amp;rsquo;s automating a lot of his work by programming in &lt;a href=&#34;http://msdn.microsoft.com/isv/technology/vba/default.aspx&#34;&gt;Visual Basic for Applications&lt;/a&gt;. He asked me if i wanted to look at his code because he had the feeling there was a smell. Here are a couple lines&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vb&#34; data-lang=&#34;vb&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;With&lt;/span&gt; SomeForm
.txtJanvier60.Value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vaData1(1, 2)
.txtFevrier60.Value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vaData1(1, 3)
.txtJanvier61.Value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vaData1(1, 2)
.txtFevrier61.Value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vaData1(1, 3)
...
.txtJanvier70.Value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vaData1(1, 2)
.txtFevrier70.Value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vaData1(1, 3)
&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;With&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It took me 5 minutes to search the web and change his code as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vb&#34; data-lang=&#34;vb&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Dim&lt;/span&gt; months(1) &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;
months(0) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Janvier&amp;#34;&lt;/span&gt;
months(1) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fevrier&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;With&lt;/span&gt; SomeForm
&lt;span style=&#34;color:#66d9ef&#34;&gt;For&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 60 &lt;span style=&#34;color:#66d9ef&#34;&gt;to&lt;/span&gt; 70
&lt;span style=&#34;color:#66d9ef&#34;&gt;For&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0 &lt;span style=&#34;color:#66d9ef&#34;&gt;to&lt;/span&gt; UBound(months)
.Controls(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;txt&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; months(j) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CStr&lt;/span&gt;(i)).Value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vaData1(1, j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 2)
&lt;span style=&#34;color:#66d9ef&#34;&gt;Next&lt;/span&gt; j
&lt;span style=&#34;color:#66d9ef&#34;&gt;Next&lt;/span&gt; i
&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;With&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Removing selected items from a ListBox</title>
      <link>/post/2006-02-16-removing-selected-items-from-a-listbox/</link>
      <pubDate>Thu, 16 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-02-16-removing-selected-items-from-a-listbox/</guid>
      <description>
        
          &lt;p&gt;Today i was experimenting with a couple of windows controls. For some reason i wasn&amp;rsquo;t able to remove the selected items from a &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwindowsformslistboxmemberstopic.asp&#34;&gt;ListBox&lt;/a&gt;. Here is the code that didn&amp;rsquo;t work&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vbnet&#34; data-lang=&#34;vbnet&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;For&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Each&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;As&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListBox1.SelectedIndices
	ListBox2.Items.Add(ListBox1.Items(index))
	ListBox1.Items.Remove(index)
&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;For&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is that when you remove an item from the collection the indices change. Here is a possible solution&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vbnet&#34; data-lang=&#34;vbnet&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Dim&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;As&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListBox1.SelectedIndex
&lt;span style=&#34;color:#66d9ef&#34;&gt;While&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;1
	ListBox2.Items.Add(ListBox1.Items(index))
	ListBox1.Items.Remove(index)
	index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListBox1.SelectedIndex
&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;While&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Pagination for all</title>
      <link>/post/2006-02-12-pagination-for-all/</link>
      <pubDate>Sun, 12 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-02-12-pagination-for-all/</guid>
      <description>
        
          &lt;p&gt;Suppose you have a a large collection of items and you want to display them. Users don&amp;rsquo;t want to see 5000 items at once. They only want to see a couple of items and have the possibility to look at the next (or previous) couple of items. The solution for this problem is usually named pagination. You can compare this technique with &lt;a href=&#34;http://en.wikipedia.org/paging&#34;&gt;paging&lt;/a&gt;. Most people seem to come up with their own (My)SQL specific implementation. Here are a couple of examples how you can use &lt;a href=&#34;http://www.timvw.be/wp-content/code/php/pagination.txt&#34;&gt;mine&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.timvw.be/wp-content/code/php/pagination.txt&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// step 1 - create pageable data: array example
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(
	&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jameson&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;surname&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jenna&amp;#39;&lt;/span&gt;),


&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Banks&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;surname&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Briana&amp;#39;&lt;/span&gt;),
&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Giovanni&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;surname&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aria&amp;#39;&lt;/span&gt;),
&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Rush&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;surname&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Daniella&amp;#39;&lt;/span&gt;),
&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Flowers&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;surname&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;April&amp;#39;&lt;/span&gt;)
);
$pageabledata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PageableArray&lt;/span&gt;($data);

&lt;span style=&#34;color:#75715e&#34;&gt;// step 2 -- create the pager
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$pager &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pager&lt;/span&gt;($pageabledata);

&lt;span style=&#34;color:#75715e&#34;&gt;// step 3 -- create the pagewriter
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$pagewriter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PageWriter&lt;/span&gt;($pager);

&lt;span style=&#34;color:#75715e&#34;&gt;// step 4 -- create the paginator
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$paginator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Paginator&lt;/span&gt;($pagewriter);

&lt;span style=&#34;color:#75715e&#34;&gt;// step 5 -- run the paginators
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$paginator&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;();

&lt;span style=&#34;color:#75715e&#34;&gt;// setp 6 -- output
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$paginator&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;();
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I have also provided code for situations where you want to paginate File contents, MySQL or ADODB resultsets. In that case the code for step 1 would look like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// file example
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$pageabledata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PageableFile&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/users/timvw/.bash_history&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// mysql example
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$dblink &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysql_connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;mysql_select_db&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dbname&amp;#39;&lt;/span&gt;, $dblink);
$pageabledata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PageableMySQL&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SELECT * FROM wp_posts ORDER BY 1&amp;#39;&lt;/span&gt;, $dblink);

&lt;span style=&#34;color:#75715e&#34;&gt;// adodb example
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adodb/adodb.inc.php&amp;#39;&lt;/span&gt;);
$db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewADOConnection&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mysql://username:password@localhost/dbname&amp;#39;&lt;/span&gt;);
$pageabledata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PageableADODB&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SELECT * FROM wp_posts ORDER BY 1&amp;#39;&lt;/span&gt;, $db);
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will probably want to modify the code so that it generates the html you want. Here is how an example of such a change&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; * This class represents a PageJumpWriter
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PageJumpWriter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PageWriter&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         * Default constructor
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         * @param $pager the pager
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         * @param $base_url the baseurl for the pager
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         * @param $page_param the name of the page parameter
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	 * @param $items_per_page_param the name of the items per page parameter
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	 * @param $params additional url parameters in the form of a name=&amp;gt;value array
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PageJumpWriter&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;$pager, $base\_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$page\_param&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &amp;#39;page&amp;#39;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$items\_per\_page\_param&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &amp;#39;items\_per_page&amp;#39;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$params&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = null) {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;parent::PageWriter(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$pager&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$base\_url&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$page\_param&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$items\_per\_page_param&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$params&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;);
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;* Generate html for the items pager
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;* @see PageWriter#makeItemsPager
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*/
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;function makeItemsPager() {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$current_page&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$this-&amp;gt;pager&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&amp;gt;getCurrentPage();
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$last_page&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$this-&amp;gt;pager&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&amp;gt;getLastPage();
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$prev\_page&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$current\_page&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; -- 1;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$next\_page&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$current\_page&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; + 1;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$items\_per\_page&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$this-&amp;gt;pager&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&amp;gt;getItemsPerPage();
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$html&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &amp;#34;&lt;/span&gt; 

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;itemspager&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;lt;br /&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$html&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; .= &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;br&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt; 
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;lt;br /&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$html&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; .= &amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;return &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$html&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to use this customized html generator you simple change the code in step 3 as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
$pagewriter2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PageJumpWriter&lt;/span&gt;($pager2);
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem with most of these paginators is that you can only use one per page. This is a serious &lt;a href=&#34;http://en.wiktionary.org/wiki/PITA&#34;&gt;PITA&lt;/a&gt;. It&amp;rsquo;s your lucky day, here is an example of two paginators that can run separately in the same page&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// step 1 - create the pageable data
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$dblink &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysql_connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;mysql_select_db&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dbname&amp;#39;&lt;/span&gt;, $dblink);
$pageabledata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PageableMySQL&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SELECT * FROM wp_posts ORDER BY 1&amp;#39;&lt;/span&gt;, $dblink);
$pageabledata2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PageableFile&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/var/www/somefile.txt&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// step 2 - create the pagers
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$pager &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pager&lt;/span&gt;($pageabledata);
$pager2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pager&lt;/span&gt;($pageabledata2);

&lt;span style=&#34;color:#75715e&#34;&gt;// step 3 - create the pagewriters
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$pagewriter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PageWriter&lt;/span&gt;($pager);
$pagewriter2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PageJumpWriter&lt;/span&gt;($pager2, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;page2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;items_per_page2&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// step 4 - create the paginators
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$paginator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Paginator&lt;/span&gt;($pagewriter);
$paginator2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Paginator&lt;/span&gt;($pagewriter2);

&lt;span style=&#34;color:#75715e&#34;&gt;// step 5 - run the paginators
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$paginator&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;();


$paginator2&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;();

&lt;span style=&#34;color:#75715e&#34;&gt;// add extra url parameters for pagewriters
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$pagewriter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setParameters&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(
$pagewriter2&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPageParam&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $pagewriter2&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pager&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrentPage&lt;/span&gt;(),
$pagewriter2&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getItemsPerPageParam&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $pagewriter2&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pager&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getItemsPerPage&lt;/span&gt;()
));

$pagewriter2&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setParameters&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(
$pagewriter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPageParam&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $pagewriter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pager&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCurrentPage&lt;/span&gt;(),
$pagewriter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getItemsPerPageParam&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $pagewriter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pager&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getItemsPerPage&lt;/span&gt;()
));

&lt;span style=&#34;color:#75715e&#34;&gt;// step 6 -- output
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$paginator&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;();
$paginator2&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;();
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Preparing for my internship</title>
      <link>/post/2006-02-11-preparing-for-my-internship/</link>
      <pubDate>Sat, 11 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-02-11-preparing-for-my-internship/</guid>
      <description>
        
          &lt;p&gt;Only two more days before my internship starts. I&amp;rsquo;m a bit nervous and excited to dive into this adventure. Today i decided to fresh my knowledge of (MS)-C++ a bit up. I&amp;rsquo;ve read a tutorial on &lt;a href=&#34;http://www.newty.de/fpt/index.html&#34;&gt;function pointers&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vccore98/html/_core_argument_passing_and_naming_conventions.asp&#34;&gt;naming conventions&lt;/a&gt;. A couple of weeks ago i already had a look at &lt;a href=&#34;http://linuxquality.sunsite.dk/articles/memberpointers/&#34;&gt;pointers to member functions&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;customcallback&lt;/span&gt;() {
	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;running custom callback&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; 
} 
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;method)(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;); 
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b; } 
method &lt;span style=&#34;color:#a6e22e&#34;&gt;dosum&lt;/span&gt;() { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;sum; } 

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() { 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;plugin)() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL; 
	plugin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;customcallback; 
	plugin(); 
	method mymethod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dosum(); 
	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; mymethod(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>GNU screen</title>
      <link>/post/2006-02-06-gnu-screen/</link>
      <pubDate>Mon, 06 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-02-06-gnu-screen/</guid>
      <description>
        
          &lt;p&gt;Another tool that belongs to my favorites is &lt;a href=&#34;http://www.gnu.org/software/screen/&#34;&gt;GNU Screen&lt;/a&gt;. A couple of years ago i had a bad internet connection and when i was working on a remote shell i was always logged out and had to start over. I really hated that 😉 Today i don&amp;rsquo;t have this problem anymore, but i like to keep &lt;a href=&#34;http://www.irssi.org&#34;&gt;Irssi&lt;/a&gt; (an &lt;a href=&#34;http://en.wikipedia.org/wiki/IRC&#34;&gt;IRC&lt;/a&gt; user-agent) running, even when i&amp;rsquo;m not logged in. &lt;a href=&#34;http://gentoo-wiki.com/TIP_Using_screen&#34;&gt;TIP Using Screen&lt;/a&gt; is an article that gives a couple of other reasons to use it and explains how it works. The default settings suck if you also use &lt;a href=&#34;http://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt;. So i had to figure out a couple of keypresses. With &amp;ldquo;cat -v&amp;rdquo; i could easily see what those keypresses were. Here is my .screenrc file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##############################################&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# # Up##############################################&lt;/span&gt;
startup_message off
escape ^Oo

bind i screen -t &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irssi&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; irssi
bind v screen -t &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vim&amp;#39;&lt;/span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; vim
bind m screen -t &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mutt&amp;#39;&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; mutt
bind b screen -t &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;slrn belnet&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; slrn -h news.belnet.be
bind r screen -t &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;slrn php&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; slrn -h news.php.net
bind e screen -t &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elinks&amp;#39;&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; elinks http://www.google.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>GNU sort</title>
      <link>/post/2006-02-06-gnu-sort/</link>
      <pubDate>Mon, 06 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-02-06-gnu-sort/</guid>
      <description>
        
          &lt;p&gt;I already wrote that &lt;a href=&#34;http://www.gnu.org/software/coreutils/&#34;&gt;GNU Core Utilities&lt;/a&gt; (&lt;a href=&#34;http://www.gnu.org/software/textutils/textutils.html&#34;&gt;GNU Textutils&lt;/a&gt;) have become my favorite text processing tools. Today i wanted to sort a couple of lines using the last three numbers of each line. Here is an example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;c:/data/backup/JA-229
c:/data/backup/JA-221
c:/data/backup/JA-233
c:/data/backup/NE-046
c:/data/backup/NE-049
c:/data/backup/JA-217
c:/data/backup/JA-225
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the command &amp;ldquo;sort -n -t- -k2 myfile.txt&amp;rdquo; i quickly got what i needed.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Multiple joins explained</title>
      <link>/post/2006-02-03-multiple-joins-explained/</link>
      <pubDate>Fri, 03 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-02-03-multiple-joins-explained/</guid>
      <description>
        
          &lt;p&gt;I&amp;rsquo;ll try to explain how a join on more than one table works. I&amp;rsquo;ve noticed people get confused by it. Assume we have the following tables&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;newsitems(news_id,post_id)&lt;/li&gt;
&lt;li&gt;postitems(post_id,user_id,content)&lt;/li&gt;
&lt;li&gt;users(user_id,name,password)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We want to display for each newsitem the content and the author.&lt;/p&gt;
&lt;p&gt;Our base table would be the newsitems, and then we join using the item_id. Thus the query would be&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; newsitems
&lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; postitems &lt;span style=&#34;color:#66d9ef&#34;&gt;USING&lt;/span&gt; (post_id)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This returns a &amp;ldquo;virtual table&amp;rdquo; that has looks like this result(news_id,post_id,user_id,content).&lt;/p&gt;
&lt;p&gt;Now we still need to get the username, so we use our result table and perform a join on the users table. Thus the query would be&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;result&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; users &lt;span style=&#34;color:#66d9ef&#34;&gt;USING&lt;/span&gt; (user_id)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we combine our first two queries, we end up with this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; newsitems
&lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; postitems &lt;span style=&#34;color:#66d9ef&#34;&gt;USING&lt;/span&gt; (post_id)
&lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; users &lt;span style=&#34;color:#66d9ef&#34;&gt;USING&lt;/span&gt; (user_id)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Conclusion: Look at A&lt;em&gt;B&lt;/em&gt;C as (A*B)*C to easily understand multiple joins&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>ManyToMany relationships with Java Persistence (JSR-220)</title>
      <link>/post/2006-01-28-manytomany-relationships-with-java-persistence-jsr-220/</link>
      <pubDate>Sat, 28 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-01-28-manytomany-relationships-with-java-persistence-jsr-220/</guid>
      <description>
        
          &lt;p&gt;The scenario is as following: each table can have many reservations, and each reservation can span many tables. Here is our first trial&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Table.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ManyToMany&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; 
  targetEntity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Reservation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getReservations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{..}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Reservation.java  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ManyToMany&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;   
  targetEntity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getTables&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{..}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We end up with linktables tables_reservations and reservations_tables. This is not what we want. It should not be possible to remove a table when there are still reservations related to that table. We change our code so that table becomes the owner of the relationship.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Table.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ManyToMany&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; 
  targetEntity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Reservation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 
  mappedBy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tables&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getReservations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{..}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Allright, now we only have the linktable reservations_tables. Exactly the same as we experienced with &lt;a href=&#34;http://www.timvw.be/onetomany-relationships-with-java-persistence-jsr220/&#34;&gt;OneToMany&lt;/a&gt; relationships the cascading persist works when we persist a child (reservation). If we want the cascading persist to work when we persist a parent (table) we have to make sure that the child (reservation) has the parent set. An important difference is that we can not enforce this thus i advise not to use the cascade attribute on the owner (table).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Table.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ManyToMany&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;  
  targetEntity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Reservation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;   
  mappedBy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tables&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getReservations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{..}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Reservation.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ManyToMany&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; 
  targetEntity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
  cascade&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;CascadeType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PERSIST&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getTables&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{..}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We decide to use the &lt;a href=&#34;http://www.hibernate.org/hib_docs/annotations/reference/en/html/validator.html&#34;&gt;Hibernate Validator&lt;/a&gt; classes to enforce that a reservation is associated with at least one table. For some reason the SizeValidator returns true if the value is null thus we also add a NotNullValidator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Reservation.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.hibernate.validator.*&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@ManyToMany&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; 
  targetEntity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;  
  cascade&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;CascadeType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PERSIST&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color:#a6e22e&#34;&gt;@NotNull&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@Size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getTables&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, this allows us to enforce that reservations are always associated with at least one table. We decide to allow cascading persist on the parent.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ManyToMany&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;  
targetEntity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Reservation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;  
mappedBy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tables&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;   
cascade&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;CascadeType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PERSIST&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getReservations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{..}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>OneToMany relationships with Java Persistence (JSR 220)</title>
      <link>/post/2006-01-25-onetomany-relationships-with-java-persistence-jsr220/</link>
      <pubDate>Wed, 25 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-01-25-onetomany-relationships-with-java-persistence-jsr220/</guid>
      <description>
        
          &lt;p&gt;Let&amp;rsquo;s experiment a bit with &lt;a href=&#34;http://www.hibernate.org&#34;&gt;Hibernate&lt;/a&gt;. We want to model the tables employee and shift. Each employee has multiple shifts (and each shift belongs to an employee). We want an employee table and a shift table (which has the employee_id as a foreign key).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Employee.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@OneToMany&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;targetEntity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Shift&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getShifts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{...}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Shift.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ManyToOne&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Employee &lt;span style=&#34;color:#a6e22e&#34;&gt;getEmployee&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code above generates the following tables: employee, employee_shift and shift. Time to read the documentation and discover the mappedBy attribute.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Employee.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@OneToMany&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;targetEntity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Shift&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; mappedBy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;employee&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getShifts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, now we get the tables we want. Let&amp;rsquo;s remove an employee that has shifts referencing him. An exception is thrown because of a foreign key constraint.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Employee.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@OneToMany&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;targetEntity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Shift&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; mappedBy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;employee&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cascade&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;CascadeType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;REMOVE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getShifts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, now we have cascading deletes working. Let&amp;rsquo;s try cascading inserts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Employee.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@OneToMany&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;targetEntity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Shift&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; mappedBy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;employee&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cascade&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;CascadeType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ALL&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getShifts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{...}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Main.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Employee employee &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Employee&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
Shift shift &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Shift&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
Vector shifts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Vector&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
shifts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;shift&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
employee&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setShifts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;shifts&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
em&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;persist&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;employee&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the code above the foreign key of shift will NULL instead of the employee_id. According to the documentation it is expected behaviour that cascading inserts only work when the children are saved.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Employee.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@OneToMany&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;targetEntity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Shift&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; mappedBy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;employee&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cascade&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;CascadeType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ALL&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getShifts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{...}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Main.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Employee employee &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Employee&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
Shift shift &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Shift&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; 
shift&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setEmployee&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;employee&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
Vector shifts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Vector&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
shifts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;shift&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
employee&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setShifts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;shifts&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
em&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;persist&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;employee&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It appears we can get cascading inserts to work as long as we do not forget to set the employee. We add a constraint so employee can not be null.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Shift.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ManyToOne&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@Column&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nullable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Employee &lt;span style=&#34;color:#a6e22e&#34;&gt;getEmployee&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{...}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Main.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Shift shift &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Shift&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
em&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;persist&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;shift&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;WTF? I can persist a NULL reference anyway? The value for employee_id is allowed to be NULL? Have we found a bug? Let&amp;rsquo;s check the documentation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Shift.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ManyToOne&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@JoinColumn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nullable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Employee &lt;span style=&#34;color:#a6e22e&#34;&gt;getEmployee&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{...}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Main.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Shift shift &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Shift&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; 
em&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;persist&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;shift&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, now are getting somewhere. And exception is thrown if we try to persist a shift that references to an employee that does not exist in the database yet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Shift.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ManyToOne&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cascade&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;CascadeType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PERSIST&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@JoinColumn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nullable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Employee &lt;span style=&#34;color:#a6e22e&#34;&gt;getEmployee&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CascadeType.ALL means that i want to cascade events on ALL events. My only requirements where that i cascade on PERSIST (insert) and on REMOVE (delete). So i need to change my annotation as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Employee.java
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@OneToMany&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;  
  targetEntity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Shift&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;  
  mappedBy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;employee&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;  
  cascade&lt;span style=&#34;color:#f92672&#34;&gt;={&lt;/span&gt;     
    CascadeType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PERSIST&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;    
    CascadeType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;REMOVE&lt;/span&gt;  
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getShifts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; shifts&lt;span style=&#34;color:#f92672&#34;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Setting up an SSH tunnel</title>
      <link>/post/2006-01-19-setting-up-an-ssh-tunnel/</link>
      <pubDate>Thu, 19 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-01-19-setting-up-an-ssh-tunnel/</guid>
      <description>
        
          &lt;p&gt;On the machine example there is a (&lt;a href=&#34;http://en.wikipedia.org/wiki/TCP/IP&#34;&gt;tcp/ip&lt;/a&gt;) program listening on port 12345. The protocol it talks is some &lt;a href=&#34;http://en.wikipedia.org/wiki/Plain_text&#34;&gt;plaintext&lt;/a&gt; language. I want to talk with it, but i do not want others to know what i am sending to it. I am lucky enough to have remote access to that machine via &lt;a href=&#34;http://en.wikipedia.org/wiki/Ssh&#34;&gt;ssh&lt;/a&gt;. I setup a tunnel with the following command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -N -L 12345:example:12345 timvw@example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now my program can connect to localhost:12345 and ssh will make sure that it ends up at example.:12345 without others being able to see the actual data. For windows users i suggest that you take a look at &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty&#34;&gt;Plink&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Accept posted XML data</title>
      <link>/post/2006-01-18-accept-posted-xml-data/</link>
      <pubDate>Wed, 18 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-01-18-accept-posted-xml-data/</guid>
      <description>
        
          &lt;p&gt;I remember that i have spent a lot of time finding something that allowed me to accept the posted XML data. The solution was very simple&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;$data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file_get_contents&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;php://input&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Select the first 50 words of an article</title>
      <link>/post/2006-01-18-select-the-first-50-words-of-an-article/</link>
      <pubDate>Wed, 18 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-01-18-select-the-first-50-words-of-an-article/</guid>
      <description>
        
          &lt;p&gt;I am cleaning up my code snippets and i found the following little trick in one of them that i have removed. Assuming that different words are separated by spaces we can use &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.0/en/string-functions.html&#34;&gt;SUBSTRING_INDEX&lt;/a&gt; as following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; SUBSTRING_INDEX(body,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; dn &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; mytable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Brainteaser</title>
      <link>/post/2006-01-14-brainteaser/</link>
      <pubDate>Sat, 14 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-01-14-brainteaser/</guid>
      <description>
        
          &lt;p&gt;Earlier today Chung Leong, an intelligent regular at &lt;a href=&#34;news://comp.lang.php&#34;&gt;comp.lang.php&lt;/a&gt;, posted a little brainteaser:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The two functions in the example below behave differently. The difference is easy to spot, of ocurse. The challenge is correctly explaining why this is so. Why does the second function seemingly corrupt the cloned copy of an object?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BritneySpear&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;$obj) {
$attr &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;amp;&lt;/span&gt; $obj&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;attributes&lt;/span&gt;;
$clone &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* clone */&lt;/span&gt; $obj;
$obj&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;attributes&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;‘Length’&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
$obj&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;“”&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $clone;
}

$data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;“This&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test”&lt;/span&gt;;
$obj1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;attributes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;‘Length’&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;($data));
$obj1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $data;
$clone1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bobcat&lt;/span&gt;($obj1);
&lt;span style=&#34;color:#a6e22e&#34;&gt;print_r&lt;/span&gt;($clone1);

$obj2&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;attributes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;‘Length’&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;($data));
$obj2&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $data;
$clone2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BritneySpear&lt;/span&gt;($obj2);
&lt;span style=&#34;color:#a6e22e&#34;&gt;print_r&lt;/span&gt;($clone2);
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;stdClass&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Object&lt;/span&gt;
(
    [&lt;span style=&#34;color:#a6e22e&#34;&gt;attributes&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Array&lt;/span&gt;
        (
            [&lt;span style=&#34;color:#a6e22e&#34;&gt;Length&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
        )

    [&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;This&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;
)
&lt;span style=&#34;color:#66d9ef&#34;&gt;stdClass&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Object&lt;/span&gt;
(
    [&lt;span style=&#34;color:#a6e22e&#34;&gt;attributes&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Array&lt;/span&gt;
        (
            [&lt;span style=&#34;color:#a6e22e&#34;&gt;Length&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        )

    [&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;This&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It took me fifteen minutes to figure out the source of this mysterious behaviour, but it took me a couple of hours to come up with the following explanation: After $attr =&amp;amp; $obj-&amp;gt;attributes in the BritneySpear function the container that holds this variables has is_ref=1. Any properties that are references to other variables, will remain references when $obj is copied into $clone as explained in &lt;a href=&#34;http://php.belnet.be/manual/en/language.oop5.cloning.php&#34;&gt;Object cloning&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to know more about references i can advise you to read &lt;a href=&#34;http://derickrethans.nl/files/phparch-php-variables-article.pdf&#34;&gt;PHP References&lt;/a&gt; by &lt;a href=&#34;http://derickrethans.nl&#34;&gt;Derick Rethans&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Format sourcecode with VIM</title>
      <link>/post/2006-01-14-format-sourcecode-with-vim/</link>
      <pubDate>Sat, 14 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-01-14-format-sourcecode-with-vim/</guid>
      <description>
        
          &lt;p&gt;I once read an article that explained how i could make &lt;a href=&#34;http://www.vim.org&#34;&gt;Vim&lt;/a&gt; format my code but i forgot what the command was. Many websearches for &amp;ldquo;vim indent code&amp;rdquo; later i had the luminous idea to search for &amp;ldquo;vim format code&amp;rdquo; instead. The first site i visited already had the answer i had been looking for: &amp;ldquo;gg=G&amp;rdquo;. Simple as that.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>How private is private really?</title>
      <link>/post/2006-01-12-how-private-is-private-really/</link>
      <pubDate>Thu, 12 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-01-12-how-private-is-private-really/</guid>
      <description>
        
          &lt;p&gt;Today i ended up at &lt;a href=&#34;http://derickrethans.nl/private_properties_exposed.php&#34;&gt;private properties exposed&lt;/a&gt; (Apparently it is also used by &lt;a href=&#34;http://www.phpunit.de/en/index.php&#34;&gt;PHPUnit&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; {
 &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; $bar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;;
}

$obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;;
$propname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bar&amp;#34;&lt;/span&gt;;
$a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;) $obj;
&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; $a[$propname];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Restore from a MySQL dumpfile</title>
      <link>/post/2006-01-12-restore-from-a-mysql-dumpfile/</link>
      <pubDate>Thu, 12 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-01-12-restore-from-a-mysql-dumpfile/</guid>
      <description>
        
          &lt;p&gt;If you are a longtime user of &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.0/en/mysqldump.html&#34;&gt;mysqldump&lt;/a&gt; you may have experienced that restoring with mysql &amp;lt; dumpfile doesn&amp;rsquo;t always work because of referential problems. Here is a little script that takes care of it: &lt;a href=&#34;http://www.timvw.be/wp-content/code/bash/mysql-restore.txt&#34;&gt;mysql-restore.txt&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Simple HTTP proxy with Perl</title>
      <link>/post/2005-12-20-simple-http-proxy-with-perl/</link>
      <pubDate>Tue, 20 Dec 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-12-20-simple-http-proxy-with-perl/</guid>
      <description>
        
          &lt;p&gt;Today i had to demonstrate my version of a HTTP proxy and hand in the code. There are already various programs that do this, but here is my version: &lt;a href=&#34;http://www.timvw.be/wp-content/code/perl/httpproxy.txt&#34;&gt;httpproxy.txt&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Problem with switch from mandatory to roaming profile</title>
      <link>/post/2005-12-17-problem-with-switch-from-mandatory-to-roaming-profile/</link>
      <pubDate>Sat, 17 Dec 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-12-17-problem-with-switch-from-mandatory-to-roaming-profile/</guid>
      <description>
        
          &lt;p&gt;Today i was experimenting with my &lt;a href=&#34;http://en.wikipedia.org/wiki/Windows_Server_2003&#34;&gt;Windows Server 2003&lt;/a&gt; and the &lt;a href=&#34;http://en.wikipedia.org/wiki/Active_Directory&#34;&gt;Active Directory&lt;/a&gt;. I was able to setup &lt;a href=&#34;http://www.enterprisenetworkingplanet.com/netos/article.php/625291&#34;&gt;Roaming and Mandatory profiles&lt;/a&gt;. After my tests with the mandatory profile i changed it back to a regular roaming profile. I was surprised when i noticed that my changes to the profile were not saved. It seems that files are copied from the active directory to the domain pc (but not removed). The problem is that if there is already a ntuser.man file on the domain pc this pc will continue to think that it&amp;rsquo;s a mandatory profile. Solution: Remove the copy of the profile on the domain pc.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>How (not) to apply for a job?</title>
      <link>/post/2005-12-06-how-no-to-apply-for-a-job/</link>
      <pubDate>Tue, 06 Dec 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-12-06-how-no-to-apply-for-a-job/</guid>
      <description>
        
          &lt;p&gt;Today i was part of a jury looking for a junior programmer. Most of them had an extensive list with programming languages on their curriculum vitae, eg: &lt;a href=&#34;http://www.w3.org/TR/html4/&#34;&gt;html&lt;/a&gt;, &lt;a href=&#34;http://www.w3.org/XML/&#34;&gt;xml&lt;/a&gt;, &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34;&gt;css&lt;/a&gt;, &amp;hellip; Ok, there are people out there that consider writing markup language is programming too.&lt;/p&gt;
&lt;p&gt;Most of them mentionned they had some experiences with &lt;a href=&#34;http://www.perl.org&#34;&gt;Perl&lt;/a&gt;. My first question was: What are the kind of problems you would solve with Perl? In which areas does it seem to be right tool? A couple of them told me that they had written a proxy server or used it on linux. Fine, but i would have expected at least one to tell me that Perl (Practical Extraction and Report Language) seems to be the right tool for text manipulation&amp;hellip;&lt;/p&gt;
&lt;p&gt;Most people added experience with virtually every Microsoft Operating System on their list with skills. Most of them also mentionned experience with Linux. When i asked them about differences between Windows and &lt;a href=&#34;http://www.linux.org&#34;&gt;Linux&lt;/a&gt; i didn&amp;rsquo;t get any answers. They could have at least said that Perl on windows can be a &lt;a href=&#34;http://en.wiktionary.org/wiki/PITA&#34;&gt;PITA&lt;/a&gt; 😀 I got the feeling they have booted something like &lt;a href=&#34;http://www.ubuntulinux.org/&#34;&gt;Ubuntu&lt;/a&gt; a couple of times and consider that as experience.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t think that knowing an &lt;a href=&#34;http://en.wikipedia.org/wiki/API&#34;&gt;API&lt;/a&gt; by heart is really required, so i asked them the following: What is &lt;a href=&#34;http://en.wikipedia.org/wiki/Recursion&#34;&gt;recursion&lt;/a&gt;? Can you mention a couple of advantages and or disadvantages? How do you solve the problems that arise with recursion? You should have seen their faces turn white 😛 Most of them knew that it&amp;rsquo;s a function that calls itself, and only one mentionned that it can lead to a stack overflow&amp;hellip; Too bad that noone provided any tips for solving them more efficient or mentionned &lt;a href=&#34;http://en.wikipedia.org/wiki/Wilhelm_Ackermann&#34;&gt;Wilhelm Ackerman&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was a bit surprised by the poor answers on recursion so i decided not to ask them what a &lt;a href=&#34;http://en.wiktionary.org/wiki/semaphore&#34;&gt;semaphore&lt;/a&gt; or a &lt;a href=&#34;http://www.webopedia.com/TERM/M/mutex.html&#34;&gt;mutex&lt;/a&gt; are&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My Advise:&lt;/strong&gt; If you mention any skills make sure they are actually skills&amp;hellip; And if you are interested in a maintenance job, stay at home and don&amp;rsquo;t waste our valuable time. We&amp;rsquo;ll get back to you. Goodbye.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Wordfinder</title>
      <link>/post/2005-11-15-wordfinder/</link>
      <pubDate>Tue, 15 Nov 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-11-15-wordfinder/</guid>
      <description>
        
          &lt;p&gt;I&amp;rsquo;ve noticed there are still a lot of shows on television that want you to find a word. So i wrote a little wordfinder that does this for you using the ispell wordlist. As always, you can download the &lt;a href=&#34;http://www.timvw.be/wp-content/code/php/wordfinder.txt&#34;&gt;wordfinder.txt&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Parsing http headers</title>
      <link>/post/2005-11-14-parsing-http-headers/</link>
      <pubDate>Mon, 14 Nov 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-11-14-parsing-http-headers/</guid>
      <description>
        
          &lt;p&gt;Today i updated my HTTP proxy a little. &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616.html&#34;&gt;RFC 2616&lt;/a&gt; describes &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2&#34;&gt;Message Headers&lt;/a&gt; as following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;message-header = field-name &amp;ldquo;:&amp;rdquo; [ field-value ]
field-name     = token
field-value    = *( field-content | LWS )
field-content  = &amp;lt;the OCTETs making up the field-value and consisting of
either *TEXT or combinations of token, separators,
and quoted-string&amp;gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is the code i used to get the field-name and field-value. Do you see the bug?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($name, $value) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/:/&lt;/span&gt;, $in;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Location headers look like &amp;lsquo;header: &lt;a href=&#34;http://www.example.com&#34;&gt;http://www.example.com&lt;/a&gt;&amp;rsquo;. Now, the problem is that &lt;a href=&#34;http://perldoc.perl.org/functions/split.html&#34;&gt;split&lt;/a&gt; returns a list with &amp;lsquo;location&amp;rsquo;, &amp;lsquo;http&amp;rsquo; and &amp;lsquo;&lt;a href=&#34;http://www.example.com&#34;&gt;www.example.com&lt;/a&gt;&amp;rsquo;. Here is the solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $in &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;location: http://www.example.com&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($name, $value) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/:/&lt;/span&gt;, $in, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Changing the include_path</title>
      <link>/post/2005-11-06-changing-the-include_path/</link>
      <pubDate>Sun, 06 Nov 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-11-06-changing-the-include_path/</guid>
      <description>
        
          &lt;p&gt;PHP has a feature to change the &lt;a href=&#34;http://www.php.net/manual/en/ini.core.php#ini.include-path&#34;&gt;include_path&lt;/a&gt; programatically. The problem is that the path separator is : on unix and ; on windows. Luckily there is a constant &lt;a href=&#34;http://www.php.net/manual/en/reserved.constants.php&#34;&gt;PATH_SEPARATOR&lt;/a&gt; to overcome this issue. Here is how i would do it&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ini_set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error_reporting&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;E_ALL&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;ini_set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display_errors&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;);

$include_paths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/users/timvw/phpincs&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/users/timvw/pear&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ini_get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;include_path&amp;#39;&lt;/span&gt;)
);

&lt;span style=&#34;color:#a6e22e&#34;&gt;ini_set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;include_path&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;implode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;PATH_SEPARATOR&lt;/span&gt;, $include_paths));

&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Introducing the masterpage</title>
      <link>/post/2005-11-06-introducing-the-masterpage/</link>
      <pubDate>Sun, 06 Nov 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-11-06-introducing-the-masterpage/</guid>
      <description>
        
          &lt;p&gt;Most websites have the same layout and an area with dynamic content. So most people choose for the following solution: generate a couple of template files for the static content and then write the code for the dynamic content and include the static templates. Here is how the code for a contact and an aboutme page would look like&lt;/p&gt;
&lt;p&gt;contact.php&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;header.php&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leftpanel.php&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;// code for contact page
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rightpanel.php&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;footer.php&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;aboutme.php&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;header.php&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leftpanel.php&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;//something about me
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rightpanel.php&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;footer.php&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code is pretty flexible. But what happens if you want to change your layout to something without a rightpanel? Right, you have to edit each page and remove the include call. A couple of weeks ago i discovered the concept of &lt;a href=&#34;http://www.lifl.fr/~dumoulin/tiles/&#34;&gt;tiles&lt;/a&gt; and immediately realised this is useful for php too. Here is an example implementation&lt;/p&gt;
&lt;p&gt;contact.php&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;require_once&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;init.php&amp;#39;&lt;/span&gt;);
$tiles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;();
$tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PAGE_CONTENT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/contact.html&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;masterpage.php&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;aboutme.php&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;require_once&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;init.php&amp;#39;&lt;/span&gt;);
$tiles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;();
$tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PAGE_CONTENT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/aboutme.html&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;masterpage.php&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;masterpage.php&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($tiles)) $tiles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;header&amp;#39;&lt;/span&gt;]) $tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PAGE_CONTENT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/default-header.html&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leftpanel&amp;#39;&lt;/span&gt;]) $tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PAGE_CONTENT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/default-leftpanel.html&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;]) $tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PAGE_CONTENT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/default-main.html&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;footer&amp;#39;&lt;/span&gt;]) $tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PAGE_CONTENT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/default-footer.html&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;($tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;header&amp;#39;&lt;/span&gt;]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;($tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leftpanel&amp;#39;&lt;/span&gt;]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;($tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;($tiles[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;footer.php&amp;#39;&lt;/span&gt;]);
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, this allows the programmer to change the layout in a single file, the masterpage. If a programmer wants to change the content of a specific area of a page all he has to do is change the $tiles array.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Problem with Base and MySQL support</title>
      <link>/post/2005-11-04-problem-with-base-and-mysql-support/</link>
      <pubDate>Fri, 04 Nov 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-11-04-problem-with-base-and-mysql-support/</guid>
      <description>
        
          &lt;p&gt;Today i decided to try out the new &lt;a href=&#34;http://www.openoffice.org/&#34;&gt;OpenOffice.org&lt;/a&gt; release. Creating a presentation with &lt;a href=&#34;http://www.openoffice.org/product/impress.html&#34;&gt;Impress&lt;/a&gt; went pretty smooth. After that i wanted to check out &lt;a href=&#34;http://www.openoffice.org/product/base.html&#34;&gt;Base&lt;/a&gt; with a MySQL backend but i got an error message that the JDBC driver could not be loaded.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/ooo2mysqlfail.jpg&#34; alt=&#34;Could not load JDBC driver dialog&#34;&gt;&lt;/p&gt;
&lt;p&gt;I immediately knew that i had to add the &lt;a href=&#34;http://www.mysql.com/products/connector/j/&#34;&gt;MySQL driver&lt;/a&gt; to the classpath. A little websearch learned me i have to choose Tools-&amp;gt;Options in the menu. And from there i can modify the classpath via the OpenOffice.org-&amp;gt;Java panel.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/ooo2mysqladd.jpg&#34; alt=&#34;Add MySQL Connector/J to classpath dialog&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/ooo2mysqlsuccess.jpg&#34; alt=&#34;Could load JDBC driver dialog&#34;&gt;&lt;/p&gt;
&lt;p&gt;After that everything went smooth 🙂 There are so many sites talking about the new release and all the new features but none of them seem to have experienced this. It makes me wonder if they have really tried it out..&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>GNU text utilities</title>
      <link>/post/2005-11-03-gnu-text-utilities-2/</link>
      <pubDate>Thu, 03 Nov 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-11-03-gnu-text-utilities-2/</guid>
      <description>
        
          &lt;p&gt;I&amp;rsquo;ve already written that i like the &lt;a href=&#34;http://www.gnu.org/software/textutils/textutils.html&#34;&gt;GNU Textutils&lt;/a&gt; a lot. Today someone had the following problem: A textfile with words. It&amp;rsquo;s possible that a word is repeated a couple of times. He wants to generate a newfile without duplicate words. The solution is pretty simple&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sort words.txt | uniq &amp;gt; newfile.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Passing a filehandle as parameter</title>
      <link>/post/2005-10-20-passing-a-filehandle-as-parameter/</link>
      <pubDate>Thu, 20 Oct 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-10-20-passing-a-filehandle-as-parameter/</guid>
      <description>
        
          &lt;p&gt;To keep things maintainable we split our program in modules, classes, functions&amp;hellip; In &lt;a href=&#34;http://perldoc.perl.org/perlsub.html&#34;&gt;perlsub&lt;/a&gt; from the execellent perl documentation you can lookup the syntax of how to use functions. Offcourse, you have to digg pretty deep to find out how you can pass a filehandle&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# clientproc(*STDOUT);&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# pass the socket&lt;/span&gt;
clientproc(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;CH);

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clientproc&lt;/span&gt;  
{
  $fh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $fh &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>a little hint for writing and testing a script</title>
      <link>/post/2005-10-18-a-little-hint-for-writing-and-testing-a-script/</link>
      <pubDate>Tue, 18 Oct 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-10-18-a-little-hint-for-writing-and-testing-a-script/</guid>
      <description>
        
          &lt;p&gt;I noticed that most people think Vim sucks and they constantly perform the following keystrokes&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;:wq 
perl somefile.pl 
vim somefile.pl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the first trick, you do not need to exit vim to perform a command. Simply type the following while you are in vim&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;:!perl somefile.pl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Offcourse, you do not want to type the filename all the time, so you use the following&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;:!perl %
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, if you are using a different scripting language it might be more portable to make the file executable (chmod u+x) and make sure the &lt;a href=&#34;http://en.wikipedia.org/wiki/Shebang&#34;&gt;Shebang&lt;/a&gt; points to the right interpreter. Your script would be something like the following then&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Socket;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now all you have to do is type the following in vim and your script will be executed&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;:!%
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I noticed that the :!% trick does not work when your script is in your current working directory. This is how you can make it work&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;:!./%
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I also noticed that before you execute this command you always need to type :w to save the changes. To automate this i have added the following to my ~/.vimrc file&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;map ,r :w&amp;lt;cr&amp;gt;:!./%&amp;lt;/cr&amp;gt;&amp;lt;cr&amp;gt; 
&amp;lt;/cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now all i have to type is the following&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34; data-lang=&#34;dos&#34;&gt;,r  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For other tricks and hints you have to check out &lt;a href=&#34;http://www.vi-improved.org/tutorial.php&#34;&gt;Vi-IMproved.org&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Odd behaviour with arrays</title>
      <link>/post/2005-10-12-odd-behaviour-with-arrays/</link>
      <pubDate>Wed, 12 Oct 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-10-12-odd-behaviour-with-arrays/</guid>
      <description>
        
          &lt;p&gt;A while ago i was really stumbled by the behaviour of a server. This problem solved itself after the sysadmin noticed that he forgot to upgrade &lt;a href=&#34;http://www.ioncube.com/&#34;&gt;ionCube&lt;/a&gt; after a php upgrade.Here is the code that i ran&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;$array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;();
$array[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;row1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;);
$array[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;row2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;);
$array[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;row3&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;($array &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; $row)
{    
  &lt;span style=&#34;color:#a6e22e&#34;&gt;print_r&lt;/span&gt;($row);  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The expected output is&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Array&lt;/span&gt; ( [&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;row1&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
&lt;span style=&#34;color:#66d9ef&#34;&gt;Array&lt;/span&gt; ( [&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;row2&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; )
&lt;span style=&#34;color:#66d9ef&#34;&gt;Array&lt;/span&gt; ( [&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;row3&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For some odd reason this is the output i got&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Array&lt;/span&gt; ( [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Array&lt;/span&gt; ( [&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;row1&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
&lt;span style=&#34;color:#66d9ef&#34;&gt;Array&lt;/span&gt; ( [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Array&lt;/span&gt; ( [&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;row2&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; ) [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Image scroller</title>
      <link>/post/2005-09-01-image-scroller/</link>
      <pubDate>Thu, 01 Sep 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-09-01-image-scroller/</guid>
      <description>
        
          &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +—————————————————————————
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// | // |
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// | A javascript picture scroller
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +—————————————————————————
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pics&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Array();

&lt;span style=&#34;color:#75715e&#34;&gt;// define the pictures you want to show (html id, image url, link url)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pics&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;picture&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pic&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;scroller&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;top03&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jpg&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//www.microsoft.com’);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//pics[i++] = new picture(‘pic’ + i, ‘/images/scroller/top04.jpg’, ‘http://www.khleuven.be’);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pics&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;picture&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pic&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;scroller&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;top05&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jpg&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rss&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;pics&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;picture&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pic&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;scroller&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;top11&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jpg&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// define the sleep interval
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slow&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* global variables
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lastindex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pause&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pictures&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;offset&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* Scroll
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* @param id the id in which the scroller should be drawn
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scroller&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;)
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// load pictures
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;pictures&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Array(&lt;span style=&#34;color:#a6e22e&#34;&gt;lastindex&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lastindex&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;pictures&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Image&lt;/span&gt;();
		&lt;span style=&#34;color:#a6e22e&#34;&gt;pictures&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pics&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;pictureurl&lt;/span&gt;;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;offset&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;offsetLeft&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;161&lt;/span&gt;;

	&lt;span style=&#34;color:#75715e&#34;&gt;// attach pictures to html, display:none
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lastindex&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;purl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pics&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;pictureurl&lt;/span&gt;;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;lurl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pics&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;linkurl&lt;/span&gt;;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pics&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ileft&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;’ + lurl + ‘&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;’ + purl + ‘&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;’ + pid + ‘&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;display: none; position: absolute; left:’ + ileft + ‘px; top: 27px;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/a&amp;gt;’;&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// start
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;pause&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setInterval&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start()&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;);
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* A container for a picture
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* @param id the DOM id for this picture
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* @param imageurl the URL where the picture can be found
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* @param linkurl the URL where the user should be directed to if he clicks the picture
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;picture&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;pictureurl&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;linkurl&lt;/span&gt;)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pictureurl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pictureurl&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;linkurl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;linkurl&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* Determine of the pictures are ready to be displayed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ready&lt;/span&gt;()
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// test if there is a picture that is not completely loaded
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lastindex&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pics&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;complete&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* Do the actual scrolling
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;work&lt;/span&gt;()
{
	&lt;span style=&#34;color:#75715e&#34;&gt;// move all the pictures to the left
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lastindex&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

		&lt;span style=&#34;color:#75715e&#34;&gt;// if picture is out the container, position it at the right of the other pictures
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;offset&lt;/span&gt;)
		{

			&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;–&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
			{
				&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lastindex&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;–&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			}

			&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;];
			&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pictures&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;;
		}

		&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pics&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ileft&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;];
		document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ileft&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;px&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;;
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* Start the scroller
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;()
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ready&lt;/span&gt;())
	{
		window.&lt;span style=&#34;color:#a6e22e&#34;&gt;clearInterval&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pause&lt;/span&gt;);

		&lt;span style=&#34;color:#75715e&#34;&gt;// calculate positions and make visible
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Array(&lt;span style=&#34;color:#a6e22e&#34;&gt;lastindex&lt;/span&gt;);

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lastindex&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;offset&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
			{
				&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pictures&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;;

			&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pics&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;ileft&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;];
			document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inline&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;;
			document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ileft&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;px&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// work
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;interval&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setInterval&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;work&lt;/span&gt;();&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;slow&lt;/span&gt;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Currency convertor</title>
      <link>/post/2005-08-29-currency-convertor/</link>
      <pubDate>Mon, 29 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-08-29-currency-convertor/</guid>
      <description>
        
          &lt;p&gt;I discovered that the &lt;a href=&#34;http://www.ecb.int&#34;&gt;European Central Bank (ECB)&lt;/a&gt; has a page with &lt;a href=&#34;http://www.ecb.int/stats/exchange/eurofxref/html/index.en.html&#34;&gt;Euro foreign exchange rates&lt;/a&gt;. I thought it would be a nice exercise to write a little script that works with the &lt;a href=&#34;http://www.ecb.int/stats/eurofxref/eurofxref-hist.xml&#34;&gt;XML data&lt;/a&gt; source. Get &lt;a href=&#34;http://www.timvw.be/wp-content/code/php/currencyconvertor.txt&#34;&gt;currencyconvertor.txt&lt;/a&gt; now!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Telnet server</title>
      <link>/post/2005-08-20-telnet-server/</link>
      <pubDate>Sat, 20 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-08-20-telnet-server/</guid>
      <description>
        
          &lt;p&gt;A telnet server that writes the content of a file to it&amp;rsquo;s clients: &lt;a href=&#34;http://www.timvw.be/wp-content/code/java/banner.txt&#34;&gt;banner.txt&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Tests if $host is a proxy server</title>
      <link>/post/2005-08-20-tests-if-host-is-a-proxy-server/</link>
      <pubDate>Sat, 20 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-08-20-tests-if-host-is-a-proxy-server/</guid>
      <description>
        
          &lt;p&gt;Code: &lt;a href=&#34;/wp-content/code/php/proxytester.txt&#34;&gt;php/proxytester.txt&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Generating JavaScript strings</title>
      <link>/post/2005-07-29-generating-javascript-strings/</link>
      <pubDate>Fri, 29 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-07-29-generating-javascript-strings/</guid>
      <description>
        
          &lt;p&gt;Well, I&amp;rsquo;ve always experienced the generating JavaScript strings with PHP as a PITA. An example, which requires you to take care of the escaping of quotes, is the string: &amp;lsquo;O&amp;rsquo;Reilly has nice books&amp;rsquo;. Today i had this brilliant idea to do it as following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
$str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addslashes&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello peter&amp;#39;s cats&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;script type=&amp;#39;text/javascript&amp;#39;&amp;gt;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alert(&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$str&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>value-of in an attribute</title>
      <link>/post/2005-07-25-value-of-in-an-attribute/</link>
      <pubDate>Mon, 25 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-07-25-value-of-in-an-attribute/</guid>
      <description>
        
          &lt;p&gt;There were days that i did not like XSL because it seemed to be impossible to insert a value inside an attribute. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;xsl:value-of select=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/page/action&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Today i&amp;rsquo;ve seen that other people also struggle with this issue. So here is the solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{/page/action}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Read from STDIN without echoing the input back</title>
      <link>/post/2005-07-24-read-from-stdin-without-echoing-the-input-back/</link>
      <pubDate>Sun, 24 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-07-24-read-from-stdin-without-echoing-the-input-back/</guid>
      <description>
        
          &lt;p&gt;Today i was looking for a way to read passwords from a PHP-CLI script. So it was important the password didn&amp;rsquo;t appear on the console. I wrote a &lt;a href=&#34;http://www.timvw.be/wp-content/code/php/ttyecho.php.txt&#34;&gt;ttyecho function&lt;/a&gt; that uses &lt;a href=&#34;http://unixhelp.ed.ac.uk/CGI/man-cgi?stty&#34;&gt;stty&lt;/a&gt; to change the terminal line settings.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Scriptable browser</title>
      <link>/post/2005-07-10-scriptable-browser/</link>
      <pubDate>Sun, 10 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-07-10-scriptable-browser/</guid>
      <description>
        
          &lt;p&gt;Last couple of days i have been trying out &lt;a href=&#34;http://www.lastcraft.com/simple_test.php&#34;&gt;Simple Test&lt;/a&gt;. It allowed me stop stop &lt;a href=&#34;http://www.php.net/echo&#34;&gt;echo&lt;/a&gt; and &lt;a href=&#34;http://www.php.net/print_r&#34;&gt;print_r&lt;/a&gt; variables all over the place. The package also has a &lt;a href=&#34;http://www.lastcraft.com/browser_documentation.php&#34;&gt;Scriptable Browser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At &lt;a href=&#34;http://www.smscity.be&#34;&gt;smscity.be&lt;/a&gt; you can earn credits each day. Therefor you have to visit their site and click some links. I wrote a &lt;a href=&#34;http://www.timvw.be/wp-content/code/php/smscity.txt&#34;&gt;smscity.txt script&lt;/a&gt; that does this for me.&lt;/p&gt;
&lt;p&gt;Now all i had to do is make sure this script is executed each day, so i edited my &lt;a href=&#34;http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5&#34;&gt;crontab&lt;/a&gt;. It looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;###############################################################################
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# # 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;###############################################################################
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# $###############################################################################
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;reboot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;usr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fetchmail&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1800&lt;/span&gt; 
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;usr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wget&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;O&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dev&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;://&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;timvw&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cron&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blogmarks&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dev&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;usr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wget&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;O&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dev&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;://&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;timvw&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cron&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;smscity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dev&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# \* \* \* \* \* \* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# | | | | | |
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# | | | | | - command to be executed 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# | | | | --- day of week (1 - 7) (monday = 1) 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# | | | ----- month (1 - 12) 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# | | ------- day of month (1 - 31)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# | --------- hour (0 - 23) 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ----------- min (0 - 59)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>GNU text utilities</title>
      <link>/post/2005-07-06-gnu-text-utilities/</link>
      <pubDate>Wed, 06 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-07-06-gnu-text-utilities/</guid>
      <description>
        
          &lt;p&gt;More and more i seem to recieve requests from people that need to manipulate some text files.&lt;/p&gt;
&lt;p&gt;And they do not feel like doing it manually. So here are some examples of how i used the&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/software/textutils/manual/textutils/textutils.html&#34;&gt;GNU text utilities&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;I want to split the file below into one with the questions and one with the answers. This can be easily done:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; -f1 trivia.txt &amp;gt; questions.txt
cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; -f2 trivia.txt &amp;gt; answers.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I want to know how many times people have logged in. With last i recieve output like below.&lt;/p&gt;
&lt;p&gt;I generate a top10 list:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;last | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f1 | sort | uniq -c | sort -rn | head
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I want to use this file to generate two files, one for small galleries (&amp;lt;10 photos) and one for large galleries (&amp;gt;= 10 photos)&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;grep -E &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(.*?)\|[0-9]{1}&amp;#39;&lt;/span&gt; galleries.txt &amp;gt; small.txt
grep -vE &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(.*?)\|[0-9]{1}&amp;#39;&lt;/span&gt; galleries.txt &amp;gt;large.txt 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>I am the manual</title>
      <link>/post/2005-07-06-i-am-the-manual/</link>
      <pubDate>Wed, 06 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-07-06-i-am-the-manual/</guid>
      <description>
        
          &lt;p&gt;I found this in my inbox on my favorite &lt;a href=&#34;http://www.php.net&#34;&gt;PHP&lt;/a&gt; forum, &lt;a href=&#34;http://forums.devnetwork.net&#34;&gt;DevNetwork&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi timvw,
you&amp;rsquo;ve won an award!&lt;/p&gt;
&lt;p&gt;I Am The Manual Award&lt;/p&gt;
&lt;p&gt;And the beauty is, you now have a badge to show for it! Smile&lt;/p&gt;
&lt;p&gt;You can download it and use them as your avatar or in your signature:&lt;/p&gt;
&lt;p&gt;Congratulations
patrikG&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Forum Rules&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;How to get what you want!&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;PHP Manual!&lt;!-- raw HTML omitted --&gt;
This isn&amp;rsquo;t the code you&amp;rsquo;re looking for.
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;

        
      </description>
    </item>
    
    <item>
      <title>Exploring the FTP functions</title>
      <link>/post/2005-05-04-exploring-the-ftp-functions/</link>
      <pubDate>Wed, 04 May 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-05-04-exploring-the-ftp-functions/</guid>
      <description>
        
          &lt;p&gt;I am still drowning in the work, and exams are coming close too, but i decided to blog something about the &lt;a href=&#34;http://www.php.net/ftp&#34;&gt;FTP&lt;/a&gt; functions in &lt;a href=&#34;http://www.php.net&#34;&gt;PHP&lt;/a&gt;. The script will download all the files that are available on the remote server.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// make sure we have time enough to execute this script
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set_time_limit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1200&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// connect to the ftp server
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ftp_connect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ftp.scarlet.be&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;ftp_login&lt;/span&gt;($ftp, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;anonymous&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// get the files that are available here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$local &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;glob&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*.\*&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// get the files that are available there
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$remote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ftp_nlist&lt;/span&gt;($ftp, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// get the files there that are not availble here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt;($remote &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; $file)
{  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;in_array&lt;/span&gt;($file, $local))  
  {  
    &lt;span style=&#34;color:#75715e&#34;&gt;// we do not have the file, thus download it  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ftp_get&lt;/span&gt;($ftp, $file, $file, &lt;span style=&#34;color:#a6e22e&#34;&gt;FTP_BINARY&lt;/span&gt;);  
  }
}

&lt;span style=&#34;color:#75715e&#34;&gt;// close the connection
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ftp_close&lt;/span&gt;($ftp);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Formatted input</title>
      <link>/post/2005-03-19-formatted-input/</link>
      <pubDate>Sat, 19 Mar 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-03-19-formatted-input/</guid>
      <description>
        
          &lt;p&gt;I was in need for formatted input and the decomposition of the input into a stream of tokens so i came up with the following:&lt;/p&gt;
&lt;p&gt;Code: &lt;a href=&#34;/wp-content/code/java/TokSequence.java.txt&#34;&gt;java/TokSequence.java.txt&lt;/a&gt;
And now i am ready for formatted input like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      BufferedReader input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BufferedReader&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FileReader&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file.txt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;

      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String in &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;readLine&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        TokSequence ts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TokSequence&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringTokenizer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;in&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; userId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getIn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getDouble&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        String name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// do stuff with userId, score and name
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
      System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;  
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>More on recursion</title>
      <link>/post/2005-03-04-more-on-recursion/</link>
      <pubDate>Fri, 04 Mar 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-03-04-more-on-recursion/</guid>
      <description>
        
          &lt;p&gt;Yesterday i already wrote that an interative implementation for a recursive function is more efficient. And i gave you an example of the fibonacci function. Well, today i am here to present you an implementation for every recursive function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Math&lt;/span&gt;
{
  &lt;span style=&#34;color:#75715e&#34;&gt;// calculate the linear combination  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// fe:     
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// coefficients = array(1, 2, 3)   
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// values = array(4, 5, 6)     
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// returns: (1 \* 4) + (2 \* 5) + (3 * 6)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lc&lt;/span&gt;($coefficients, $values)     
  {        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;($coefficients) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;($values))        
    {             
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;      
    }

    $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ($i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; $i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;($coefficients); &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;$i)    
    {          
      $result &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; $coefficients[$i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; $values[$i];        
    }         
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $result;     
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;// lookup the value for the recursive function     
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// fe:     
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// n: 3      
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// coefficients = array(a, b)    
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// initvalues = array(0, 1)     
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// returns: 2    
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// this is the same as f(n) = (a \* (n-2)) + (b \* (n-1))    
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recursive&lt;/span&gt;($n, $coefficients, $initvalues)    
  {          
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;($initvalues))         
    {             
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $initvalues[$n];          
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ($i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;($initvalues); $i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; $n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;$i)        
    {            
      $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lc&lt;/span&gt;($coefficients, $initvalues);            
      &lt;span style=&#34;color:#a6e22e&#34;&gt;array_shift&lt;/span&gt;($initvalues);             
      &lt;span style=&#34;color:#a6e22e&#34;&gt;array_push&lt;/span&gt;($initvalues, $result);        
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $result;    
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As an example we use this class to calculate fibonacci(3):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;$coefficients &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// f(n) = (1 \* f(n-2)) + (1 \* f(n-1))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$initvalues &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// f(0) = 0 and f(1) = 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;recursive&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, $coefficients, $initvalues);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Calculating Fibonacci</title>
      <link>/post/2005-03-03-calculating-fibonacci/</link>
      <pubDate>Thu, 03 Mar 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-03-03-calculating-fibonacci/</guid>
      <description>
        
          &lt;p&gt;What is a &lt;a href=&#34;http://en.wikipedia.org/wiki/Recursion&#34;&gt;recursive&lt;/a&gt; function? It is a function where the value for input n is calculated as a linear combination of the previous 1, 2, &amp;hellip;, n-1 function values. An example is the fibonacci function: f(n) = f(n-1) + f(n-2).&lt;/p&gt;
&lt;p&gt;If we program this our first code would look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibonacci&lt;/span&gt;($n)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $n; } &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibonacci&lt;/span&gt;($n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibonacci&lt;/span&gt;($n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It becomes clear that this is really inefficient. For example if we call fibonacci(3) the following function calls will be made:&lt;/p&gt;
&lt;p&gt;fibonacci(3)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fibonacci(2)
&amp;ndash; fibonacci(1)
&amp;mdash; fibonacci(0)
&amp;ndash;fibonacci(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can optimize this function by implementing it as an iteration. We still have to calculate all the previous values, thus the time-complexity of this algorithm is O(n). Here is the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibonacci&lt;/span&gt;($n)
{ 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $n; } 
  $nmin2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; 
  $nmin1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; 
  $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ($i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; $i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;$i) { 
    $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $nmin1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $nmin2; 
    $nmin2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $nmin1; 
    $nmin1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $result; 
  }    
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $result; 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Time to take our math course and lookup a non-recursive function for fibonacci. Eureka, we have found one! The algorithm has constant time complexity. The proof for this function is can be found &lt;a href=&#34;http://mathforum.org/library/drmath/view/52686.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibonacci&lt;/span&gt;($n)
{   
  $denominator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pow&lt;/span&gt;((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, $n) &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pow&lt;/span&gt;((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, $n);  
  $nominator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $denominator &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; $nominator;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Getting started with CVS</title>
      <link>/post/2005-02-08-getting-started-with-cvs/</link>
      <pubDate>Tue, 08 Feb 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-02-08-getting-started-with-cvs/</guid>
      <description>
        
          &lt;p&gt;I got an e-mail that asked me how to get started with CVS as quick as possible. The first time i got lost too. So i&amp;rsquo;ll give a quick summary how i did it (no p-server).&lt;/p&gt;
&lt;p&gt;The repository will live on a &lt;a href=&#34;http://www.debian.org&#34;&gt;debian&lt;/a&gt; machine in /home/users/timvw/services/cvs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;timvw@debian: apt-get install cvs &lt;span style=&#34;color:#75715e&#34;&gt;# get the tools&lt;/span&gt;
timvw@debian: cvs -d /home/users/timvw/services/cvs init &lt;span style=&#34;color:#75715e&#34;&gt;# create repository&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On my windows machine i use &lt;a href=&#34;http://www.tortoisecvs.org&#34;&gt;TortoiseCVS&lt;/a&gt;. I want to make a module pecl that will contain all my &lt;a href=&#34;http://pecl.php.net&#34;&gt;pecl&lt;/a&gt; related code.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Configure TortoiseCVS to use the &lt;a href=&#34;http://www.ssh.com&#34;&gt;SSH.com&lt;/a&gt; client instead of the built-in &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34;&gt;Putty&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Fill in the path to the SSH binary (tools tab).&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Create a directory that will hold the code (i choose pecl as name).&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Create a module (Choose the directory you created and click right).&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Fill in the settings.&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Hit Ok to initialise the module.&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Create a README file and add it to the module.&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Add a comment message&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;Commit the changes&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;Update your files (Other people have commited their changes).&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;Read The Fine Manual at &lt;a href=&#34;http://cvsbook.red-bean.com/cvsbook.html&#34;&gt;http://cvsbook.red-bean.com/cvsbook.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

        
      </description>
    </item>
    
    <item>
      <title>Configuring Mutt for GPG</title>
      <link>/post/2005-02-06-configuring-mutt-for-gpg/</link>
      <pubDate>Sun, 06 Feb 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-02-06-configuring-mutt-for-gpg/</guid>
      <description>
        
          &lt;p&gt;Today i generated a &lt;a href=&#34;http://www.pgpi.org/&#34;&gt;PGP&lt;/a&gt; (Pretty Good Privacy) key for my e-mail address. I also configured my mailclient, &lt;a href=&#34;http://www.mutt.org&#34;&gt;mutt&lt;/a&gt;, for use with &lt;a href=&#34;http://www.gnupg.org&#34;&gt;GnuPG&lt;/a&gt;. I copied a sample file i found on the net but always got an error message: sh: line 1: pgpewrap: command not found. It appears that /usr/lib/mutt/ is not in the path and therefore is not found. Here is the tweaked .muttrc part:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;

        
      </description>
    </item>
    
    <item>
      <title>Elegantly generate SQL queries</title>
      <link>/post/2005-02-02-elegantly-generate-sql-queries/</link>
      <pubDate>Wed, 02 Feb 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-02-02-elegantly-generate-sql-queries/</guid>
      <description>
        
          &lt;p&gt;Code: &lt;a href=&#34;/wp-content/code/php/elegantsql.txt&#34;&gt;php/elegantsql.txt&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Bypassing URL file-access is disabled</title>
      <link>/post/2005-01-28-bypassing-url-file-access-is-disabled/</link>
      <pubDate>Fri, 28 Jan 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-01-28-bypassing-url-file-access-is-disabled/</guid>
      <description>
        
          &lt;p&gt;For some odd reason this host has disabled URL file-access.&lt;/p&gt;
&lt;p&gt;So i needed something simple to bypass this problem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_url&lt;/span&gt;($url)
{     
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;preg_match&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#^http://(.\*?)/(.\*)$#&amp;#34;&lt;/span&gt;, $url, $matches))    
  {
    $host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $matches[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];       
    $uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $matches[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];       
    $msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET /&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$uri&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; HTTP/1.0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Host: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$host\r\n\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    $fp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fsockopen&lt;/span&gt;($host, &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, $errno, $errstr, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fwrite&lt;/span&gt;($fp, $msg);         
    $ignore &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;feof&lt;/span&gt;($fp))        
    {            
      $read &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fgets&lt;/span&gt;($fp, &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$ignore)            
      {     
        $contents &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $read;            
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;preg_match&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^Content-Type: .*?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, $read))          
      {                
        $ignore &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;          
      }        
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fclose&lt;/span&gt;($fp);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $contents;    
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Playing with XML and XSL</title>
      <link>/post/2005-01-23-playing-with-xml-and-xsl/</link>
      <pubDate>Sun, 23 Jan 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-01-23-playing-with-xml-and-xsl/</guid>
      <description>
        
          &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// add stuff to an xml document in php4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$doc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;domxml_open_mem&lt;/span&gt;($xml);
$root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $doc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;document_element&lt;/span&gt;();
$inner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $doc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create_element&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inner&amp;#39;&lt;/span&gt;);
$root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append_child&lt;/span&gt;($inner);

&lt;span style=&#34;color:#75715e&#34;&gt;// add stuff to an xml document in php5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$doc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DomDocument&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;);
$doc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loadXML&lt;/span&gt;($xml);
$root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $doc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getelementsByTagName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resultset&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
$inner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $doc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createElement&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inner&amp;#39;&lt;/span&gt;);
$root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $root&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;appendChild&lt;/span&gt;($inner); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/xhtml1/&#34;&gt;XHTML&lt;/a&gt; does not allow to have an empty list, &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;. Therefore we need to test first if there are any nodes we want to put in that list. The code to do this looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;xsl:for-each&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;select=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//resultset/entity&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mainitem&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;maintitle&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;select=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;maincontent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;xsl:if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;count(items/item) &amp;gt; 0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;xsl:for-each&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;select=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;items/item&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{link}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;select=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/xsl:for-each&amp;gt;&lt;/span&gt; 
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt; 
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/xsl:if&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/xsl:for-each&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>XSLT annoyances</title>
      <link>/post/2005-01-20-xslt-annoyances/</link>
      <pubDate>Thu, 20 Jan 2005 00:00:00 +0000</pubDate>
      
      <guid>/post/2005-01-20-xslt-annoyances/</guid>
      <description>
        
          &lt;p&gt;Today i&amp;rsquo;ve finally made the switch. My code generates &lt;a href=&#34;http://www.w3.org/XML/&#34;&gt;XML&lt;/a&gt; and then i translate it to &lt;a href=&#34;http://www.w3.org/TR/xhtml1/&#34;&gt;XHTML&lt;/a&gt; with &lt;a href=&#34;http://www.w3.org/TR/xslt&#34;&gt;XSLT&lt;/a&gt;. However, if i write&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;textarea&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;it will be translated to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;textarea&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A not so good workaround is to write: (Notice the space in the xsl:text)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;textarea&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/xsl:text&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;UPDATE on 2005-01-20 05:42&lt;/p&gt;
&lt;p&gt;The solution is to use html as output method instead of xml.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;UPDATE on 2005-01-21 02:15&lt;/p&gt;
&lt;p&gt;You may also want to make sure HTML tags do not get transformed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;select=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attribute[@name=&amp;#39;content&amp;#39;]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;disable-output-escaping=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Basic download script</title>
      <link>/post/2004-12-29-basic-download-script/</link>
      <pubDate>Wed, 29 Dec 2004 00:00:00 +0000</pubDate>
      
      <guid>/post/2004-12-29-basic-download-script/</guid>
      <description>
        
          &lt;p&gt;Code: &lt;a href=&#34;/wp-content/code/php/download.txt&#34;&gt;php/download.txt&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Custom ordering with MySQL</title>
      <link>/post/2004-12-09-custom-ordering-with-mysql/</link>
      <pubDate>Thu, 09 Dec 2004 00:00:00 +0000</pubDate>
      
      <guid>/post/2004-12-09-custom-ordering-with-mysql/</guid>
      <description>
        
          &lt;p&gt;As a follow up to &lt;a href=&#34;http://www.timvw.be/custom-ordering&#34;&gt;Custom Ordering&lt;/a&gt; I discovered the nice &lt;a href=&#34;http://dev.mysql.com/doc/mysql/en/String_functions.html&#34;&gt;Field&lt;/a&gt; function in &lt;a href=&#34;http://www.mysql.com&#34;&gt;MySQL.&lt;/a&gt; after it was mentionned on my favorite &lt;a href=&#34;http://forums.devnetwork.net&#34;&gt;PHP Forum&lt;/a&gt; by &lt;a href=&#34;http://forums.devnetwork.net/profile.php?mode=viewprofile&amp;amp;u=7815&#34;&gt;Weirdan&lt;/a&gt;. It allows one to order a column on a custom order relation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; foo
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; FIELD(&lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>TetriNet spectator client</title>
      <link>/post/2004-11-08-tetrinet-spectator-client/</link>
      <pubDate>Mon, 08 Nov 2004 00:00:00 +0000</pubDate>
      
      <guid>/post/2004-11-08-tetrinet-spectator-client/</guid>
      <description>
        
          &lt;p&gt;I present a Spectator (Applet) for TetriNet: &lt;a href=&#34;http://www.timvw.be/wp-content/code/java/JSpectator.zip&#34;&gt;JSpectator.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Custom ordering</title>
      <link>/post/2004-07-18-custom-ordering/</link>
      <pubDate>Sun, 18 Jul 2004 00:00:00 +0000</pubDate>
      
      <guid>/post/2004-07-18-custom-ordering/</guid>
      <description>
        
          &lt;p&gt;Assume we have a fruits table. And we want to select all the fruits that have a red or orange or blue color. But we want the resultset to have first all the fruits with color=red, then the fruits with color=blue and then the fruits with color=orange. It is obvious we can not use an alphabetical order. Thus we have to introduce our own order relation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; fruits
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;order&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;orange&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>One login at a time</title>
      <link>/post/2004-07-16-one-login-at-a-time/</link>
      <pubDate>Fri, 16 Jul 2004 00:00:00 +0000</pubDate>
      
      <guid>/post/2004-07-16-one-login-at-a-time/</guid>
      <description>
        
          &lt;p&gt;Today someone asked: &amp;ldquo;In other words, how do we prevent two users from using the same password to access the same account at the same time?&amp;rdquo; You can read my answer in &lt;a href=&#34;http://www.timvw.be/wp-content/code/php/onlyone.txt&#34;&gt;onlyone.txt&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Backup script</title>
      <link>/post/2004-06-28-backup-script/</link>
      <pubDate>Mon, 28 Jun 2004 00:00:00 +0000</pubDate>
      
      <guid>/post/2004-06-28-backup-script/</guid>
      <description>
        
          &lt;p&gt;The current shell server i am using returns bogus output for commands like df. Mind the negative value for 1-k blocks.&lt;/p&gt;
&lt;p&gt;timvw@localhost:~$ df&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  1k-blocks
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  Used
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  Available
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  Use%
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  Mounted on
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  &amp;lt;b&amp;gt;-780429856382&amp;lt;/b&amp;gt;
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  1
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  74%
&amp;lt;/td&amp;gt;

&amp;lt;td&amp;gt;
  /
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;It thought it would be a good idea to have a backup once in a while, but most of the times when i did it, i forgot to backup my database. So i wrote a little backup.script that remembers to do that for me.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;############################################################################### &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Generate a backup file of homedirectory and database&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# # Up###############################################################################&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# dump database&lt;/span&gt;
mysqldump -u username -ppassword -h invalid.org dbname &amp;gt; ~/mysql.dmp

&lt;span style=&#34;color:#75715e&#34;&gt;# generate gzipped archive of homedirectory&lt;/span&gt;
tar -czf /tmp/backup.tgz ~

&lt;span style=&#34;color:#75715e&#34;&gt;# move backup to homedirectory and change name&lt;/span&gt;
mv /tmp/backup.tgz ~/madoka-&lt;span style=&#34;color:#ae81ff&#34;&gt;\`&lt;/span&gt;date +%F&lt;span style=&#34;color:#ae81ff&#34;&gt;\`&lt;/span&gt;.tgz

&lt;span style=&#34;color:#75715e&#34;&gt;# remove database dump&lt;/span&gt;
rm ~/mysql.dmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Get all the languages a visitor accepts</title>
      <link>/post/2004-06-26-get-all-the-languages-a-visitor-accepts/</link>
      <pubDate>Sat, 26 Jun 2004 00:00:00 +0000</pubDate>
      
      <guid>/post/2004-06-26-get-all-the-languages-a-visitor-accepts/</guid>
      <description>
        
          &lt;p&gt;Code: &lt;a href=&#34;/wp-content/code/php/languages.txt&#34;&gt;php/languages.txt&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>A Unix daemon</title>
      <link>/post/2004-06-25-a-unix-daemon/</link>
      <pubDate>Fri, 25 Jun 2004 00:00:00 +0000</pubDate>
      
      <guid>/post/2004-06-25-a-unix-daemon/</guid>
      <description>
        
          &lt;p&gt;Today i&amp;rsquo;ve written a daemon that communicates with the &lt;a href=&#34;http://www.netsize.com&#34;&gt;Netsize SMS Gateway&lt;/a&gt;. The &lt;a href=&#34;http://www.timvw.be/wp-content/code/cpp/daemon.zip&#34;&gt;daemon sources&lt;/a&gt; are available for download. You will have to implement your void getCode(double number, char * code) method yourself though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.timvw.be/wp-content/images/daemon.png&#34; alt=&#34;daemon&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Listen to online radio</title>
      <link>/post/2004-05-21-listen-to-online-radio/</link>
      <pubDate>Fri, 21 May 2004 00:00:00 +0000</pubDate>
      
      <guid>/post/2004-05-21-listen-to-online-radio/</guid>
      <description>
        
          &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# # Up# &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This script allows you to listen to Belgian online radio streams.  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; 
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[1] Radio 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[2] Radio 2
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[3] Studio Brussel
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[4] Donna
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[5] 4FM
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[6] QMusic
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[7] Topradio 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[9] Klara
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Enter your choice: &amp;#34;&lt;/span&gt;
read choice  
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
choice&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$choice&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; in
1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; station&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mms://streampower.belgacom.be:1755/radio1high&amp;#34;&lt;/span&gt; ;;
2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; station&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mms://streampower.belgacom.be:1755/ra2vlbhigh&amp;#34;&lt;/span&gt; ;;
3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; station&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mms://streampower.belgacom.be:1755/stubruhigh&amp;#34;&lt;/span&gt; ;;    
4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; station&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mms://streampower.belgacom.be:1755/donnahigh&amp;#34;&lt;/span&gt; ;;    
5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; station&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mms://mss.streampower.be/4fmhi&amp;#34;&lt;/span&gt; ;;    
6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; station&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mms://mss.streampower.be/qmusic_ahi&amp;#34;&lt;/span&gt; ;;  
7&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; station&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mms://mss.streampower.be/topahi&amp;#34;&lt;/span&gt; ;;     
9&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; station&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mms://streampower.belgacom.be:1755/stubruhigh&amp;#34;&lt;/span&gt; ;;  
*&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrong choice!&amp;#34;&lt;/span&gt;    
exit
&lt;span style=&#34;color:#66d9ef&#34;&gt;esac&lt;/span&gt;

mplayer $station

exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>A banner script</title>
      <link>/post/2004-04-12-a-banner-script/</link>
      <pubDate>Mon, 12 Apr 2004 00:00:00 +0000</pubDate>
      
      <guid>/post/2004-04-12-a-banner-script/</guid>
      <description>
        
          &lt;p&gt;Recently i wrote a &lt;a href=&#34;http://www.timvw.be/wp-content/code/php/banner.txt&#34;&gt;banner system&lt;/a&gt; that displays different banners based on the visitor&amp;rsquo;s country. It uses the remote address to find the country associated with that address (using &lt;a href=&#34;http://www.maxmind.com/&#34;&gt;geoip&lt;/a&gt;), and then it looks in the database to find a url for that country. If there is no such url, it looks up the default url. And finally it redirects the visitor to the url.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Parsing XML</title>
      <link>/post/2004-04-06-parsing-xml/</link>
      <pubDate>Tue, 06 Apr 2004 00:00:00 +0000</pubDate>
      
      <guid>/post/2004-04-06-parsing-xml/</guid>
      <description>
        
          &lt;p&gt;Today i wrote a little program, &lt;a href=&#34;http://www.timvw.be/wp-content/code/csharp/VolumeMeter.txt&#34;&gt;VolumeMeter&lt;/a&gt; which is usefull for &lt;a href=&#34;http://www.scarlet.be&#34;&gt;Scarlet&lt;/a&gt; customers. It queries &lt;a href=&#34;http://mijn.scarlet.be&#34;&gt;mijn.scarlet.be&lt;/a&gt; and returns how many megabytes they have used this month.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Allow to select multiple items in a selectbox</title>
      <link>/post/2003-12-19-allow-to-select-multiple-items-in-a-selectbox/</link>
      <pubDate>Fri, 19 Dec 2003 00:00:00 +0000</pubDate>
      
      <guid>/post/2003-12-19-allow-to-select-multiple-items-in-a-selectbox/</guid>
      <description>
        
          &lt;p&gt;Code: &lt;a href=&#34;/wp-content/code/php/select-multiple.txt&#34;&gt;php/select-multiple.txt&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Kill a user and his processes</title>
      <link>/post/2003-12-12-kill-a-user-and-his-processes/</link>
      <pubDate>Fri, 12 Dec 2003 00:00:00 +0000</pubDate>
      
      <guid>/post/2003-12-12-kill-a-user-and-his-processes/</guid>
      <description>
        
          &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# # Up#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This script kills all processes that are owned by a given user.  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
	ps -ef | grep $1 | grep -v grep | awk ‘&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; print &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;’ | xargs kill -9
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: killuser.sh username&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
    <item>
      <title>Sokoban</title>
      <link>/post/2003-06-18-sokoban/</link>
      <pubDate>Wed, 18 Jun 2003 00:00:00 +0000</pubDate>
      
      <guid>/post/2003-06-18-sokoban/</guid>
      <description>
        
          &lt;p&gt;Today i finished my own version of the wellknown game Sokoban. Get &lt;a href=&#34;http://www.timvw.be/wp-content/code/java/sokoban.zip&#34;&gt;sokoban.zip&lt;/a&gt; now!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>A TetriNet Spectator bot that generates game statistics</title>
      <link>/post/2002-09-05-a-tetrinet-spectator-bot-that-generates-game-statistics/</link>
      <pubDate>Thu, 05 Sep 2002 00:00:00 +0000</pubDate>
      
      <guid>/post/2002-09-05-a-tetrinet-spectator-bot-that-generates-game-statistics/</guid>
      <description>
        
          &lt;p&gt;Get the TetriNet Spectator bot that generates game statistics: &lt;a href=&#34;http://www.timvw.be/wp-content/code/c/statsbot.zip&#34;&gt;statsbot.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>TetriNet server</title>
      <link>/post/2002-08-13-tetrinet-server/</link>
      <pubDate>Tue, 13 Aug 2002 00:00:00 +0000</pubDate>
      
      <guid>/post/2002-08-13-tetrinet-server/</guid>
      <description>
        
          &lt;p&gt;I hacked a TetriNet server together (with some really ugly code in it). Anyway, you can get it at: &lt;a href=&#34;http://www.timvw.be/wp-content/code/java/tserver.zip&#34;&gt;tserver.zip&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Dump a MySQL database into a TetriNet winlist</title>
      <link>/post/2002-07-29-dump-a-mysql-database-into-a-tetrinet-winlist/</link>
      <pubDate>Mon, 29 Jul 2002 00:00:00 +0000</pubDate>
      
      <guid>/post/2002-07-29-dump-a-mysql-database-into-a-tetrinet-winlist/</guid>
      <description>
        
          &lt;p&gt;Code: &lt;a href=&#34;/wp-content/code/c/database2winlist.txt&#34;&gt;c/database2winlist.txt&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Write a TetriNet winlist to a MySQL database</title>
      <link>/post/2001-05-05-write-a-tetrinet-winlist-to-a-mysql-database/</link>
      <pubDate>Sat, 05 May 2001 00:00:00 +0000</pubDate>
      
      <guid>/post/2001-05-05-write-a-tetrinet-winlist-to-a-mysql-database/</guid>
      <description>
        
          &lt;p&gt;Code: &lt;a href=&#34;/wp-content/code/c/winlist2database.txt&#34;&gt;c/winlist2database.txt&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
